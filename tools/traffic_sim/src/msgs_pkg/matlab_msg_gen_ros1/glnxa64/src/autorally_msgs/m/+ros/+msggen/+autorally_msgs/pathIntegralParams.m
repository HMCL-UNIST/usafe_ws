
classdef pathIntegralParams < ros.Message
    %pathIntegralParams MATLAB implementation of autorally_msgs/pathIntegralParams
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'autorally_msgs/pathIntegralParams' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '262665b21f53db4e41908d6cccfe0a29' % The MD5 Checksum of the message definition
        PropertyList = { 'Hz' 'NumTimesteps' 'NumIters' 'Gamma' 'InitSteering' 'InitThrottle' 'SteeringVar' 'ThrottleVar' 'MaxThrottle' 'SpeedCoefficient' 'TrackCoefficient' 'MaxSlipAngle' 'TrackSlop' 'CrashCoeff' 'MapPath' 'DesiredSpeed' } % List of non-constant message properties
        ROSPropertyList = { 'hz' 'num_timesteps' 'num_iters' 'gamma' 'init_steering' 'init_throttle' 'steering_var' 'throttle_var' 'max_throttle' 'speed_coefficient' 'track_coefficient' 'max_slip_angle' 'track_slop' 'crash_coeff' 'map_path' 'desired_speed' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Hz
        NumTimesteps
        NumIters
        Gamma
        InitSteering
        InitThrottle
        SteeringVar
        ThrottleVar
        MaxThrottle
        SpeedCoefficient
        TrackCoefficient
        MaxSlipAngle
        TrackSlop
        CrashCoeff
        MapPath
        DesiredSpeed
    end
    methods
        function set.Hz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'Hz');
            obj.Hz = int64(val);
        end
        function set.NumTimesteps(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'NumTimesteps');
            obj.NumTimesteps = int64(val);
        end
        function set.NumIters(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'NumIters');
            obj.NumIters = int64(val);
        end
        function set.Gamma(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'Gamma');
            obj.Gamma = double(val);
        end
        function set.InitSteering(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'InitSteering');
            obj.InitSteering = double(val);
        end
        function set.InitThrottle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'InitThrottle');
            obj.InitThrottle = double(val);
        end
        function set.SteeringVar(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'SteeringVar');
            obj.SteeringVar = double(val);
        end
        function set.ThrottleVar(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'ThrottleVar');
            obj.ThrottleVar = double(val);
        end
        function set.MaxThrottle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'MaxThrottle');
            obj.MaxThrottle = double(val);
        end
        function set.SpeedCoefficient(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'SpeedCoefficient');
            obj.SpeedCoefficient = double(val);
        end
        function set.TrackCoefficient(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'TrackCoefficient');
            obj.TrackCoefficient = double(val);
        end
        function set.MaxSlipAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'MaxSlipAngle');
            obj.MaxSlipAngle = double(val);
        end
        function set.TrackSlop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'TrackSlop');
            obj.TrackSlop = double(val);
        end
        function set.CrashCoeff(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'CrashCoeff');
            obj.CrashCoeff = double(val);
        end
        function set.MapPath(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'MapPath');
            obj.MapPath = char(val);
        end
        function set.DesiredSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'pathIntegralParams', 'DesiredSpeed');
            obj.DesiredSpeed = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.autorally_msgs.pathIntegralParams.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.autorally_msgs.pathIntegralParams;
            obj.reload(strObj);
        end
    end
end
