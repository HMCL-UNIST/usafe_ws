
classdef chassisState < ros.Message
    %chassisState MATLAB implementation of autorally_msgs/chassisState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'autorally_msgs/chassisState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'cbd23a33a5ec266cc70ab1630ddbccef' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'ThrottleRelayEnabled' 'AutonomousEnabled' 'RunstopMotionEnabled' 'SteeringCommander' 'Steering' 'ThrottleCommander' 'Throttle' 'FrontBrakeCommander' 'FrontBrake' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'throttleRelayEnabled' 'autonomousEnabled' 'runstopMotionEnabled' 'steeringCommander' 'steering' 'throttleCommander' 'throttle' 'frontBrakeCommander' 'frontBrake' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        ThrottleRelayEnabled
        AutonomousEnabled
        RunstopMotionEnabled
        SteeringCommander
        Steering
        ThrottleCommander
        Throttle
        FrontBrakeCommander
        FrontBrake
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'Header')
            obj.Header = val;
        end
        function set.ThrottleRelayEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'ThrottleRelayEnabled');
            obj.ThrottleRelayEnabled = logical(val);
        end
        function set.AutonomousEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'AutonomousEnabled');
            obj.AutonomousEnabled = logical(val);
        end
        function set.RunstopMotionEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'RunstopMotionEnabled');
            obj.RunstopMotionEnabled = logical(val);
        end
        function set.SteeringCommander(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'SteeringCommander');
            obj.SteeringCommander = char(val);
        end
        function set.Steering(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'Steering');
            obj.Steering = double(val);
        end
        function set.ThrottleCommander(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'ThrottleCommander');
            obj.ThrottleCommander = char(val);
        end
        function set.Throttle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'Throttle');
            obj.Throttle = double(val);
        end
        function set.FrontBrakeCommander(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'FrontBrakeCommander');
            obj.FrontBrakeCommander = char(val);
        end
        function set.FrontBrake(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'chassisState', 'FrontBrake');
            obj.FrontBrake = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.autorally_msgs.chassisState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.autorally_msgs.chassisState;
            obj.reload(strObj);
        end
    end
end
