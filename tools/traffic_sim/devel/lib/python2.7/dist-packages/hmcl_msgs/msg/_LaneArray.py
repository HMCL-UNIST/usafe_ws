# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmcl_msgs/LaneArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hmcl_msgs.msg
import std_msgs.msg

class LaneArray(genpy.Message):
  _md5sum = "c020f3d4a1c73c6e708e0f5be1131a6c"
  _type = "hmcl_msgs/LaneArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 id
Lane[] lanes
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hmcl_msgs/Lane
Header header
int32 lane_id
bool lane_change_flag
float32 speed_limit 
Waypoint[] waypoints
Trafficlight[] trafficlights
Waypoint[] speedbumps
================================================================================
MSG: hmcl_msgs/Waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
uint32 lane_id
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: hmcl_msgs/Trafficlight
Header header
int32 id
int32 lanelet_id
geometry_msgs/Pose pose
TrafficlightBulb left_light
TrafficlightBulb straight_light
TrafficlightBulb right_light
bool valid_stop_line
geometry_msgs/Pose stop_line
================================================================================
MSG: hmcl_msgs/TrafficlightBulb
int32 id
int32 light_status # 0 red, 1 green, 2 yellow """
  __slots__ = ['header','id','lanes']
  _slot_types = ['std_msgs/Header','int32','hmcl_msgs/Lane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.lanes is None:
        self.lanes = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.lanes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_iBf().pack(_x.lane_id, _x.lane_change_flag, _x.speed_limit))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v3 = val2.pose
          _v4 = _v3.header
          _x = _v4.seq
          buff.write(_get_struct_I().pack(_x))
          _v5 = _v4.stamp
          _x = _v5
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v4.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v6 = _v3.pose
          _v7 = _v6.position
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = _v6.orientation
          _x = _v8
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v9 = val2.twist
          _v10 = _v9.header
          _x = _v10.seq
          buff.write(_get_struct_I().pack(_x))
          _v11 = _v10.stamp
          _x = _v11
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v10.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v12 = _v9.twist
          _v13 = _v12.linear
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = _v12.angular
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.lane_id
          buff.write(_get_struct_I().pack(_x))
        length = len(val1.trafficlights)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trafficlights:
          _v15 = val2.header
          _x = _v15.seq
          buff.write(_get_struct_I().pack(_x))
          _v16 = _v15.stamp
          _x = _v16
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v15.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2i().pack(_x.id, _x.lanelet_id))
          _v17 = val2.pose
          _v18 = _v17.position
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = _v17.orientation
          _x = _v19
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v20 = val2.left_light
          _x = _v20
          buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
          _v21 = val2.straight_light
          _x = _v21
          buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
          _v22 = val2.right_light
          _x = _v22
          buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
          _x = val2.valid_stop_line
          buff.write(_get_struct_B().pack(_x))
          _v23 = val2.stop_line
          _v24 = _v23.position
          _x = _v24
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v25 = _v23.orientation
          _x = _v25
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.speedbumps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.speedbumps:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v26 = val2.pose
          _v27 = _v26.header
          _x = _v27.seq
          buff.write(_get_struct_I().pack(_x))
          _v28 = _v27.stamp
          _x = _v28
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v27.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v29 = _v26.pose
          _v30 = _v29.position
          _x = _v30
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v31 = _v29.orientation
          _x = _v31
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v32 = val2.twist
          _v33 = _v32.header
          _x = _v33.seq
          buff.write(_get_struct_I().pack(_x))
          _v34 = _v33.stamp
          _x = _v34
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v33.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v35 = _v32.twist
          _v36 = _v35.linear
          _x = _v36
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v37 = _v35.angular
          _x = _v37
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.lane_id
          buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Lane()
        _v38 = val1.header
        start = end
        end += 4
        (_v38.seq,) = _get_struct_I().unpack(str[start:end])
        _v39 = _v38.stamp
        _x = _v39
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v38.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v38.frame_id = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.lane_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_iBf().unpack(str[start:end])
        val1.lane_change_flag = bool(val1.lane_change_flag)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v40 = val2.pose
          _v41 = _v40.header
          start = end
          end += 4
          (_v41.seq,) = _get_struct_I().unpack(str[start:end])
          _v42 = _v41.stamp
          _x = _v42
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v41.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v41.frame_id = str[start:end]
          _v43 = _v40.pose
          _v44 = _v43.position
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v45 = _v43.orientation
          _x = _v45
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v46 = val2.twist
          _v47 = _v46.header
          start = end
          end += 4
          (_v47.seq,) = _get_struct_I().unpack(str[start:end])
          _v48 = _v47.stamp
          _x = _v48
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v47.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v47.frame_id = str[start:end]
          _v49 = _v46.twist
          _v50 = _v49.linear
          _x = _v50
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v51 = _v49.angular
          _x = _v51
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.lane_id,) = _get_struct_I().unpack(str[start:end])
          val1.waypoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trafficlights = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Trafficlight()
          _v52 = val2.header
          start = end
          end += 4
          (_v52.seq,) = _get_struct_I().unpack(str[start:end])
          _v53 = _v52.stamp
          _x = _v53
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v52.frame_id = str[start:end]
          _x = val2
          start = end
          end += 8
          (_x.id, _x.lanelet_id,) = _get_struct_2i().unpack(str[start:end])
          _v54 = val2.pose
          _v55 = _v54.position
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = _v54.orientation
          _x = _v56
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v57 = val2.left_light
          _x = _v57
          start = end
          end += 8
          (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
          _v58 = val2.straight_light
          _x = _v58
          start = end
          end += 8
          (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
          _v59 = val2.right_light
          _x = _v59
          start = end
          end += 8
          (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val2.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
          val2.valid_stop_line = bool(val2.valid_stop_line)
          _v60 = val2.stop_line
          _v61 = _v60.position
          _x = _v61
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v62 = _v60.orientation
          _x = _v62
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.trafficlights.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.speedbumps = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v63 = val2.pose
          _v64 = _v63.header
          start = end
          end += 4
          (_v64.seq,) = _get_struct_I().unpack(str[start:end])
          _v65 = _v64.stamp
          _x = _v65
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v64.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v64.frame_id = str[start:end]
          _v66 = _v63.pose
          _v67 = _v66.position
          _x = _v67
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v68 = _v66.orientation
          _x = _v68
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v69 = val2.twist
          _v70 = _v69.header
          start = end
          end += 4
          (_v70.seq,) = _get_struct_I().unpack(str[start:end])
          _v71 = _v70.stamp
          _x = _v71
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v70.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v70.frame_id = str[start:end]
          _v72 = _v69.twist
          _v73 = _v72.linear
          _x = _v73
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v74 = _v72.angular
          _x = _v74
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.lane_id,) = _get_struct_I().unpack(str[start:end])
          val1.speedbumps.append(val2)
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _v75 = val1.header
        _x = _v75.seq
        buff.write(_get_struct_I().pack(_x))
        _v76 = _v75.stamp
        _x = _v76
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v75.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_iBf().pack(_x.lane_id, _x.lane_change_flag, _x.speed_limit))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v77 = val2.pose
          _v78 = _v77.header
          _x = _v78.seq
          buff.write(_get_struct_I().pack(_x))
          _v79 = _v78.stamp
          _x = _v79
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v78.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v80 = _v77.pose
          _v81 = _v80.position
          _x = _v81
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v82 = _v80.orientation
          _x = _v82
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v83 = val2.twist
          _v84 = _v83.header
          _x = _v84.seq
          buff.write(_get_struct_I().pack(_x))
          _v85 = _v84.stamp
          _x = _v85
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v84.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v86 = _v83.twist
          _v87 = _v86.linear
          _x = _v87
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v88 = _v86.angular
          _x = _v88
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.lane_id
          buff.write(_get_struct_I().pack(_x))
        length = len(val1.trafficlights)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trafficlights:
          _v89 = val2.header
          _x = _v89.seq
          buff.write(_get_struct_I().pack(_x))
          _v90 = _v89.stamp
          _x = _v90
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v89.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2i().pack(_x.id, _x.lanelet_id))
          _v91 = val2.pose
          _v92 = _v91.position
          _x = _v92
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v93 = _v91.orientation
          _x = _v93
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v94 = val2.left_light
          _x = _v94
          buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
          _v95 = val2.straight_light
          _x = _v95
          buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
          _v96 = val2.right_light
          _x = _v96
          buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
          _x = val2.valid_stop_line
          buff.write(_get_struct_B().pack(_x))
          _v97 = val2.stop_line
          _v98 = _v97.position
          _x = _v98
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v99 = _v97.orientation
          _x = _v99
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.speedbumps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.speedbumps:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v100 = val2.pose
          _v101 = _v100.header
          _x = _v101.seq
          buff.write(_get_struct_I().pack(_x))
          _v102 = _v101.stamp
          _x = _v102
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v101.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v103 = _v100.pose
          _v104 = _v103.position
          _x = _v104
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v105 = _v103.orientation
          _x = _v105
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v106 = val2.twist
          _v107 = _v106.header
          _x = _v107.seq
          buff.write(_get_struct_I().pack(_x))
          _v108 = _v107.stamp
          _x = _v108
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v107.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v109 = _v106.twist
          _v110 = _v109.linear
          _x = _v110
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v111 = _v109.angular
          _x = _v111
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.lane_id
          buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Lane()
        _v112 = val1.header
        start = end
        end += 4
        (_v112.seq,) = _get_struct_I().unpack(str[start:end])
        _v113 = _v112.stamp
        _x = _v113
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v112.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v112.frame_id = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.lane_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_iBf().unpack(str[start:end])
        val1.lane_change_flag = bool(val1.lane_change_flag)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v114 = val2.pose
          _v115 = _v114.header
          start = end
          end += 4
          (_v115.seq,) = _get_struct_I().unpack(str[start:end])
          _v116 = _v115.stamp
          _x = _v116
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v115.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v115.frame_id = str[start:end]
          _v117 = _v114.pose
          _v118 = _v117.position
          _x = _v118
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v119 = _v117.orientation
          _x = _v119
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v120 = val2.twist
          _v121 = _v120.header
          start = end
          end += 4
          (_v121.seq,) = _get_struct_I().unpack(str[start:end])
          _v122 = _v121.stamp
          _x = _v122
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v121.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v121.frame_id = str[start:end]
          _v123 = _v120.twist
          _v124 = _v123.linear
          _x = _v124
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v125 = _v123.angular
          _x = _v125
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.lane_id,) = _get_struct_I().unpack(str[start:end])
          val1.waypoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trafficlights = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Trafficlight()
          _v126 = val2.header
          start = end
          end += 4
          (_v126.seq,) = _get_struct_I().unpack(str[start:end])
          _v127 = _v126.stamp
          _x = _v127
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v126.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v126.frame_id = str[start:end]
          _x = val2
          start = end
          end += 8
          (_x.id, _x.lanelet_id,) = _get_struct_2i().unpack(str[start:end])
          _v128 = val2.pose
          _v129 = _v128.position
          _x = _v129
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v130 = _v128.orientation
          _x = _v130
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v131 = val2.left_light
          _x = _v131
          start = end
          end += 8
          (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
          _v132 = val2.straight_light
          _x = _v132
          start = end
          end += 8
          (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
          _v133 = val2.right_light
          _x = _v133
          start = end
          end += 8
          (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
          start = end
          end += 1
          (val2.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
          val2.valid_stop_line = bool(val2.valid_stop_line)
          _v134 = val2.stop_line
          _v135 = _v134.position
          _x = _v135
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v136 = _v134.orientation
          _x = _v136
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.trafficlights.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.speedbumps = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v137 = val2.pose
          _v138 = _v137.header
          start = end
          end += 4
          (_v138.seq,) = _get_struct_I().unpack(str[start:end])
          _v139 = _v138.stamp
          _x = _v139
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v138.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v138.frame_id = str[start:end]
          _v140 = _v137.pose
          _v141 = _v140.position
          _x = _v141
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v142 = _v140.orientation
          _x = _v142
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v143 = val2.twist
          _v144 = _v143.header
          start = end
          end += 4
          (_v144.seq,) = _get_struct_I().unpack(str[start:end])
          _v145 = _v144.stamp
          _x = _v145
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v144.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v144.frame_id = str[start:end]
          _v146 = _v143.twist
          _v147 = _v146.linear
          _x = _v147
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v148 = _v146.angular
          _x = _v148
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.lane_id,) = _get_struct_I().unpack(str[start:end])
          val1.speedbumps.append(val2)
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iBf = None
def _get_struct_iBf():
    global _struct_iBf
    if _struct_iBf is None:
        _struct_iBf = struct.Struct("<iBf")
    return _struct_iBf
