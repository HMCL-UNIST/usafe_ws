# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmcl_msgs/VehicleStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hmcl_msgs.msg
import std_msgs.msg

class VehicleStatus(genpy.Message):
  _md5sum = "257eaa74ca2595e01127664962d58d27"
  _type = "hmcl_msgs/VehicleStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
hmcl_msgs/VehicleSteering steering_info
hmcl_msgs/VehicleSCC scc_info
hmcl_msgs/VehicleWheelSpeed wheelspeed
hmcl_msgs/VehicleGear gear_info
hmcl_msgs/VehicleLight light_info
hmcl_msgs/RemoteButton remote_button_info
# auto mode -> 0  off
# auto mode -> 1  on
uint8 auto_mode 
# ems mode -> 0  off
# ems mode -> 1  on
uint8 ems_mode 
float64 x_acceleration
float64 y_acceleration
float64 yaw_rate

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hmcl_msgs/VehicleSteering
Header header
# steering takeover -> off       = 0
# steering takeover -> on      = 1
uint8 takeover
# steering mode -> off       = 0
# steering mode -> on      = 1
uint8 mode
float32 steering_angle
================================================================================
MSG: hmcl_msgs/VehicleSCC
Header header
# sccmode -> off       = 0
# sccmode -> ready       = 1
# sccmode -> on       = 2
uint8 scc_mode
# scc takeover -> off       = 0
# scc takeover -> n      = 1
uint8 scc_takeover
float64 acceleration
================================================================================
MSG: hmcl_msgs/VehicleWheelSpeed
Header header
float64 wheel_speed
float64 fr
float64 fl
float64 rr
float64 rl
================================================================================
MSG: hmcl_msgs/VehicleGear
# Gear -> P       = 1
# Gear -> D       = 2
# Gear -> N       = 3
# Gear -> R       = 4
uint8 gear

================================================================================
MSG: hmcl_msgs/VehicleLight
# 0 off, 1 on 
uint8 left_light
uint8 right_light
uint8 hazard_light
================================================================================
MSG: hmcl_msgs/RemoteButton
# wirelessbutton -> 0 push off, 1 -> push on
uint8 button1
uint8 button2
uint8 button3"""
  __slots__ = ['header','steering_info','scc_info','wheelspeed','gear_info','light_info','remote_button_info','auto_mode','ems_mode','x_acceleration','y_acceleration','yaw_rate']
  _slot_types = ['std_msgs/Header','hmcl_msgs/VehicleSteering','hmcl_msgs/VehicleSCC','hmcl_msgs/VehicleWheelSpeed','hmcl_msgs/VehicleGear','hmcl_msgs/VehicleLight','hmcl_msgs/RemoteButton','uint8','uint8','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steering_info,scc_info,wheelspeed,gear_info,light_info,remote_button_info,auto_mode,ems_mode,x_acceleration,y_acceleration,yaw_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_info is None:
        self.steering_info = hmcl_msgs.msg.VehicleSteering()
      if self.scc_info is None:
        self.scc_info = hmcl_msgs.msg.VehicleSCC()
      if self.wheelspeed is None:
        self.wheelspeed = hmcl_msgs.msg.VehicleWheelSpeed()
      if self.gear_info is None:
        self.gear_info = hmcl_msgs.msg.VehicleGear()
      if self.light_info is None:
        self.light_info = hmcl_msgs.msg.VehicleLight()
      if self.remote_button_info is None:
        self.remote_button_info = hmcl_msgs.msg.RemoteButton()
      if self.auto_mode is None:
        self.auto_mode = 0
      if self.ems_mode is None:
        self.ems_mode = 0
      if self.x_acceleration is None:
        self.x_acceleration = 0.
      if self.y_acceleration is None:
        self.y_acceleration = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.steering_info = hmcl_msgs.msg.VehicleSteering()
      self.scc_info = hmcl_msgs.msg.VehicleSCC()
      self.wheelspeed = hmcl_msgs.msg.VehicleWheelSpeed()
      self.gear_info = hmcl_msgs.msg.VehicleGear()
      self.light_info = hmcl_msgs.msg.VehicleLight()
      self.remote_button_info = hmcl_msgs.msg.RemoteButton()
      self.auto_mode = 0
      self.ems_mode = 0
      self.x_acceleration = 0.
      self.y_acceleration = 0.
      self.yaw_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.steering_info.header.seq, _x.steering_info.header.stamp.secs, _x.steering_info.header.stamp.nsecs))
      _x = self.steering_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bf3I().pack(_x.steering_info.takeover, _x.steering_info.mode, _x.steering_info.steering_angle, _x.scc_info.header.seq, _x.scc_info.header.stamp.secs, _x.scc_info.header.stamp.nsecs))
      _x = self.scc_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bd3I().pack(_x.scc_info.scc_mode, _x.scc_info.scc_takeover, _x.scc_info.acceleration, _x.wheelspeed.header.seq, _x.wheelspeed.header.stamp.secs, _x.wheelspeed.header.stamp.nsecs))
      _x = self.wheelspeed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d9B3d().pack(_x.wheelspeed.wheel_speed, _x.wheelspeed.fr, _x.wheelspeed.fl, _x.wheelspeed.rr, _x.wheelspeed.rl, _x.gear_info.gear, _x.light_info.left_light, _x.light_info.right_light, _x.light_info.hazard_light, _x.remote_button_info.button1, _x.remote_button_info.button2, _x.remote_button_info.button3, _x.auto_mode, _x.ems_mode, _x.x_acceleration, _x.y_acceleration, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_info is None:
        self.steering_info = hmcl_msgs.msg.VehicleSteering()
      if self.scc_info is None:
        self.scc_info = hmcl_msgs.msg.VehicleSCC()
      if self.wheelspeed is None:
        self.wheelspeed = hmcl_msgs.msg.VehicleWheelSpeed()
      if self.gear_info is None:
        self.gear_info = hmcl_msgs.msg.VehicleGear()
      if self.light_info is None:
        self.light_info = hmcl_msgs.msg.VehicleLight()
      if self.remote_button_info is None:
        self.remote_button_info = hmcl_msgs.msg.RemoteButton()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.steering_info.header.seq, _x.steering_info.header.stamp.secs, _x.steering_info.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.steering_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.steering_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.steering_info.takeover, _x.steering_info.mode, _x.steering_info.steering_angle, _x.scc_info.header.seq, _x.scc_info.header.stamp.secs, _x.scc_info.header.stamp.nsecs,) = _get_struct_2Bf3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scc_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scc_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.scc_info.scc_mode, _x.scc_info.scc_takeover, _x.scc_info.acceleration, _x.wheelspeed.header.seq, _x.wheelspeed.header.stamp.secs, _x.wheelspeed.header.stamp.nsecs,) = _get_struct_2Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wheelspeed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.wheelspeed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.wheelspeed.wheel_speed, _x.wheelspeed.fr, _x.wheelspeed.fl, _x.wheelspeed.rr, _x.wheelspeed.rl, _x.gear_info.gear, _x.light_info.left_light, _x.light_info.right_light, _x.light_info.hazard_light, _x.remote_button_info.button1, _x.remote_button_info.button2, _x.remote_button_info.button3, _x.auto_mode, _x.ems_mode, _x.x_acceleration, _x.y_acceleration, _x.yaw_rate,) = _get_struct_5d9B3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.steering_info.header.seq, _x.steering_info.header.stamp.secs, _x.steering_info.header.stamp.nsecs))
      _x = self.steering_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bf3I().pack(_x.steering_info.takeover, _x.steering_info.mode, _x.steering_info.steering_angle, _x.scc_info.header.seq, _x.scc_info.header.stamp.secs, _x.scc_info.header.stamp.nsecs))
      _x = self.scc_info.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Bd3I().pack(_x.scc_info.scc_mode, _x.scc_info.scc_takeover, _x.scc_info.acceleration, _x.wheelspeed.header.seq, _x.wheelspeed.header.stamp.secs, _x.wheelspeed.header.stamp.nsecs))
      _x = self.wheelspeed.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5d9B3d().pack(_x.wheelspeed.wheel_speed, _x.wheelspeed.fr, _x.wheelspeed.fl, _x.wheelspeed.rr, _x.wheelspeed.rl, _x.gear_info.gear, _x.light_info.left_light, _x.light_info.right_light, _x.light_info.hazard_light, _x.remote_button_info.button1, _x.remote_button_info.button2, _x.remote_button_info.button3, _x.auto_mode, _x.ems_mode, _x.x_acceleration, _x.y_acceleration, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steering_info is None:
        self.steering_info = hmcl_msgs.msg.VehicleSteering()
      if self.scc_info is None:
        self.scc_info = hmcl_msgs.msg.VehicleSCC()
      if self.wheelspeed is None:
        self.wheelspeed = hmcl_msgs.msg.VehicleWheelSpeed()
      if self.gear_info is None:
        self.gear_info = hmcl_msgs.msg.VehicleGear()
      if self.light_info is None:
        self.light_info = hmcl_msgs.msg.VehicleLight()
      if self.remote_button_info is None:
        self.remote_button_info = hmcl_msgs.msg.RemoteButton()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.steering_info.header.seq, _x.steering_info.header.stamp.secs, _x.steering_info.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.steering_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.steering_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.steering_info.takeover, _x.steering_info.mode, _x.steering_info.steering_angle, _x.scc_info.header.seq, _x.scc_info.header.stamp.secs, _x.scc_info.header.stamp.nsecs,) = _get_struct_2Bf3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.scc_info.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scc_info.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.scc_info.scc_mode, _x.scc_info.scc_takeover, _x.scc_info.acceleration, _x.wheelspeed.header.seq, _x.wheelspeed.header.stamp.secs, _x.wheelspeed.header.stamp.nsecs,) = _get_struct_2Bd3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wheelspeed.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.wheelspeed.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 73
      (_x.wheelspeed.wheel_speed, _x.wheelspeed.fr, _x.wheelspeed.fl, _x.wheelspeed.rr, _x.wheelspeed.rl, _x.gear_info.gear, _x.light_info.left_light, _x.light_info.right_light, _x.light_info.hazard_light, _x.remote_button_info.button1, _x.remote_button_info.button2, _x.remote_button_info.button3, _x.auto_mode, _x.ems_mode, _x.x_acceleration, _x.y_acceleration, _x.yaw_rate,) = _get_struct_5d9B3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bd3I = None
def _get_struct_2Bd3I():
    global _struct_2Bd3I
    if _struct_2Bd3I is None:
        _struct_2Bd3I = struct.Struct("<2Bd3I")
    return _struct_2Bd3I
_struct_2Bf3I = None
def _get_struct_2Bf3I():
    global _struct_2Bf3I
    if _struct_2Bf3I is None:
        _struct_2Bf3I = struct.Struct("<2Bf3I")
    return _struct_2Bf3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5d9B3d = None
def _get_struct_5d9B3d():
    global _struct_5d9B3d
    if _struct_5d9B3d is None:
        _struct_5d9B3d = struct.Struct("<5d9B3d")
    return _struct_5d9B3d
