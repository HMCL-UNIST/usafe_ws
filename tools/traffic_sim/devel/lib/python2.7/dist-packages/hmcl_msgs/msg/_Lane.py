# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmcl_msgs/Lane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hmcl_msgs.msg
import std_msgs.msg

class Lane(genpy.Message):
  _md5sum = "923d2c4fa02093b723f235ff09a4673f"
  _type = "hmcl_msgs/Lane"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 lane_id
bool lane_change_flag
float32 speed_limit 
Waypoint[] waypoints
Trafficlight[] trafficlights
Waypoint[] speedbumps
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hmcl_msgs/Waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
uint32 lane_id
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: hmcl_msgs/Trafficlight
Header header
int32 id
int32 lanelet_id
geometry_msgs/Pose pose
TrafficlightBulb left_light
TrafficlightBulb straight_light
TrafficlightBulb right_light
bool valid_stop_line
geometry_msgs/Pose stop_line
================================================================================
MSG: hmcl_msgs/TrafficlightBulb
int32 id
int32 light_status # 0 red, 1 green, 2 yellow """
  __slots__ = ['header','lane_id','lane_change_flag','speed_limit','waypoints','trafficlights','speedbumps']
  _slot_types = ['std_msgs/Header','int32','bool','float32','hmcl_msgs/Waypoint[]','hmcl_msgs/Trafficlight[]','hmcl_msgs/Waypoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lane_id,lane_change_flag,speed_limit,waypoints,trafficlights,speedbumps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_id is None:
        self.lane_id = 0
      if self.lane_change_flag is None:
        self.lane_change_flag = False
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.waypoints is None:
        self.waypoints = []
      if self.trafficlights is None:
        self.trafficlights = []
      if self.speedbumps is None:
        self.speedbumps = []
    else:
      self.header = std_msgs.msg.Header()
      self.lane_id = 0
      self.lane_change_flag = False
      self.speed_limit = 0.
      self.waypoints = []
      self.trafficlights = []
      self.speedbumps = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iBf().pack(_x.lane_id, _x.lane_change_flag, _x.speed_limit))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v1 = val1.pose
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.twist
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.twist
        _v11 = _v10.linear
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.angular
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.lane_id
        buff.write(_get_struct_I().pack(_x))
      length = len(self.trafficlights)
      buff.write(_struct_I.pack(length))
      for val1 in self.trafficlights:
        _v13 = val1.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.id, _x.lanelet_id))
        _v15 = val1.pose
        _v16 = _v15.position
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v17 = _v15.orientation
        _x = _v17
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v18 = val1.left_light
        _x = _v18
        buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
        _v19 = val1.straight_light
        _x = _v19
        buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
        _v20 = val1.right_light
        _x = _v20
        buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
        _x = val1.valid_stop_line
        buff.write(_get_struct_B().pack(_x))
        _v21 = val1.stop_line
        _v22 = _v21.position
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v23 = _v21.orientation
        _x = _v23
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.speedbumps)
      buff.write(_struct_I.pack(length))
      for val1 in self.speedbumps:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v24 = val1.pose
        _v25 = _v24.header
        _x = _v25.seq
        buff.write(_get_struct_I().pack(_x))
        _v26 = _v25.stamp
        _x = _v26
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v25.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v27 = _v24.pose
        _v28 = _v27.position
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = _v27.orientation
        _x = _v29
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v30 = val1.twist
        _v31 = _v30.header
        _x = _v31.seq
        buff.write(_get_struct_I().pack(_x))
        _v32 = _v31.stamp
        _x = _v32
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v31.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v33 = _v30.twist
        _v34 = _v33.linear
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = _v33.angular
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.lane_id
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = None
      if self.trafficlights is None:
        self.trafficlights = None
      if self.speedbumps is None:
        self.speedbumps = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.lane_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_iBf().unpack(str[start:end])
      self.lane_change_flag = bool(self.lane_change_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v36 = val1.pose
        _v37 = _v36.header
        start = end
        end += 4
        (_v37.seq,) = _get_struct_I().unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.frame_id = str[start:end]
        _v39 = _v36.pose
        _v40 = _v39.position
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v41 = _v39.orientation
        _x = _v41
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v42 = val1.twist
        _v43 = _v42.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        _v45 = _v42.twist
        _v46 = _v45.linear
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = _v45.angular
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.lane_id,) = _get_struct_I().unpack(str[start:end])
        self.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trafficlights = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Trafficlight()
        _v48 = val1.header
        start = end
        end += 4
        (_v48.seq,) = _get_struct_I().unpack(str[start:end])
        _v49 = _v48.stamp
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v48.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v48.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.lanelet_id,) = _get_struct_2i().unpack(str[start:end])
        _v50 = val1.pose
        _v51 = _v50.position
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v52 = _v50.orientation
        _x = _v52
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v53 = val1.left_light
        _x = _v53
        start = end
        end += 8
        (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
        _v54 = val1.straight_light
        _x = _v54
        start = end
        end += 8
        (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
        _v55 = val1.right_light
        _x = _v55
        start = end
        end += 8
        (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
        val1.valid_stop_line = bool(val1.valid_stop_line)
        _v56 = val1.stop_line
        _v57 = _v56.position
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = _v56.orientation
        _x = _v58
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.trafficlights.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speedbumps = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v59 = val1.pose
        _v60 = _v59.header
        start = end
        end += 4
        (_v60.seq,) = _get_struct_I().unpack(str[start:end])
        _v61 = _v60.stamp
        _x = _v61
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v60.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v60.frame_id = str[start:end]
        _v62 = _v59.pose
        _v63 = _v62.position
        _x = _v63
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v64 = _v62.orientation
        _x = _v64
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v65 = val1.twist
        _v66 = _v65.header
        start = end
        end += 4
        (_v66.seq,) = _get_struct_I().unpack(str[start:end])
        _v67 = _v66.stamp
        _x = _v67
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v66.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v66.frame_id = str[start:end]
        _v68 = _v65.twist
        _v69 = _v68.linear
        _x = _v69
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v70 = _v68.angular
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.lane_id,) = _get_struct_I().unpack(str[start:end])
        self.speedbumps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_iBf().pack(_x.lane_id, _x.lane_change_flag, _x.speed_limit))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v71 = val1.pose
        _v72 = _v71.header
        _x = _v72.seq
        buff.write(_get_struct_I().pack(_x))
        _v73 = _v72.stamp
        _x = _v73
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v72.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v74 = _v71.pose
        _v75 = _v74.position
        _x = _v75
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v76 = _v74.orientation
        _x = _v76
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v77 = val1.twist
        _v78 = _v77.header
        _x = _v78.seq
        buff.write(_get_struct_I().pack(_x))
        _v79 = _v78.stamp
        _x = _v79
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v78.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v80 = _v77.twist
        _v81 = _v80.linear
        _x = _v81
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v82 = _v80.angular
        _x = _v82
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.lane_id
        buff.write(_get_struct_I().pack(_x))
      length = len(self.trafficlights)
      buff.write(_struct_I.pack(length))
      for val1 in self.trafficlights:
        _v83 = val1.header
        _x = _v83.seq
        buff.write(_get_struct_I().pack(_x))
        _v84 = _v83.stamp
        _x = _v84
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v83.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2i().pack(_x.id, _x.lanelet_id))
        _v85 = val1.pose
        _v86 = _v85.position
        _x = _v86
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v87 = _v85.orientation
        _x = _v87
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v88 = val1.left_light
        _x = _v88
        buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
        _v89 = val1.straight_light
        _x = _v89
        buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
        _v90 = val1.right_light
        _x = _v90
        buff.write(_get_struct_2i().pack(_x.id, _x.light_status))
        _x = val1.valid_stop_line
        buff.write(_get_struct_B().pack(_x))
        _v91 = val1.stop_line
        _v92 = _v91.position
        _x = _v92
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v93 = _v91.orientation
        _x = _v93
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.speedbumps)
      buff.write(_struct_I.pack(length))
      for val1 in self.speedbumps:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v94 = val1.pose
        _v95 = _v94.header
        _x = _v95.seq
        buff.write(_get_struct_I().pack(_x))
        _v96 = _v95.stamp
        _x = _v96
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v95.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v97 = _v94.pose
        _v98 = _v97.position
        _x = _v98
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v99 = _v97.orientation
        _x = _v99
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v100 = val1.twist
        _v101 = _v100.header
        _x = _v101.seq
        buff.write(_get_struct_I().pack(_x))
        _v102 = _v101.stamp
        _x = _v102
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v101.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v103 = _v100.twist
        _v104 = _v103.linear
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v105 = _v103.angular
        _x = _v105
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.lane_id
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = None
      if self.trafficlights is None:
        self.trafficlights = None
      if self.speedbumps is None:
        self.speedbumps = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.lane_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_iBf().unpack(str[start:end])
      self.lane_change_flag = bool(self.lane_change_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v106 = val1.pose
        _v107 = _v106.header
        start = end
        end += 4
        (_v107.seq,) = _get_struct_I().unpack(str[start:end])
        _v108 = _v107.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v107.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v107.frame_id = str[start:end]
        _v109 = _v106.pose
        _v110 = _v109.position
        _x = _v110
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v111 = _v109.orientation
        _x = _v111
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v112 = val1.twist
        _v113 = _v112.header
        start = end
        end += 4
        (_v113.seq,) = _get_struct_I().unpack(str[start:end])
        _v114 = _v113.stamp
        _x = _v114
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v113.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v113.frame_id = str[start:end]
        _v115 = _v112.twist
        _v116 = _v115.linear
        _x = _v116
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v117 = _v115.angular
        _x = _v117
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.lane_id,) = _get_struct_I().unpack(str[start:end])
        self.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trafficlights = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Trafficlight()
        _v118 = val1.header
        start = end
        end += 4
        (_v118.seq,) = _get_struct_I().unpack(str[start:end])
        _v119 = _v118.stamp
        _x = _v119
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v118.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v118.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.lanelet_id,) = _get_struct_2i().unpack(str[start:end])
        _v120 = val1.pose
        _v121 = _v120.position
        _x = _v121
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v122 = _v120.orientation
        _x = _v122
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v123 = val1.left_light
        _x = _v123
        start = end
        end += 8
        (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
        _v124 = val1.straight_light
        _x = _v124
        start = end
        end += 8
        (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
        _v125 = val1.right_light
        _x = _v125
        start = end
        end += 8
        (_x.id, _x.light_status,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
        val1.valid_stop_line = bool(val1.valid_stop_line)
        _v126 = val1.stop_line
        _v127 = _v126.position
        _x = _v127
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v128 = _v126.orientation
        _x = _v128
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.trafficlights.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speedbumps = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v129 = val1.pose
        _v130 = _v129.header
        start = end
        end += 4
        (_v130.seq,) = _get_struct_I().unpack(str[start:end])
        _v131 = _v130.stamp
        _x = _v131
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v130.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v130.frame_id = str[start:end]
        _v132 = _v129.pose
        _v133 = _v132.position
        _x = _v133
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v134 = _v132.orientation
        _x = _v134
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v135 = val1.twist
        _v136 = _v135.header
        start = end
        end += 4
        (_v136.seq,) = _get_struct_I().unpack(str[start:end])
        _v137 = _v136.stamp
        _x = _v137
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v136.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v136.frame_id = str[start:end]
        _v138 = _v135.twist
        _v139 = _v138.linear
        _x = _v139
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v140 = _v138.angular
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.lane_id,) = _get_struct_I().unpack(str[start:end])
        self.speedbumps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_iBf = None
def _get_struct_iBf():
    global _struct_iBf
    if _struct_iBf is None:
        _struct_iBf = struct.Struct("<iBf")
    return _struct_iBf
