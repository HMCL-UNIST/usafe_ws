# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FilterAidingMeasurementSummaryIndicator(genpy.Message):
  _md5sum = "4e3131125b51ac75dceed1517c488713"
  _type = "microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool enabled
bool used
bool residual_high_warning
bool sample_time_warning
bool configuration_error
bool max_num_meas_exceeded"""
  __slots__ = ['enabled','used','residual_high_warning','sample_time_warning','configuration_error','max_num_meas_exceeded']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       enabled,used,residual_high_warning,sample_time_warning,configuration_error,max_num_meas_exceeded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterAidingMeasurementSummaryIndicator, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.enabled is None:
        self.enabled = False
      if self.used is None:
        self.used = False
      if self.residual_high_warning is None:
        self.residual_high_warning = False
      if self.sample_time_warning is None:
        self.sample_time_warning = False
      if self.configuration_error is None:
        self.configuration_error = False
      if self.max_num_meas_exceeded is None:
        self.max_num_meas_exceeded = False
    else:
      self.enabled = False
      self.used = False
      self.residual_high_warning = False
      self.sample_time_warning = False
      self.configuration_error = False
      self.max_num_meas_exceeded = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.enabled, _x.used, _x.residual_high_warning, _x.sample_time_warning, _x.configuration_error, _x.max_num_meas_exceeded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.enabled, _x.used, _x.residual_high_warning, _x.sample_time_warning, _x.configuration_error, _x.max_num_meas_exceeded,) = _get_struct_6B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.used = bool(self.used)
      self.residual_high_warning = bool(self.residual_high_warning)
      self.sample_time_warning = bool(self.sample_time_warning)
      self.configuration_error = bool(self.configuration_error)
      self.max_num_meas_exceeded = bool(self.max_num_meas_exceeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.enabled, _x.used, _x.residual_high_warning, _x.sample_time_warning, _x.configuration_error, _x.max_num_meas_exceeded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.enabled, _x.used, _x.residual_high_warning, _x.sample_time_warning, _x.configuration_error, _x.max_num_meas_exceeded,) = _get_struct_6B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.used = bool(self.used)
      self.residual_high_warning = bool(self.residual_high_warning)
      self.sample_time_warning = bool(self.sample_time_warning)
      self.configuration_error = bool(self.configuration_error)
      self.max_num_meas_exceeded = bool(self.max_num_meas_exceeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
