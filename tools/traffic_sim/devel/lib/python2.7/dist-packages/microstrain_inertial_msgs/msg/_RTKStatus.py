# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/RTKStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RTKStatus(genpy.Message):
  _md5sum = "da5543a2118eca78b75d2cf97686be1d"
  _type = "microstrain_inertial_msgs/RTKStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Possible values for dongle_modem_state
uint8   MODEM_STATE_OFF = 0
uint8   MODEM_STATE_NO_NETWORK = 1
uint8   MODEM_STATE_NETWORK_CONNECTED = 2
uint8   MODEM_STATE_CONFIGURING_DATA_CONTEXT = 3
uint8   MODEM_STATE_ACTIVATING_DATA_CONTEXT = 4
uint8   MODEM_STATE_CONFIGURING_SOCKET = 5
uint8   MODEM_STATE_WAITING_ON_SERVER_HANDSHAKE = 6
uint8   MODEM_STATE_CONNECTED_AND_IDLE = 7
uint8   MODEM_STATE_CONNECTED_AND_STREAMING = 8

# Possible values for dongle_connection_type
uint8   CONNECTION_TYPE_NO_CONNECTION = 0
uint8   CONNECTION_TYPE_CONNECTION_2G = 2
uint8   CONNECTION_TYPE_CONNECTION_3G = 3
uint8   CONNECTION_TYPE_CONNECTION_4G = 4
uint8   CONNECTION_TYPE_CONNECTION_5G = 5

float64 gps_tow
uint16  gps_week
uint16  epoch_status

uint8   dongle_version
uint8   dongle_modem_state      # Use in conjunction with MODEM_STATE_* values
uint8   dongle_connection_type  # Use in conjunction with CONNECTION_TYPE_* values
int8    dongle_rssi             # RSSI values are negative
uint8   dongle_signal_quality
uint8   dongle_tower_change_indicator
bool    dongle_nmea_timeout
bool    dongle_server_timeout
bool    dongle_rtcm_timeout
bool    dongle_out_of_range
bool    dongle_corrections_unavailable

float32 gps_correction_latency
float32 glonass_correction_latency
float32 galileo_correction_latency
float32 beidou_correction_latency


uint32  raw_status_flags        # Raw status flags value"""
  # Pseudo-constants
  MODEM_STATE_OFF = 0
  MODEM_STATE_NO_NETWORK = 1
  MODEM_STATE_NETWORK_CONNECTED = 2
  MODEM_STATE_CONFIGURING_DATA_CONTEXT = 3
  MODEM_STATE_ACTIVATING_DATA_CONTEXT = 4
  MODEM_STATE_CONFIGURING_SOCKET = 5
  MODEM_STATE_WAITING_ON_SERVER_HANDSHAKE = 6
  MODEM_STATE_CONNECTED_AND_IDLE = 7
  MODEM_STATE_CONNECTED_AND_STREAMING = 8
  CONNECTION_TYPE_NO_CONNECTION = 0
  CONNECTION_TYPE_CONNECTION_2G = 2
  CONNECTION_TYPE_CONNECTION_3G = 3
  CONNECTION_TYPE_CONNECTION_4G = 4
  CONNECTION_TYPE_CONNECTION_5G = 5

  __slots__ = ['gps_tow','gps_week','epoch_status','dongle_version','dongle_modem_state','dongle_connection_type','dongle_rssi','dongle_signal_quality','dongle_tower_change_indicator','dongle_nmea_timeout','dongle_server_timeout','dongle_rtcm_timeout','dongle_out_of_range','dongle_corrections_unavailable','gps_correction_latency','glonass_correction_latency','galileo_correction_latency','beidou_correction_latency','raw_status_flags']
  _slot_types = ['float64','uint16','uint16','uint8','uint8','uint8','int8','uint8','uint8','bool','bool','bool','bool','bool','float32','float32','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_tow,gps_week,epoch_status,dongle_version,dongle_modem_state,dongle_connection_type,dongle_rssi,dongle_signal_quality,dongle_tower_change_indicator,dongle_nmea_timeout,dongle_server_timeout,dongle_rtcm_timeout,dongle_out_of_range,dongle_corrections_unavailable,gps_correction_latency,glonass_correction_latency,galileo_correction_latency,beidou_correction_latency,raw_status_flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RTKStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_tow is None:
        self.gps_tow = 0.
      if self.gps_week is None:
        self.gps_week = 0
      if self.epoch_status is None:
        self.epoch_status = 0
      if self.dongle_version is None:
        self.dongle_version = 0
      if self.dongle_modem_state is None:
        self.dongle_modem_state = 0
      if self.dongle_connection_type is None:
        self.dongle_connection_type = 0
      if self.dongle_rssi is None:
        self.dongle_rssi = 0
      if self.dongle_signal_quality is None:
        self.dongle_signal_quality = 0
      if self.dongle_tower_change_indicator is None:
        self.dongle_tower_change_indicator = 0
      if self.dongle_nmea_timeout is None:
        self.dongle_nmea_timeout = False
      if self.dongle_server_timeout is None:
        self.dongle_server_timeout = False
      if self.dongle_rtcm_timeout is None:
        self.dongle_rtcm_timeout = False
      if self.dongle_out_of_range is None:
        self.dongle_out_of_range = False
      if self.dongle_corrections_unavailable is None:
        self.dongle_corrections_unavailable = False
      if self.gps_correction_latency is None:
        self.gps_correction_latency = 0.
      if self.glonass_correction_latency is None:
        self.glonass_correction_latency = 0.
      if self.galileo_correction_latency is None:
        self.galileo_correction_latency = 0.
      if self.beidou_correction_latency is None:
        self.beidou_correction_latency = 0.
      if self.raw_status_flags is None:
        self.raw_status_flags = 0
    else:
      self.gps_tow = 0.
      self.gps_week = 0
      self.epoch_status = 0
      self.dongle_version = 0
      self.dongle_modem_state = 0
      self.dongle_connection_type = 0
      self.dongle_rssi = 0
      self.dongle_signal_quality = 0
      self.dongle_tower_change_indicator = 0
      self.dongle_nmea_timeout = False
      self.dongle_server_timeout = False
      self.dongle_rtcm_timeout = False
      self.dongle_out_of_range = False
      self.dongle_corrections_unavailable = False
      self.gps_correction_latency = 0.
      self.glonass_correction_latency = 0.
      self.galileo_correction_latency = 0.
      self.beidou_correction_latency = 0.
      self.raw_status_flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d2H3Bb7B4fI().pack(_x.gps_tow, _x.gps_week, _x.epoch_status, _x.dongle_version, _x.dongle_modem_state, _x.dongle_connection_type, _x.dongle_rssi, _x.dongle_signal_quality, _x.dongle_tower_change_indicator, _x.dongle_nmea_timeout, _x.dongle_server_timeout, _x.dongle_rtcm_timeout, _x.dongle_out_of_range, _x.dongle_corrections_unavailable, _x.gps_correction_latency, _x.glonass_correction_latency, _x.galileo_correction_latency, _x.beidou_correction_latency, _x.raw_status_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.gps_tow, _x.gps_week, _x.epoch_status, _x.dongle_version, _x.dongle_modem_state, _x.dongle_connection_type, _x.dongle_rssi, _x.dongle_signal_quality, _x.dongle_tower_change_indicator, _x.dongle_nmea_timeout, _x.dongle_server_timeout, _x.dongle_rtcm_timeout, _x.dongle_out_of_range, _x.dongle_corrections_unavailable, _x.gps_correction_latency, _x.glonass_correction_latency, _x.galileo_correction_latency, _x.beidou_correction_latency, _x.raw_status_flags,) = _get_struct_d2H3Bb7B4fI().unpack(str[start:end])
      self.dongle_nmea_timeout = bool(self.dongle_nmea_timeout)
      self.dongle_server_timeout = bool(self.dongle_server_timeout)
      self.dongle_rtcm_timeout = bool(self.dongle_rtcm_timeout)
      self.dongle_out_of_range = bool(self.dongle_out_of_range)
      self.dongle_corrections_unavailable = bool(self.dongle_corrections_unavailable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d2H3Bb7B4fI().pack(_x.gps_tow, _x.gps_week, _x.epoch_status, _x.dongle_version, _x.dongle_modem_state, _x.dongle_connection_type, _x.dongle_rssi, _x.dongle_signal_quality, _x.dongle_tower_change_indicator, _x.dongle_nmea_timeout, _x.dongle_server_timeout, _x.dongle_rtcm_timeout, _x.dongle_out_of_range, _x.dongle_corrections_unavailable, _x.gps_correction_latency, _x.glonass_correction_latency, _x.galileo_correction_latency, _x.beidou_correction_latency, _x.raw_status_flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.gps_tow, _x.gps_week, _x.epoch_status, _x.dongle_version, _x.dongle_modem_state, _x.dongle_connection_type, _x.dongle_rssi, _x.dongle_signal_quality, _x.dongle_tower_change_indicator, _x.dongle_nmea_timeout, _x.dongle_server_timeout, _x.dongle_rtcm_timeout, _x.dongle_out_of_range, _x.dongle_corrections_unavailable, _x.gps_correction_latency, _x.glonass_correction_latency, _x.galileo_correction_latency, _x.beidou_correction_latency, _x.raw_status_flags,) = _get_struct_d2H3Bb7B4fI().unpack(str[start:end])
      self.dongle_nmea_timeout = bool(self.dongle_nmea_timeout)
      self.dongle_server_timeout = bool(self.dongle_server_timeout)
      self.dongle_rtcm_timeout = bool(self.dongle_rtcm_timeout)
      self.dongle_out_of_range = bool(self.dongle_out_of_range)
      self.dongle_corrections_unavailable = bool(self.dongle_corrections_unavailable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d2H3Bb7B4fI = None
def _get_struct_d2H3Bb7B4fI():
    global _struct_d2H3Bb7B4fI
    if _struct_d2H3Bb7B4fI is None:
        _struct_d2H3Bb7B4fI = struct.Struct("<d2H3Bb7B4fI")
    return _struct_d2H3Bb7B4fI
