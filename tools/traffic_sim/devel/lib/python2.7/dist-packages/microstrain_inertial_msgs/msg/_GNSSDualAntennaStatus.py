# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/GNSSDualAntennaStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GNSSDualAntennaStatus(genpy.Message):
  _md5sum = "efecf4f9bdf572f04f6f06ccc9c1095a"
  _type = "microstrain_inertial_msgs/GNSSDualAntennaStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 gps_tow
float32 heading
float32 heading_uncertainty
uint8   fix_type
uint8   rcv_1_valid
uint8   rcv_2_valid
uint8   antenna_offsets_valid"""
  __slots__ = ['gps_tow','heading','heading_uncertainty','fix_type','rcv_1_valid','rcv_2_valid','antenna_offsets_valid']
  _slot_types = ['float32','float32','float32','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_tow,heading,heading_uncertainty,fix_type,rcv_1_valid,rcv_2_valid,antenna_offsets_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GNSSDualAntennaStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_tow is None:
        self.gps_tow = 0.
      if self.heading is None:
        self.heading = 0.
      if self.heading_uncertainty is None:
        self.heading_uncertainty = 0.
      if self.fix_type is None:
        self.fix_type = 0
      if self.rcv_1_valid is None:
        self.rcv_1_valid = 0
      if self.rcv_2_valid is None:
        self.rcv_2_valid = 0
      if self.antenna_offsets_valid is None:
        self.antenna_offsets_valid = 0
    else:
      self.gps_tow = 0.
      self.heading = 0.
      self.heading_uncertainty = 0.
      self.fix_type = 0
      self.rcv_1_valid = 0
      self.rcv_2_valid = 0
      self.antenna_offsets_valid = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f4B().pack(_x.gps_tow, _x.heading, _x.heading_uncertainty, _x.fix_type, _x.rcv_1_valid, _x.rcv_2_valid, _x.antenna_offsets_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.gps_tow, _x.heading, _x.heading_uncertainty, _x.fix_type, _x.rcv_1_valid, _x.rcv_2_valid, _x.antenna_offsets_valid,) = _get_struct_3f4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f4B().pack(_x.gps_tow, _x.heading, _x.heading_uncertainty, _x.fix_type, _x.rcv_1_valid, _x.rcv_2_valid, _x.antenna_offsets_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.gps_tow, _x.heading, _x.heading_uncertainty, _x.fix_type, _x.rcv_1_valid, _x.rcv_2_valid, _x.antenna_offsets_valid,) = _get_struct_3f4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f4B = None
def _get_struct_3f4B():
    global _struct_3f4B
    if _struct_3f4B is None:
        _struct_3f4B = struct.Struct("<3f4B")
    return _struct_3f4B
