# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/Status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Status(genpy.Message):
  _md5sum = "b19b8bec6f96c609664c27dbc51ddf60"
  _type = "microstrain_inertial_msgs/Status"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 device_model
uint8  status_selector

uint32 status_flags

uint16 system_state
uint32 system_timer_ms

uint8 gps_power_on

uint32 num_gps_pps_triggers
uint32 last_gps_pps_trigger_ms

uint8 imu_stream_enabled
uint8 gps_stream_enabled
uint8 filter_stream_enabled

uint32 imu_dropped_packets
uint32 gps_dropped_packets
uint32 filter_dropped_packets

uint32 com1_port_bytes_written
uint32 com1_port_bytes_read
uint32 com1_port_write_overruns
uint32 com1_port_read_overruns

uint32 imu_parser_errors
uint32 imu_message_count
uint32 imu_last_message_ms

uint32 gps_parser_errors
uint32 gps_message_count
uint32 gps_last_message_ms
"""
  __slots__ = ['device_model','status_selector','status_flags','system_state','system_timer_ms','gps_power_on','num_gps_pps_triggers','last_gps_pps_trigger_ms','imu_stream_enabled','gps_stream_enabled','filter_stream_enabled','imu_dropped_packets','gps_dropped_packets','filter_dropped_packets','com1_port_bytes_written','com1_port_bytes_read','com1_port_write_overruns','com1_port_read_overruns','imu_parser_errors','imu_message_count','imu_last_message_ms','gps_parser_errors','gps_message_count','gps_last_message_ms']
  _slot_types = ['uint16','uint8','uint32','uint16','uint32','uint8','uint32','uint32','uint8','uint8','uint8','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       device_model,status_selector,status_flags,system_state,system_timer_ms,gps_power_on,num_gps_pps_triggers,last_gps_pps_trigger_ms,imu_stream_enabled,gps_stream_enabled,filter_stream_enabled,imu_dropped_packets,gps_dropped_packets,filter_dropped_packets,com1_port_bytes_written,com1_port_bytes_read,com1_port_write_overruns,com1_port_read_overruns,imu_parser_errors,imu_message_count,imu_last_message_ms,gps_parser_errors,gps_message_count,gps_last_message_ms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.device_model is None:
        self.device_model = 0
      if self.status_selector is None:
        self.status_selector = 0
      if self.status_flags is None:
        self.status_flags = 0
      if self.system_state is None:
        self.system_state = 0
      if self.system_timer_ms is None:
        self.system_timer_ms = 0
      if self.gps_power_on is None:
        self.gps_power_on = 0
      if self.num_gps_pps_triggers is None:
        self.num_gps_pps_triggers = 0
      if self.last_gps_pps_trigger_ms is None:
        self.last_gps_pps_trigger_ms = 0
      if self.imu_stream_enabled is None:
        self.imu_stream_enabled = 0
      if self.gps_stream_enabled is None:
        self.gps_stream_enabled = 0
      if self.filter_stream_enabled is None:
        self.filter_stream_enabled = 0
      if self.imu_dropped_packets is None:
        self.imu_dropped_packets = 0
      if self.gps_dropped_packets is None:
        self.gps_dropped_packets = 0
      if self.filter_dropped_packets is None:
        self.filter_dropped_packets = 0
      if self.com1_port_bytes_written is None:
        self.com1_port_bytes_written = 0
      if self.com1_port_bytes_read is None:
        self.com1_port_bytes_read = 0
      if self.com1_port_write_overruns is None:
        self.com1_port_write_overruns = 0
      if self.com1_port_read_overruns is None:
        self.com1_port_read_overruns = 0
      if self.imu_parser_errors is None:
        self.imu_parser_errors = 0
      if self.imu_message_count is None:
        self.imu_message_count = 0
      if self.imu_last_message_ms is None:
        self.imu_last_message_ms = 0
      if self.gps_parser_errors is None:
        self.gps_parser_errors = 0
      if self.gps_message_count is None:
        self.gps_message_count = 0
      if self.gps_last_message_ms is None:
        self.gps_last_message_ms = 0
    else:
      self.device_model = 0
      self.status_selector = 0
      self.status_flags = 0
      self.system_state = 0
      self.system_timer_ms = 0
      self.gps_power_on = 0
      self.num_gps_pps_triggers = 0
      self.last_gps_pps_trigger_ms = 0
      self.imu_stream_enabled = 0
      self.gps_stream_enabled = 0
      self.filter_stream_enabled = 0
      self.imu_dropped_packets = 0
      self.gps_dropped_packets = 0
      self.filter_dropped_packets = 0
      self.com1_port_bytes_written = 0
      self.com1_port_bytes_read = 0
      self.com1_port_write_overruns = 0
      self.com1_port_read_overruns = 0
      self.imu_parser_errors = 0
      self.imu_message_count = 0
      self.imu_last_message_ms = 0
      self.gps_parser_errors = 0
      self.gps_message_count = 0
      self.gps_last_message_ms = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBIHIB2I3B13I().pack(_x.device_model, _x.status_selector, _x.status_flags, _x.system_state, _x.system_timer_ms, _x.gps_power_on, _x.num_gps_pps_triggers, _x.last_gps_pps_trigger_ms, _x.imu_stream_enabled, _x.gps_stream_enabled, _x.filter_stream_enabled, _x.imu_dropped_packets, _x.gps_dropped_packets, _x.filter_dropped_packets, _x.com1_port_bytes_written, _x.com1_port_bytes_read, _x.com1_port_write_overruns, _x.com1_port_read_overruns, _x.imu_parser_errors, _x.imu_message_count, _x.imu_last_message_ms, _x.gps_parser_errors, _x.gps_message_count, _x.gps_last_message_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 77
      (_x.device_model, _x.status_selector, _x.status_flags, _x.system_state, _x.system_timer_ms, _x.gps_power_on, _x.num_gps_pps_triggers, _x.last_gps_pps_trigger_ms, _x.imu_stream_enabled, _x.gps_stream_enabled, _x.filter_stream_enabled, _x.imu_dropped_packets, _x.gps_dropped_packets, _x.filter_dropped_packets, _x.com1_port_bytes_written, _x.com1_port_bytes_read, _x.com1_port_write_overruns, _x.com1_port_read_overruns, _x.imu_parser_errors, _x.imu_message_count, _x.imu_last_message_ms, _x.gps_parser_errors, _x.gps_message_count, _x.gps_last_message_ms,) = _get_struct_HBIHIB2I3B13I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBIHIB2I3B13I().pack(_x.device_model, _x.status_selector, _x.status_flags, _x.system_state, _x.system_timer_ms, _x.gps_power_on, _x.num_gps_pps_triggers, _x.last_gps_pps_trigger_ms, _x.imu_stream_enabled, _x.gps_stream_enabled, _x.filter_stream_enabled, _x.imu_dropped_packets, _x.gps_dropped_packets, _x.filter_dropped_packets, _x.com1_port_bytes_written, _x.com1_port_bytes_read, _x.com1_port_write_overruns, _x.com1_port_read_overruns, _x.imu_parser_errors, _x.imu_message_count, _x.imu_last_message_ms, _x.gps_parser_errors, _x.gps_message_count, _x.gps_last_message_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 77
      (_x.device_model, _x.status_selector, _x.status_flags, _x.system_state, _x.system_timer_ms, _x.gps_power_on, _x.num_gps_pps_triggers, _x.last_gps_pps_trigger_ms, _x.imu_stream_enabled, _x.gps_stream_enabled, _x.filter_stream_enabled, _x.imu_dropped_packets, _x.gps_dropped_packets, _x.filter_dropped_packets, _x.com1_port_bytes_written, _x.com1_port_bytes_read, _x.com1_port_write_overruns, _x.com1_port_read_overruns, _x.imu_parser_errors, _x.imu_message_count, _x.imu_last_message_ms, _x.gps_parser_errors, _x.gps_message_count, _x.gps_last_message_ms,) = _get_struct_HBIHIB2I3B13I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HBIHIB2I3B13I = None
def _get_struct_HBIHIB2I3B13I():
    global _struct_HBIHIB2I3B13I
    if _struct_HBIHIB2I3B13I is None:
        _struct_HBIHIB2I3B13I = struct.Struct("<HBIHIB2I3B13I")
    return _struct_HBIHIB2I3B13I
