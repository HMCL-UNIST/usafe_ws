# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/FilterAidingMeasurementSummary.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import microstrain_inertial_msgs.msg

class FilterAidingMeasurementSummary(genpy.Message):
  _md5sum = "150119d26260add7097bcac810af3fdb"
  _type = "microstrain_inertial_msgs/FilterAidingMeasurementSummary"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 gps_tow
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator gnss1
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator gnss2
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator dual_antenna
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator heading
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator pressure
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator magnetometer
microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator speed
================================================================================
MSG: microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator
bool enabled
bool used
bool residual_high_warning
bool sample_time_warning
bool configuration_error
bool max_num_meas_exceeded"""
  __slots__ = ['gps_tow','gnss1','gnss2','dual_antenna','heading','pressure','magnetometer','speed']
  _slot_types = ['float64','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator','microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_tow,gnss1,gnss2,dual_antenna,heading,pressure,magnetometer,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FilterAidingMeasurementSummary, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_tow is None:
        self.gps_tow = 0.
      if self.gnss1 is None:
        self.gnss1 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.gnss2 is None:
        self.gnss2 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.dual_antenna is None:
        self.dual_antenna = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.heading is None:
        self.heading = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.pressure is None:
        self.pressure = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.magnetometer is None:
        self.magnetometer = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.speed is None:
        self.speed = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
    else:
      self.gps_tow = 0.
      self.gnss1 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      self.gnss2 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      self.dual_antenna = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      self.heading = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      self.pressure = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      self.magnetometer = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      self.speed = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d42B().pack(_x.gps_tow, _x.gnss1.enabled, _x.gnss1.used, _x.gnss1.residual_high_warning, _x.gnss1.sample_time_warning, _x.gnss1.configuration_error, _x.gnss1.max_num_meas_exceeded, _x.gnss2.enabled, _x.gnss2.used, _x.gnss2.residual_high_warning, _x.gnss2.sample_time_warning, _x.gnss2.configuration_error, _x.gnss2.max_num_meas_exceeded, _x.dual_antenna.enabled, _x.dual_antenna.used, _x.dual_antenna.residual_high_warning, _x.dual_antenna.sample_time_warning, _x.dual_antenna.configuration_error, _x.dual_antenna.max_num_meas_exceeded, _x.heading.enabled, _x.heading.used, _x.heading.residual_high_warning, _x.heading.sample_time_warning, _x.heading.configuration_error, _x.heading.max_num_meas_exceeded, _x.pressure.enabled, _x.pressure.used, _x.pressure.residual_high_warning, _x.pressure.sample_time_warning, _x.pressure.configuration_error, _x.pressure.max_num_meas_exceeded, _x.magnetometer.enabled, _x.magnetometer.used, _x.magnetometer.residual_high_warning, _x.magnetometer.sample_time_warning, _x.magnetometer.configuration_error, _x.magnetometer.max_num_meas_exceeded, _x.speed.enabled, _x.speed.used, _x.speed.residual_high_warning, _x.speed.sample_time_warning, _x.speed.configuration_error, _x.speed.max_num_meas_exceeded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gnss1 is None:
        self.gnss1 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.gnss2 is None:
        self.gnss2 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.dual_antenna is None:
        self.dual_antenna = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.heading is None:
        self.heading = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.pressure is None:
        self.pressure = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.magnetometer is None:
        self.magnetometer = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.speed is None:
        self.speed = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.gps_tow, _x.gnss1.enabled, _x.gnss1.used, _x.gnss1.residual_high_warning, _x.gnss1.sample_time_warning, _x.gnss1.configuration_error, _x.gnss1.max_num_meas_exceeded, _x.gnss2.enabled, _x.gnss2.used, _x.gnss2.residual_high_warning, _x.gnss2.sample_time_warning, _x.gnss2.configuration_error, _x.gnss2.max_num_meas_exceeded, _x.dual_antenna.enabled, _x.dual_antenna.used, _x.dual_antenna.residual_high_warning, _x.dual_antenna.sample_time_warning, _x.dual_antenna.configuration_error, _x.dual_antenna.max_num_meas_exceeded, _x.heading.enabled, _x.heading.used, _x.heading.residual_high_warning, _x.heading.sample_time_warning, _x.heading.configuration_error, _x.heading.max_num_meas_exceeded, _x.pressure.enabled, _x.pressure.used, _x.pressure.residual_high_warning, _x.pressure.sample_time_warning, _x.pressure.configuration_error, _x.pressure.max_num_meas_exceeded, _x.magnetometer.enabled, _x.magnetometer.used, _x.magnetometer.residual_high_warning, _x.magnetometer.sample_time_warning, _x.magnetometer.configuration_error, _x.magnetometer.max_num_meas_exceeded, _x.speed.enabled, _x.speed.used, _x.speed.residual_high_warning, _x.speed.sample_time_warning, _x.speed.configuration_error, _x.speed.max_num_meas_exceeded,) = _get_struct_d42B().unpack(str[start:end])
      self.gnss1.enabled = bool(self.gnss1.enabled)
      self.gnss1.used = bool(self.gnss1.used)
      self.gnss1.residual_high_warning = bool(self.gnss1.residual_high_warning)
      self.gnss1.sample_time_warning = bool(self.gnss1.sample_time_warning)
      self.gnss1.configuration_error = bool(self.gnss1.configuration_error)
      self.gnss1.max_num_meas_exceeded = bool(self.gnss1.max_num_meas_exceeded)
      self.gnss2.enabled = bool(self.gnss2.enabled)
      self.gnss2.used = bool(self.gnss2.used)
      self.gnss2.residual_high_warning = bool(self.gnss2.residual_high_warning)
      self.gnss2.sample_time_warning = bool(self.gnss2.sample_time_warning)
      self.gnss2.configuration_error = bool(self.gnss2.configuration_error)
      self.gnss2.max_num_meas_exceeded = bool(self.gnss2.max_num_meas_exceeded)
      self.dual_antenna.enabled = bool(self.dual_antenna.enabled)
      self.dual_antenna.used = bool(self.dual_antenna.used)
      self.dual_antenna.residual_high_warning = bool(self.dual_antenna.residual_high_warning)
      self.dual_antenna.sample_time_warning = bool(self.dual_antenna.sample_time_warning)
      self.dual_antenna.configuration_error = bool(self.dual_antenna.configuration_error)
      self.dual_antenna.max_num_meas_exceeded = bool(self.dual_antenna.max_num_meas_exceeded)
      self.heading.enabled = bool(self.heading.enabled)
      self.heading.used = bool(self.heading.used)
      self.heading.residual_high_warning = bool(self.heading.residual_high_warning)
      self.heading.sample_time_warning = bool(self.heading.sample_time_warning)
      self.heading.configuration_error = bool(self.heading.configuration_error)
      self.heading.max_num_meas_exceeded = bool(self.heading.max_num_meas_exceeded)
      self.pressure.enabled = bool(self.pressure.enabled)
      self.pressure.used = bool(self.pressure.used)
      self.pressure.residual_high_warning = bool(self.pressure.residual_high_warning)
      self.pressure.sample_time_warning = bool(self.pressure.sample_time_warning)
      self.pressure.configuration_error = bool(self.pressure.configuration_error)
      self.pressure.max_num_meas_exceeded = bool(self.pressure.max_num_meas_exceeded)
      self.magnetometer.enabled = bool(self.magnetometer.enabled)
      self.magnetometer.used = bool(self.magnetometer.used)
      self.magnetometer.residual_high_warning = bool(self.magnetometer.residual_high_warning)
      self.magnetometer.sample_time_warning = bool(self.magnetometer.sample_time_warning)
      self.magnetometer.configuration_error = bool(self.magnetometer.configuration_error)
      self.magnetometer.max_num_meas_exceeded = bool(self.magnetometer.max_num_meas_exceeded)
      self.speed.enabled = bool(self.speed.enabled)
      self.speed.used = bool(self.speed.used)
      self.speed.residual_high_warning = bool(self.speed.residual_high_warning)
      self.speed.sample_time_warning = bool(self.speed.sample_time_warning)
      self.speed.configuration_error = bool(self.speed.configuration_error)
      self.speed.max_num_meas_exceeded = bool(self.speed.max_num_meas_exceeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d42B().pack(_x.gps_tow, _x.gnss1.enabled, _x.gnss1.used, _x.gnss1.residual_high_warning, _x.gnss1.sample_time_warning, _x.gnss1.configuration_error, _x.gnss1.max_num_meas_exceeded, _x.gnss2.enabled, _x.gnss2.used, _x.gnss2.residual_high_warning, _x.gnss2.sample_time_warning, _x.gnss2.configuration_error, _x.gnss2.max_num_meas_exceeded, _x.dual_antenna.enabled, _x.dual_antenna.used, _x.dual_antenna.residual_high_warning, _x.dual_antenna.sample_time_warning, _x.dual_antenna.configuration_error, _x.dual_antenna.max_num_meas_exceeded, _x.heading.enabled, _x.heading.used, _x.heading.residual_high_warning, _x.heading.sample_time_warning, _x.heading.configuration_error, _x.heading.max_num_meas_exceeded, _x.pressure.enabled, _x.pressure.used, _x.pressure.residual_high_warning, _x.pressure.sample_time_warning, _x.pressure.configuration_error, _x.pressure.max_num_meas_exceeded, _x.magnetometer.enabled, _x.magnetometer.used, _x.magnetometer.residual_high_warning, _x.magnetometer.sample_time_warning, _x.magnetometer.configuration_error, _x.magnetometer.max_num_meas_exceeded, _x.speed.enabled, _x.speed.used, _x.speed.residual_high_warning, _x.speed.sample_time_warning, _x.speed.configuration_error, _x.speed.max_num_meas_exceeded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gnss1 is None:
        self.gnss1 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.gnss2 is None:
        self.gnss2 = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.dual_antenna is None:
        self.dual_antenna = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.heading is None:
        self.heading = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.pressure is None:
        self.pressure = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.magnetometer is None:
        self.magnetometer = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      if self.speed is None:
        self.speed = microstrain_inertial_msgs.msg.FilterAidingMeasurementSummaryIndicator()
      end = 0
      _x = self
      start = end
      end += 50
      (_x.gps_tow, _x.gnss1.enabled, _x.gnss1.used, _x.gnss1.residual_high_warning, _x.gnss1.sample_time_warning, _x.gnss1.configuration_error, _x.gnss1.max_num_meas_exceeded, _x.gnss2.enabled, _x.gnss2.used, _x.gnss2.residual_high_warning, _x.gnss2.sample_time_warning, _x.gnss2.configuration_error, _x.gnss2.max_num_meas_exceeded, _x.dual_antenna.enabled, _x.dual_antenna.used, _x.dual_antenna.residual_high_warning, _x.dual_antenna.sample_time_warning, _x.dual_antenna.configuration_error, _x.dual_antenna.max_num_meas_exceeded, _x.heading.enabled, _x.heading.used, _x.heading.residual_high_warning, _x.heading.sample_time_warning, _x.heading.configuration_error, _x.heading.max_num_meas_exceeded, _x.pressure.enabled, _x.pressure.used, _x.pressure.residual_high_warning, _x.pressure.sample_time_warning, _x.pressure.configuration_error, _x.pressure.max_num_meas_exceeded, _x.magnetometer.enabled, _x.magnetometer.used, _x.magnetometer.residual_high_warning, _x.magnetometer.sample_time_warning, _x.magnetometer.configuration_error, _x.magnetometer.max_num_meas_exceeded, _x.speed.enabled, _x.speed.used, _x.speed.residual_high_warning, _x.speed.sample_time_warning, _x.speed.configuration_error, _x.speed.max_num_meas_exceeded,) = _get_struct_d42B().unpack(str[start:end])
      self.gnss1.enabled = bool(self.gnss1.enabled)
      self.gnss1.used = bool(self.gnss1.used)
      self.gnss1.residual_high_warning = bool(self.gnss1.residual_high_warning)
      self.gnss1.sample_time_warning = bool(self.gnss1.sample_time_warning)
      self.gnss1.configuration_error = bool(self.gnss1.configuration_error)
      self.gnss1.max_num_meas_exceeded = bool(self.gnss1.max_num_meas_exceeded)
      self.gnss2.enabled = bool(self.gnss2.enabled)
      self.gnss2.used = bool(self.gnss2.used)
      self.gnss2.residual_high_warning = bool(self.gnss2.residual_high_warning)
      self.gnss2.sample_time_warning = bool(self.gnss2.sample_time_warning)
      self.gnss2.configuration_error = bool(self.gnss2.configuration_error)
      self.gnss2.max_num_meas_exceeded = bool(self.gnss2.max_num_meas_exceeded)
      self.dual_antenna.enabled = bool(self.dual_antenna.enabled)
      self.dual_antenna.used = bool(self.dual_antenna.used)
      self.dual_antenna.residual_high_warning = bool(self.dual_antenna.residual_high_warning)
      self.dual_antenna.sample_time_warning = bool(self.dual_antenna.sample_time_warning)
      self.dual_antenna.configuration_error = bool(self.dual_antenna.configuration_error)
      self.dual_antenna.max_num_meas_exceeded = bool(self.dual_antenna.max_num_meas_exceeded)
      self.heading.enabled = bool(self.heading.enabled)
      self.heading.used = bool(self.heading.used)
      self.heading.residual_high_warning = bool(self.heading.residual_high_warning)
      self.heading.sample_time_warning = bool(self.heading.sample_time_warning)
      self.heading.configuration_error = bool(self.heading.configuration_error)
      self.heading.max_num_meas_exceeded = bool(self.heading.max_num_meas_exceeded)
      self.pressure.enabled = bool(self.pressure.enabled)
      self.pressure.used = bool(self.pressure.used)
      self.pressure.residual_high_warning = bool(self.pressure.residual_high_warning)
      self.pressure.sample_time_warning = bool(self.pressure.sample_time_warning)
      self.pressure.configuration_error = bool(self.pressure.configuration_error)
      self.pressure.max_num_meas_exceeded = bool(self.pressure.max_num_meas_exceeded)
      self.magnetometer.enabled = bool(self.magnetometer.enabled)
      self.magnetometer.used = bool(self.magnetometer.used)
      self.magnetometer.residual_high_warning = bool(self.magnetometer.residual_high_warning)
      self.magnetometer.sample_time_warning = bool(self.magnetometer.sample_time_warning)
      self.magnetometer.configuration_error = bool(self.magnetometer.configuration_error)
      self.magnetometer.max_num_meas_exceeded = bool(self.magnetometer.max_num_meas_exceeded)
      self.speed.enabled = bool(self.speed.enabled)
      self.speed.used = bool(self.speed.used)
      self.speed.residual_high_warning = bool(self.speed.residual_high_warning)
      self.speed.sample_time_warning = bool(self.speed.sample_time_warning)
      self.speed.configuration_error = bool(self.speed.configuration_error)
      self.speed.max_num_meas_exceeded = bool(self.speed.max_num_meas_exceeded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d42B = None
def _get_struct_d42B():
    global _struct_d42B
    if _struct_d42B is None:
        _struct_d42B = struct.Struct("<d42B")
    return _struct_d42B
