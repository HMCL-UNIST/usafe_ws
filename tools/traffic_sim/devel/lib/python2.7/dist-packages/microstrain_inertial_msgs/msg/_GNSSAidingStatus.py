# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/GNSSAidingStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GNSSAidingStatus(genpy.Message):
  _md5sum = "93a07537312a9e616123b06cec1efdf6"
  _type = "microstrain_inertial_msgs/GNSSAidingStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 gps_tow
bool    has_position_fix
bool    tight_coupling
bool    differential_corrections
bool    integer_fix
bool    using_gps 
bool    using_glonass
bool    using_galileo
bool    using_beidou"""
  __slots__ = ['gps_tow','has_position_fix','tight_coupling','differential_corrections','integer_fix','using_gps','using_glonass','using_galileo','using_beidou']
  _slot_types = ['float64','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_tow,has_position_fix,tight_coupling,differential_corrections,integer_fix,using_gps,using_glonass,using_galileo,using_beidou

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GNSSAidingStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_tow is None:
        self.gps_tow = 0.
      if self.has_position_fix is None:
        self.has_position_fix = False
      if self.tight_coupling is None:
        self.tight_coupling = False
      if self.differential_corrections is None:
        self.differential_corrections = False
      if self.integer_fix is None:
        self.integer_fix = False
      if self.using_gps is None:
        self.using_gps = False
      if self.using_glonass is None:
        self.using_glonass = False
      if self.using_galileo is None:
        self.using_galileo = False
      if self.using_beidou is None:
        self.using_beidou = False
    else:
      self.gps_tow = 0.
      self.has_position_fix = False
      self.tight_coupling = False
      self.differential_corrections = False
      self.integer_fix = False
      self.using_gps = False
      self.using_glonass = False
      self.using_galileo = False
      self.using_beidou = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d8B().pack(_x.gps_tow, _x.has_position_fix, _x.tight_coupling, _x.differential_corrections, _x.integer_fix, _x.using_gps, _x.using_glonass, _x.using_galileo, _x.using_beidou))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.gps_tow, _x.has_position_fix, _x.tight_coupling, _x.differential_corrections, _x.integer_fix, _x.using_gps, _x.using_glonass, _x.using_galileo, _x.using_beidou,) = _get_struct_d8B().unpack(str[start:end])
      self.has_position_fix = bool(self.has_position_fix)
      self.tight_coupling = bool(self.tight_coupling)
      self.differential_corrections = bool(self.differential_corrections)
      self.integer_fix = bool(self.integer_fix)
      self.using_gps = bool(self.using_gps)
      self.using_glonass = bool(self.using_glonass)
      self.using_galileo = bool(self.using_galileo)
      self.using_beidou = bool(self.using_beidou)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d8B().pack(_x.gps_tow, _x.has_position_fix, _x.tight_coupling, _x.differential_corrections, _x.integer_fix, _x.using_gps, _x.using_glonass, _x.using_galileo, _x.using_beidou))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.gps_tow, _x.has_position_fix, _x.tight_coupling, _x.differential_corrections, _x.integer_fix, _x.using_gps, _x.using_glonass, _x.using_galileo, _x.using_beidou,) = _get_struct_d8B().unpack(str[start:end])
      self.has_position_fix = bool(self.has_position_fix)
      self.tight_coupling = bool(self.tight_coupling)
      self.differential_corrections = bool(self.differential_corrections)
      self.integer_fix = bool(self.integer_fix)
      self.using_gps = bool(self.using_gps)
      self.using_glonass = bool(self.using_glonass)
      self.using_galileo = bool(self.using_galileo)
      self.using_beidou = bool(self.using_beidou)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d8B = None
def _get_struct_d8B():
    global _struct_d8B
    if _struct_d8B is None:
        _struct_d8B = struct.Struct("<d8B")
    return _struct_d8B
