# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/ExternalHeadingUpdateRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExternalHeadingUpdateRequest(genpy.Message):
  _md5sum = "1ce6764f0be974407aa8df95cfdafba2"
  _type = "microstrain_inertial_msgs/ExternalHeadingUpdateRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 gps_tow
uint16  gps_week_number
float32 heading_rad
float32 heading_1sigma_rad
uint16  heading_type
bool    use_time
uint16 HEADING_TYPE_TRUE      = 1  
uint16 HEADING_TYPE_MAGNETIC  = 2  
"""
  # Pseudo-constants
  HEADING_TYPE_TRUE = 1
  HEADING_TYPE_MAGNETIC = 2

  __slots__ = ['gps_tow','gps_week_number','heading_rad','heading_1sigma_rad','heading_type','use_time']
  _slot_types = ['float64','uint16','float32','float32','uint16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps_tow,gps_week_number,heading_rad,heading_1sigma_rad,heading_type,use_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExternalHeadingUpdateRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps_tow is None:
        self.gps_tow = 0.
      if self.gps_week_number is None:
        self.gps_week_number = 0
      if self.heading_rad is None:
        self.heading_rad = 0.
      if self.heading_1sigma_rad is None:
        self.heading_1sigma_rad = 0.
      if self.heading_type is None:
        self.heading_type = 0
      if self.use_time is None:
        self.use_time = False
    else:
      self.gps_tow = 0.
      self.gps_week_number = 0
      self.heading_rad = 0.
      self.heading_1sigma_rad = 0.
      self.heading_type = 0
      self.use_time = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dH2fHB().pack(_x.gps_tow, _x.gps_week_number, _x.heading_rad, _x.heading_1sigma_rad, _x.heading_type, _x.use_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.gps_tow, _x.gps_week_number, _x.heading_rad, _x.heading_1sigma_rad, _x.heading_type, _x.use_time,) = _get_struct_dH2fHB().unpack(str[start:end])
      self.use_time = bool(self.use_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dH2fHB().pack(_x.gps_tow, _x.gps_week_number, _x.heading_rad, _x.heading_1sigma_rad, _x.heading_type, _x.use_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.gps_tow, _x.gps_week_number, _x.heading_rad, _x.heading_1sigma_rad, _x.heading_type, _x.use_time,) = _get_struct_dH2fHB().unpack(str[start:end])
      self.use_time = bool(self.use_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dH2fHB = None
def _get_struct_dH2fHB():
    global _struct_dH2fHB
    if _struct_dH2fHB is None:
        _struct_dH2fHB = struct.Struct("<dH2fHB")
    return _struct_dH2fHB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from microstrain_inertial_msgs/ExternalHeadingUpdateResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExternalHeadingUpdateResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "microstrain_inertial_msgs/ExternalHeadingUpdateResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExternalHeadingUpdateResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ExternalHeadingUpdate(object):
  _type          = 'microstrain_inertial_msgs/ExternalHeadingUpdate'
  _md5sum = 'c947f180cef8662c7c56b8c41afcba62'
  _request_class  = ExternalHeadingUpdateRequest
  _response_class = ExternalHeadingUpdateResponse
