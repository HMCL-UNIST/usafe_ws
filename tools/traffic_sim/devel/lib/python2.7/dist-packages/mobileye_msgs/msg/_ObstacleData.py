# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/ObstacleData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObstacleData(genpy.Message):
  _md5sum = "0f95ac1fed6a2bf8af234e0196c675c0"
  _type = "mobileye_msgs/ObstacleData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 obstacle_id
float32 obstacle_position_x
float32 obstacle_position_y
float32 obstacle_relative_velocity_x

uint8 obstacle_type
uint8 obstacle_status
bool obstacle_brake_lights
uint8 cut_in_and_out
uint8 blinker_info
uint8 obstacle_valid

float32 obstacle_length
float32 obstacle_width
uint8 obstacle_age
uint8 obstacle_lane
uint8 cipv_flag

float32 radar_position_x
float32 radar_velocity_x
uint8 radar_match_confidence
uint8 matched_radar_id

float32 obstacle_angle_rate
float32 obstacle_scale_change
float32 obstacle_object_accel_x
bool obstacle_replaced
float32 obstacle_angle
"""
  __slots__ = ['obstacle_id','obstacle_position_x','obstacle_position_y','obstacle_relative_velocity_x','obstacle_type','obstacle_status','obstacle_brake_lights','cut_in_and_out','blinker_info','obstacle_valid','obstacle_length','obstacle_width','obstacle_age','obstacle_lane','cipv_flag','radar_position_x','radar_velocity_x','radar_match_confidence','matched_radar_id','obstacle_angle_rate','obstacle_scale_change','obstacle_object_accel_x','obstacle_replaced','obstacle_angle']
  _slot_types = ['uint8','float32','float32','float32','uint8','uint8','bool','uint8','uint8','uint8','float32','float32','uint8','uint8','uint8','float32','float32','uint8','uint8','float32','float32','float32','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obstacle_id,obstacle_position_x,obstacle_position_y,obstacle_relative_velocity_x,obstacle_type,obstacle_status,obstacle_brake_lights,cut_in_and_out,blinker_info,obstacle_valid,obstacle_length,obstacle_width,obstacle_age,obstacle_lane,cipv_flag,radar_position_x,radar_velocity_x,radar_match_confidence,matched_radar_id,obstacle_angle_rate,obstacle_scale_change,obstacle_object_accel_x,obstacle_replaced,obstacle_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obstacle_id is None:
        self.obstacle_id = 0
      if self.obstacle_position_x is None:
        self.obstacle_position_x = 0.
      if self.obstacle_position_y is None:
        self.obstacle_position_y = 0.
      if self.obstacle_relative_velocity_x is None:
        self.obstacle_relative_velocity_x = 0.
      if self.obstacle_type is None:
        self.obstacle_type = 0
      if self.obstacle_status is None:
        self.obstacle_status = 0
      if self.obstacle_brake_lights is None:
        self.obstacle_brake_lights = False
      if self.cut_in_and_out is None:
        self.cut_in_and_out = 0
      if self.blinker_info is None:
        self.blinker_info = 0
      if self.obstacle_valid is None:
        self.obstacle_valid = 0
      if self.obstacle_length is None:
        self.obstacle_length = 0.
      if self.obstacle_width is None:
        self.obstacle_width = 0.
      if self.obstacle_age is None:
        self.obstacle_age = 0
      if self.obstacle_lane is None:
        self.obstacle_lane = 0
      if self.cipv_flag is None:
        self.cipv_flag = 0
      if self.radar_position_x is None:
        self.radar_position_x = 0.
      if self.radar_velocity_x is None:
        self.radar_velocity_x = 0.
      if self.radar_match_confidence is None:
        self.radar_match_confidence = 0
      if self.matched_radar_id is None:
        self.matched_radar_id = 0
      if self.obstacle_angle_rate is None:
        self.obstacle_angle_rate = 0.
      if self.obstacle_scale_change is None:
        self.obstacle_scale_change = 0.
      if self.obstacle_object_accel_x is None:
        self.obstacle_object_accel_x = 0.
      if self.obstacle_replaced is None:
        self.obstacle_replaced = False
      if self.obstacle_angle is None:
        self.obstacle_angle = 0.
    else:
      self.obstacle_id = 0
      self.obstacle_position_x = 0.
      self.obstacle_position_y = 0.
      self.obstacle_relative_velocity_x = 0.
      self.obstacle_type = 0
      self.obstacle_status = 0
      self.obstacle_brake_lights = False
      self.cut_in_and_out = 0
      self.blinker_info = 0
      self.obstacle_valid = 0
      self.obstacle_length = 0.
      self.obstacle_width = 0.
      self.obstacle_age = 0
      self.obstacle_lane = 0
      self.cipv_flag = 0
      self.radar_position_x = 0.
      self.radar_velocity_x = 0.
      self.radar_match_confidence = 0
      self.matched_radar_id = 0
      self.obstacle_angle_rate = 0.
      self.obstacle_scale_change = 0.
      self.obstacle_object_accel_x = 0.
      self.obstacle_replaced = False
      self.obstacle_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3f6B2f3B2f2B3fBf().pack(_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_B3f6B2f3B2f2B3fBf().unpack(str[start:end])
      self.obstacle_brake_lights = bool(self.obstacle_brake_lights)
      self.obstacle_replaced = bool(self.obstacle_replaced)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3f6B2f3B2f2B3fBf().pack(_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_B3f6B2f3B2f2B3fBf().unpack(str[start:end])
      self.obstacle_brake_lights = bool(self.obstacle_brake_lights)
      self.obstacle_replaced = bool(self.obstacle_replaced)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3f6B2f3B2f2B3fBf = None
def _get_struct_B3f6B2f3B2f2B3fBf():
    global _struct_B3f6B2f3B2f2B3fBf
    if _struct_B3f6B2f3B2f2B3fBf is None:
        _struct_B3f6B2f3B2f2B3fBf = struct.Struct("<B3f6B2f3B2f2B3fBf")
    return _struct_B3f6B2f3B2f2B3fBf
