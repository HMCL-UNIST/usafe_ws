# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/MobileyeInfo_obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobileye_msgs.msg
import std_msgs.msg

class MobileyeInfo_obstacle(genpy.Message):
  _md5sum = "121aed0c94d2bb3256eb91e8d451839e"
  _type = "mobileye_msgs/MobileyeInfo_obstacle"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

ObstacleStatus obstacle_status
ObstacleData[] obstacle_data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mobileye_msgs/ObstacleStatus
uint8 number_of_obstacles
uint8 timestamp

bool left_close_rang_cut_in
bool right_close_rang_cut_in

uint8 go
bool close_car
uint8 failsafe

================================================================================
MSG: mobileye_msgs/ObstacleData
uint8 obstacle_id
float32 obstacle_position_x
float32 obstacle_position_y
float32 obstacle_relative_velocity_x

uint8 obstacle_type
uint8 obstacle_status
bool obstacle_brake_lights
uint8 cut_in_and_out
uint8 blinker_info
uint8 obstacle_valid

float32 obstacle_length
float32 obstacle_width
uint8 obstacle_age
uint8 obstacle_lane
uint8 cipv_flag

float32 radar_position_x
float32 radar_velocity_x
uint8 radar_match_confidence
uint8 matched_radar_id

float32 obstacle_angle_rate
float32 obstacle_scale_change
float32 obstacle_object_accel_x
bool obstacle_replaced
float32 obstacle_angle
"""
  __slots__ = ['header','obstacle_status','obstacle_data']
  _slot_types = ['std_msgs/Header','mobileye_msgs/ObstacleStatus','mobileye_msgs/ObstacleData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,obstacle_status,obstacle_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MobileyeInfo_obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obstacle_status is None:
        self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      if self.obstacle_data is None:
        self.obstacle_data = []
    else:
      self.header = std_msgs.msg.Header()
      self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      self.obstacle_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe))
      length = len(self.obstacle_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_data:
        _x = val1
        buff.write(_get_struct_B3f6B2f3B2f2B3fBf().pack(_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obstacle_status is None:
        self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      if self.obstacle_data is None:
        self.obstacle_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe,) = _get_struct_7B().unpack(str[start:end])
      self.obstacle_status.left_close_rang_cut_in = bool(self.obstacle_status.left_close_rang_cut_in)
      self.obstacle_status.right_close_rang_cut_in = bool(self.obstacle_status.right_close_rang_cut_in)
      self.obstacle_status.close_car = bool(self.obstacle_status.close_car)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_data = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.ObstacleData()
        _x = val1
        start = end
        end += 57
        (_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_B3f6B2f3B2f2B3fBf().unpack(str[start:end])
        val1.obstacle_brake_lights = bool(val1.obstacle_brake_lights)
        val1.obstacle_replaced = bool(val1.obstacle_replaced)
        self.obstacle_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B().pack(_x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe))
      length = len(self.obstacle_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_data:
        _x = val1
        buff.write(_get_struct_B3f6B2f3B2f2B3fBf().pack(_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.obstacle_status is None:
        self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      if self.obstacle_data is None:
        self.obstacle_data = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe,) = _get_struct_7B().unpack(str[start:end])
      self.obstacle_status.left_close_rang_cut_in = bool(self.obstacle_status.left_close_rang_cut_in)
      self.obstacle_status.right_close_rang_cut_in = bool(self.obstacle_status.right_close_rang_cut_in)
      self.obstacle_status.close_car = bool(self.obstacle_status.close_car)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_data = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.ObstacleData()
        _x = val1
        start = end
        end += 57
        (_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_B3f6B2f3B2f2B3fBf().unpack(str[start:end])
        val1.obstacle_brake_lights = bool(val1.obstacle_brake_lights)
        val1.obstacle_replaced = bool(val1.obstacle_replaced)
        self.obstacle_data.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
_struct_B3f6B2f3B2f2B3fBf = None
def _get_struct_B3f6B2f3B2f2B3fBf():
    global _struct_B3f6B2f3B2f2B3fBf
    if _struct_B3f6B2f3B2f2B3fBf is None:
        _struct_B3f6B2f3B2f2B3fBf = struct.Struct("<B3f6B2f3B2f2B3fBf")
    return _struct_B3f6B2f3B2f2B3fBf
