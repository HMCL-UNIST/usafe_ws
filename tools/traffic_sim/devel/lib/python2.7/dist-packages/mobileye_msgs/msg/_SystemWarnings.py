# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/SystemWarnings.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SystemWarnings(genpy.Message):
  _md5sum = "13b6bac628f7b8055c48f3c1bf2dfa99"
  _type = "mobileye_msgs/SystemWarnings"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 sound_type
bool peds_in_dz
bool peds_fcw
uint8 time_indicator

bool error_valid
uint8 error_code
bool zero_speed
bool headway_valid
float32 headway_measurement

bool ldw_off
bool left_ldw_on
bool right_ldw_on
bool fcw_on
bool maintenance
bool failsafe

bool tsr_enabled
bool hw_repeatable_enabled
uint8 headway_warning_level
uint8 tsr_warning_level
bool tamper_alert"""
  __slots__ = ['sound_type','peds_in_dz','peds_fcw','time_indicator','error_valid','error_code','zero_speed','headway_valid','headway_measurement','ldw_off','left_ldw_on','right_ldw_on','fcw_on','maintenance','failsafe','tsr_enabled','hw_repeatable_enabled','headway_warning_level','tsr_warning_level','tamper_alert']
  _slot_types = ['uint8','bool','bool','uint8','bool','uint8','bool','bool','float32','bool','bool','bool','bool','bool','bool','bool','bool','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sound_type,peds_in_dz,peds_fcw,time_indicator,error_valid,error_code,zero_speed,headway_valid,headway_measurement,ldw_off,left_ldw_on,right_ldw_on,fcw_on,maintenance,failsafe,tsr_enabled,hw_repeatable_enabled,headway_warning_level,tsr_warning_level,tamper_alert

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemWarnings, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sound_type is None:
        self.sound_type = 0
      if self.peds_in_dz is None:
        self.peds_in_dz = False
      if self.peds_fcw is None:
        self.peds_fcw = False
      if self.time_indicator is None:
        self.time_indicator = 0
      if self.error_valid is None:
        self.error_valid = False
      if self.error_code is None:
        self.error_code = 0
      if self.zero_speed is None:
        self.zero_speed = False
      if self.headway_valid is None:
        self.headway_valid = False
      if self.headway_measurement is None:
        self.headway_measurement = 0.
      if self.ldw_off is None:
        self.ldw_off = False
      if self.left_ldw_on is None:
        self.left_ldw_on = False
      if self.right_ldw_on is None:
        self.right_ldw_on = False
      if self.fcw_on is None:
        self.fcw_on = False
      if self.maintenance is None:
        self.maintenance = False
      if self.failsafe is None:
        self.failsafe = False
      if self.tsr_enabled is None:
        self.tsr_enabled = False
      if self.hw_repeatable_enabled is None:
        self.hw_repeatable_enabled = False
      if self.headway_warning_level is None:
        self.headway_warning_level = 0
      if self.tsr_warning_level is None:
        self.tsr_warning_level = 0
      if self.tamper_alert is None:
        self.tamper_alert = False
    else:
      self.sound_type = 0
      self.peds_in_dz = False
      self.peds_fcw = False
      self.time_indicator = 0
      self.error_valid = False
      self.error_code = 0
      self.zero_speed = False
      self.headway_valid = False
      self.headway_measurement = 0.
      self.ldw_off = False
      self.left_ldw_on = False
      self.right_ldw_on = False
      self.fcw_on = False
      self.maintenance = False
      self.failsafe = False
      self.tsr_enabled = False
      self.hw_repeatable_enabled = False
      self.headway_warning_level = 0
      self.tsr_warning_level = 0
      self.tamper_alert = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8Bf11B().pack(_x.sound_type, _x.peds_in_dz, _x.peds_fcw, _x.time_indicator, _x.error_valid, _x.error_code, _x.zero_speed, _x.headway_valid, _x.headway_measurement, _x.ldw_off, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.maintenance, _x.failsafe, _x.tsr_enabled, _x.hw_repeatable_enabled, _x.headway_warning_level, _x.tsr_warning_level, _x.tamper_alert))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.sound_type, _x.peds_in_dz, _x.peds_fcw, _x.time_indicator, _x.error_valid, _x.error_code, _x.zero_speed, _x.headway_valid, _x.headway_measurement, _x.ldw_off, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.maintenance, _x.failsafe, _x.tsr_enabled, _x.hw_repeatable_enabled, _x.headway_warning_level, _x.tsr_warning_level, _x.tamper_alert,) = _get_struct_8Bf11B().unpack(str[start:end])
      self.peds_in_dz = bool(self.peds_in_dz)
      self.peds_fcw = bool(self.peds_fcw)
      self.error_valid = bool(self.error_valid)
      self.zero_speed = bool(self.zero_speed)
      self.headway_valid = bool(self.headway_valid)
      self.ldw_off = bool(self.ldw_off)
      self.left_ldw_on = bool(self.left_ldw_on)
      self.right_ldw_on = bool(self.right_ldw_on)
      self.fcw_on = bool(self.fcw_on)
      self.maintenance = bool(self.maintenance)
      self.failsafe = bool(self.failsafe)
      self.tsr_enabled = bool(self.tsr_enabled)
      self.hw_repeatable_enabled = bool(self.hw_repeatable_enabled)
      self.tamper_alert = bool(self.tamper_alert)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8Bf11B().pack(_x.sound_type, _x.peds_in_dz, _x.peds_fcw, _x.time_indicator, _x.error_valid, _x.error_code, _x.zero_speed, _x.headway_valid, _x.headway_measurement, _x.ldw_off, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.maintenance, _x.failsafe, _x.tsr_enabled, _x.hw_repeatable_enabled, _x.headway_warning_level, _x.tsr_warning_level, _x.tamper_alert))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.sound_type, _x.peds_in_dz, _x.peds_fcw, _x.time_indicator, _x.error_valid, _x.error_code, _x.zero_speed, _x.headway_valid, _x.headway_measurement, _x.ldw_off, _x.left_ldw_on, _x.right_ldw_on, _x.fcw_on, _x.maintenance, _x.failsafe, _x.tsr_enabled, _x.hw_repeatable_enabled, _x.headway_warning_level, _x.tsr_warning_level, _x.tamper_alert,) = _get_struct_8Bf11B().unpack(str[start:end])
      self.peds_in_dz = bool(self.peds_in_dz)
      self.peds_fcw = bool(self.peds_fcw)
      self.error_valid = bool(self.error_valid)
      self.zero_speed = bool(self.zero_speed)
      self.headway_valid = bool(self.headway_valid)
      self.ldw_off = bool(self.ldw_off)
      self.left_ldw_on = bool(self.left_ldw_on)
      self.right_ldw_on = bool(self.right_ldw_on)
      self.fcw_on = bool(self.fcw_on)
      self.maintenance = bool(self.maintenance)
      self.failsafe = bool(self.failsafe)
      self.tsr_enabled = bool(self.tsr_enabled)
      self.hw_repeatable_enabled = bool(self.hw_repeatable_enabled)
      self.tamper_alert = bool(self.tamper_alert)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8Bf11B = None
def _get_struct_8Bf11B():
    global _struct_8Bf11B
    if _struct_8Bf11B is None:
        _struct_8Bf11B = struct.Struct("<8Bf11B")
    return _struct_8Bf11B
