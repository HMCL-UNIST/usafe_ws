# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/ObstacleStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObstacleStatus(genpy.Message):
  _md5sum = "3b9b8b37869bebe9592f8765c69bab28"
  _type = "mobileye_msgs/ObstacleStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 number_of_obstacles
uint8 timestamp

bool left_close_rang_cut_in
bool right_close_rang_cut_in

uint8 go
bool close_car
uint8 failsafe
"""
  __slots__ = ['number_of_obstacles','timestamp','left_close_rang_cut_in','right_close_rang_cut_in','go','close_car','failsafe']
  _slot_types = ['uint8','uint8','bool','bool','uint8','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       number_of_obstacles,timestamp,left_close_rang_cut_in,right_close_rang_cut_in,go,close_car,failsafe

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.number_of_obstacles is None:
        self.number_of_obstacles = 0
      if self.timestamp is None:
        self.timestamp = 0
      if self.left_close_rang_cut_in is None:
        self.left_close_rang_cut_in = False
      if self.right_close_rang_cut_in is None:
        self.right_close_rang_cut_in = False
      if self.go is None:
        self.go = 0
      if self.close_car is None:
        self.close_car = False
      if self.failsafe is None:
        self.failsafe = 0
    else:
      self.number_of_obstacles = 0
      self.timestamp = 0
      self.left_close_rang_cut_in = False
      self.right_close_rang_cut_in = False
      self.go = 0
      self.close_car = False
      self.failsafe = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.number_of_obstacles, _x.timestamp, _x.left_close_rang_cut_in, _x.right_close_rang_cut_in, _x.go, _x.close_car, _x.failsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.number_of_obstacles, _x.timestamp, _x.left_close_rang_cut_in, _x.right_close_rang_cut_in, _x.go, _x.close_car, _x.failsafe,) = _get_struct_7B().unpack(str[start:end])
      self.left_close_rang_cut_in = bool(self.left_close_rang_cut_in)
      self.right_close_rang_cut_in = bool(self.right_close_rang_cut_in)
      self.close_car = bool(self.close_car)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.number_of_obstacles, _x.timestamp, _x.left_close_rang_cut_in, _x.right_close_rang_cut_in, _x.go, _x.close_car, _x.failsafe))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.number_of_obstacles, _x.timestamp, _x.left_close_rang_cut_in, _x.right_close_rang_cut_in, _x.go, _x.close_car, _x.failsafe,) = _get_struct_7B().unpack(str[start:end])
      self.left_close_rang_cut_in = bool(self.left_close_rang_cut_in)
      self.right_close_rang_cut_in = bool(self.right_close_rang_cut_in)
      self.close_car = bool(self.close_car)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
