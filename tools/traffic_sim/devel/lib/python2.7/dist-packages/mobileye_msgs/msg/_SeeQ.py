# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/SeeQ.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SeeQ(genpy.Message):
  _md5sum = "bd0f4ac945460fd2020ae1118ef5c53f"
  _type = "mobileye_msgs/SeeQ"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 serial_number
uint64 production_date

uint8 brain_version_major
uint8 brain_version_minor
uint8 mest_version_major
uint8 mest_version_minor
uint8 mest_version_subminor
uint8 mest_version_patch_number"""
  __slots__ = ['serial_number','production_date','brain_version_major','brain_version_minor','mest_version_major','mest_version_minor','mest_version_subminor','mest_version_patch_number']
  _slot_types = ['uint32','uint64','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       serial_number,production_date,brain_version_major,brain_version_minor,mest_version_major,mest_version_minor,mest_version_subminor,mest_version_patch_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SeeQ, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.serial_number is None:
        self.serial_number = 0
      if self.production_date is None:
        self.production_date = 0
      if self.brain_version_major is None:
        self.brain_version_major = 0
      if self.brain_version_minor is None:
        self.brain_version_minor = 0
      if self.mest_version_major is None:
        self.mest_version_major = 0
      if self.mest_version_minor is None:
        self.mest_version_minor = 0
      if self.mest_version_subminor is None:
        self.mest_version_subminor = 0
      if self.mest_version_patch_number is None:
        self.mest_version_patch_number = 0
    else:
      self.serial_number = 0
      self.production_date = 0
      self.brain_version_major = 0
      self.brain_version_minor = 0
      self.mest_version_major = 0
      self.mest_version_minor = 0
      self.mest_version_subminor = 0
      self.mest_version_patch_number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IQ6B().pack(_x.serial_number, _x.production_date, _x.brain_version_major, _x.brain_version_minor, _x.mest_version_major, _x.mest_version_minor, _x.mest_version_subminor, _x.mest_version_patch_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.serial_number, _x.production_date, _x.brain_version_major, _x.brain_version_minor, _x.mest_version_major, _x.mest_version_minor, _x.mest_version_subminor, _x.mest_version_patch_number,) = _get_struct_IQ6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IQ6B().pack(_x.serial_number, _x.production_date, _x.brain_version_major, _x.brain_version_minor, _x.mest_version_major, _x.mest_version_minor, _x.mest_version_subminor, _x.mest_version_patch_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.serial_number, _x.production_date, _x.brain_version_major, _x.brain_version_minor, _x.mest_version_major, _x.mest_version_minor, _x.mest_version_subminor, _x.mest_version_patch_number,) = _get_struct_IQ6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IQ6B = None
def _get_struct_IQ6B():
    global _struct_IQ6B
    if _struct_IQ6B is None:
        _struct_IQ6B = struct.Struct("<IQ6B")
    return _struct_IQ6B
