# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/MobileyeInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobileye_msgs.msg
import std_msgs.msg

class MobileyeInfo(genpy.Message):
  _md5sum = "f347fd8c2960b4f7e8d7a1b937971d62"
  _type = "mobileye_msgs/MobileyeInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

LKAlane left_lane
LKAlane right_lane

ReferencePoints reference_points

uint8 number_of_next_lane_markers

LKAlane[] next_lane

Lane lane

ObstacleStatus obstacle_status
ObstacleData[] obstacle_data

SystemWarnings system_warnings
CarInfo car_info
TSR[] tsr
TSRVisionOnlySign tsr_vision_only
Gyro gyro
SmartADAS smart_adas
SeeQ seeq
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mobileye_msgs/LKAlane
uint8 lane_type
uint8 quality
uint8 model_degree

float32 position_parameter_c0
float32 curvature_parameter_c2
float32 curvature_derivative_c3
float32 width_marking

float32 heading_angle_parameter_c1
float32 view_range
bool view_range_availability

================================================================================
MSG: mobileye_msgs/ReferencePoints
float32 ref_point1_position
float32 ref_point1_distance
bool ref_point1_validity
float32 ref_point2_position
float32 ref_point2_distance
bool ref_point2_validity
================================================================================
MSG: mobileye_msgs/Lane
float32 lane_curvature
float32 lane_heading

bool ca
float32 pitch_angle
float32 yaw_angle

bool right_ldw_availability
bool left_ldw_availability

================================================================================
MSG: mobileye_msgs/ObstacleStatus
uint8 number_of_obstacles
uint8 timestamp

bool left_close_rang_cut_in
bool right_close_rang_cut_in

uint8 go
bool close_car
uint8 failsafe

================================================================================
MSG: mobileye_msgs/ObstacleData
uint8 obstacle_id
float32 obstacle_position_x
float32 obstacle_position_y
float32 obstacle_relative_velocity_x

uint8 obstacle_type
uint8 obstacle_status
bool obstacle_brake_lights
uint8 cut_in_and_out
uint8 blinker_info
uint8 obstacle_valid

float32 obstacle_length
float32 obstacle_width
uint8 obstacle_age
uint8 obstacle_lane
uint8 cipv_flag

float32 radar_position_x
float32 radar_velocity_x
uint8 radar_match_confidence
uint8 matched_radar_id

float32 obstacle_angle_rate
float32 obstacle_scale_change
float32 obstacle_object_accel_x
bool obstacle_replaced
float32 obstacle_angle

================================================================================
MSG: mobileye_msgs/SystemWarnings
uint8 sound_type
bool peds_in_dz
bool peds_fcw
uint8 time_indicator

bool error_valid
uint8 error_code
bool zero_speed
bool headway_valid
float32 headway_measurement

bool ldw_off
bool left_ldw_on
bool right_ldw_on
bool fcw_on
bool maintenance
bool failsafe

bool tsr_enabled
bool hw_repeatable_enabled
uint8 headway_warning_level
uint8 tsr_warning_level
bool tamper_alert
================================================================================
MSG: mobileye_msgs/CarInfo
bool high_beam
bool low_beam
bool wipers
bool right_signal
bool left_signal
bool brake_signal
bool wipers_available
bool low_beam_available
bool high_beam_available
bool right_blink_available
bool left_blink_available
bool brake_available
bool speed_available
uint8 speed
uint8 shield_plus_settings
================================================================================
MSG: mobileye_msgs/TSR
uint8 vision_only_sign_type
uint8 supplementary_sign_type
float32 sign_position_x
float32 sign_position_y
float32 sign_position_z
uint8 filter_type
================================================================================
MSG: mobileye_msgs/TSRVisionOnlySign
uint8 vision_only_sign_type_display_1
uint8 vision_only_sign_type_display_2
uint8 vision_only_sign_type_display_3
uint8 vision_only_sign_type_display_4

uint8 supplementary_sign_type_display_1
uint8 supplementary_sign_type_display_2
uint8 supplementary_sign_type_display_3
uint8 supplementary_sign_type_display_4
================================================================================
MSG: mobileye_msgs/Gyro
bool gyro_sensor_data_available
float32 x_axis_data
================================================================================
MSG: mobileye_msgs/SmartADAS
uint8 persistent_on_off
uint8 volume_level
uint8 hmw_level
uint8 ldw_volume_level
uint8 hmw_volume_level
uint8 ldw_level
uint8 pedestrian_warning_level
uint8 sli_warning_level
uint8 blinker_reminder_level
uint8 virtual_bumper_level
uint8 hw_repeatable_level

uint8 buzzer_min_volume
uint8 buzzer_max_volume
uint8 buzzer_hmw_min_volume
uint8 buzzer_hmw_max_volume
uint8 buzzer_ldw_min_volume
uint8 buzzer_ldw_max_volume
uint8 ewiii_speed_indication
uint8 disable_system_off
uint8 calibration_source
uint8 ldw_min_value
uint8 ldw_max_value
uint8 ldw_speed
uint8 ped_min_value
uint8 ped_max_value
uint8 speed_for_high_low_beam_control
uint8 virtual_bumper_min_value
uint8 virtual_bumper_max_value
uint8 blinker_reminder_min_value
uint8 blinker_reminder_max_value

uint8 hmw_min_value
uint8 hmw_max_value
uint8 hmw_repeatable_min_value
uint8 hmw_repeatable_max_value
uint8 sli_min_value
uint8 sli_max_value
uint8 sli_delta_round_step
uint8 sli_delta_round_upwards
uint8 country_code
uint8 sli_unit_speed
uint8 tamper_alert_on_frames
uint8 tamper_alert_off_frames
uint8 tamper_alert_enable_j1939

bool[16] menu_ticks

bool[16] advanced_menu_ticks
================================================================================
MSG: mobileye_msgs/SeeQ
uint32 serial_number
uint64 production_date

uint8 brain_version_major
uint8 brain_version_minor
uint8 mest_version_major
uint8 mest_version_minor
uint8 mest_version_subminor
uint8 mest_version_patch_number"""
  __slots__ = ['header','left_lane','right_lane','reference_points','number_of_next_lane_markers','next_lane','lane','obstacle_status','obstacle_data','system_warnings','car_info','tsr','tsr_vision_only','gyro','smart_adas','seeq']
  _slot_types = ['std_msgs/Header','mobileye_msgs/LKAlane','mobileye_msgs/LKAlane','mobileye_msgs/ReferencePoints','uint8','mobileye_msgs/LKAlane[]','mobileye_msgs/Lane','mobileye_msgs/ObstacleStatus','mobileye_msgs/ObstacleData[]','mobileye_msgs/SystemWarnings','mobileye_msgs/CarInfo','mobileye_msgs/TSR[]','mobileye_msgs/TSRVisionOnlySign','mobileye_msgs/Gyro','mobileye_msgs/SmartADAS','mobileye_msgs/SeeQ']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_lane,right_lane,reference_points,number_of_next_lane_markers,next_lane,lane,obstacle_status,obstacle_data,system_warnings,car_info,tsr,tsr_vision_only,gyro,smart_adas,seeq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MobileyeInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane is None:
        self.left_lane = mobileye_msgs.msg.LKAlane()
      if self.right_lane is None:
        self.right_lane = mobileye_msgs.msg.LKAlane()
      if self.reference_points is None:
        self.reference_points = mobileye_msgs.msg.ReferencePoints()
      if self.number_of_next_lane_markers is None:
        self.number_of_next_lane_markers = 0
      if self.next_lane is None:
        self.next_lane = []
      if self.lane is None:
        self.lane = mobileye_msgs.msg.Lane()
      if self.obstacle_status is None:
        self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      if self.obstacle_data is None:
        self.obstacle_data = []
      if self.system_warnings is None:
        self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      if self.car_info is None:
        self.car_info = mobileye_msgs.msg.CarInfo()
      if self.tsr is None:
        self.tsr = []
      if self.tsr_vision_only is None:
        self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      if self.gyro is None:
        self.gyro = mobileye_msgs.msg.Gyro()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      if self.seeq is None:
        self.seeq = mobileye_msgs.msg.SeeQ()
    else:
      self.header = std_msgs.msg.Header()
      self.left_lane = mobileye_msgs.msg.LKAlane()
      self.right_lane = mobileye_msgs.msg.LKAlane()
      self.reference_points = mobileye_msgs.msg.ReferencePoints()
      self.number_of_next_lane_markers = 0
      self.next_lane = []
      self.lane = mobileye_msgs.msg.Lane()
      self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      self.obstacle_data = []
      self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      self.car_info = mobileye_msgs.msg.CarInfo()
      self.tsr = []
      self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      self.gyro = mobileye_msgs.msg.Gyro()
      self.smart_adas = mobileye_msgs.msg.SmartADAS()
      self.seeq = mobileye_msgs.msg.SeeQ()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B6f4B6fB2fB2f2B().pack(_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers))
      length = len(self.next_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_lane:
        _x = val1
        buff.write(_get_struct_3B6fB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
      _x = self
      buff.write(_get_struct_2fB2f9B().pack(_x.lane.lane_curvature, _x.lane.lane_heading, _x.lane.ca, _x.lane.pitch_angle, _x.lane.yaw_angle, _x.lane.right_ldw_availability, _x.lane.left_ldw_availability, _x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe))
      length = len(self.obstacle_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_data:
        _x = val1
        buff.write(_get_struct_B3f6B2f3B2f2B3fBf().pack(_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
      _x = self
      buff.write(_get_struct_8Bf26B().pack(_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings))
      length = len(self.tsr)
      buff.write(_struct_I.pack(length))
      for val1 in self.tsr:
        _x = val1
        buff.write(_get_struct_2B3fB().pack(_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type))
      _x = self
      buff.write(_get_struct_9Bf43B().pack(_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939))
      buff.write(_get_struct_16B().pack(*self.smart_adas.menu_ticks))
      buff.write(_get_struct_16B().pack(*self.smart_adas.advanced_menu_ticks))
      _x = self
      buff.write(_get_struct_IQ6B().pack(_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane is None:
        self.left_lane = mobileye_msgs.msg.LKAlane()
      if self.right_lane is None:
        self.right_lane = mobileye_msgs.msg.LKAlane()
      if self.reference_points is None:
        self.reference_points = mobileye_msgs.msg.ReferencePoints()
      if self.next_lane is None:
        self.next_lane = None
      if self.lane is None:
        self.lane = mobileye_msgs.msg.Lane()
      if self.obstacle_status is None:
        self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      if self.obstacle_data is None:
        self.obstacle_data = None
      if self.system_warnings is None:
        self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      if self.car_info is None:
        self.car_info = mobileye_msgs.msg.CarInfo()
      if self.tsr is None:
        self.tsr = None
      if self.tsr_vision_only is None:
        self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      if self.gyro is None:
        self.gyro = mobileye_msgs.msg.Gyro()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      if self.seeq is None:
        self.seeq = mobileye_msgs.msg.SeeQ()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers,) = _get_struct_3B6f4B6fB2fB2f2B().unpack(str[start:end])
      self.left_lane.view_range_availability = bool(self.left_lane.view_range_availability)
      self.right_lane.view_range_availability = bool(self.right_lane.view_range_availability)
      self.reference_points.ref_point1_validity = bool(self.reference_points.ref_point1_validity)
      self.reference_points.ref_point2_validity = bool(self.reference_points.ref_point2_validity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_lane = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.LKAlane()
        _x = val1
        start = end
        end += 28
        (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B6fB().unpack(str[start:end])
        val1.view_range_availability = bool(val1.view_range_availability)
        self.next_lane.append(val1)
      _x = self
      start = end
      end += 26
      (_x.lane.lane_curvature, _x.lane.lane_heading, _x.lane.ca, _x.lane.pitch_angle, _x.lane.yaw_angle, _x.lane.right_ldw_availability, _x.lane.left_ldw_availability, _x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe,) = _get_struct_2fB2f9B().unpack(str[start:end])
      self.lane.ca = bool(self.lane.ca)
      self.lane.right_ldw_availability = bool(self.lane.right_ldw_availability)
      self.lane.left_ldw_availability = bool(self.lane.left_ldw_availability)
      self.obstacle_status.left_close_rang_cut_in = bool(self.obstacle_status.left_close_rang_cut_in)
      self.obstacle_status.right_close_rang_cut_in = bool(self.obstacle_status.right_close_rang_cut_in)
      self.obstacle_status.close_car = bool(self.obstacle_status.close_car)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_data = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.ObstacleData()
        _x = val1
        start = end
        end += 57
        (_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_B3f6B2f3B2f2B3fBf().unpack(str[start:end])
        val1.obstacle_brake_lights = bool(val1.obstacle_brake_lights)
        val1.obstacle_replaced = bool(val1.obstacle_replaced)
        self.obstacle_data.append(val1)
      _x = self
      start = end
      end += 38
      (_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings,) = _get_struct_8Bf26B().unpack(str[start:end])
      self.system_warnings.peds_in_dz = bool(self.system_warnings.peds_in_dz)
      self.system_warnings.peds_fcw = bool(self.system_warnings.peds_fcw)
      self.system_warnings.error_valid = bool(self.system_warnings.error_valid)
      self.system_warnings.zero_speed = bool(self.system_warnings.zero_speed)
      self.system_warnings.headway_valid = bool(self.system_warnings.headway_valid)
      self.system_warnings.ldw_off = bool(self.system_warnings.ldw_off)
      self.system_warnings.left_ldw_on = bool(self.system_warnings.left_ldw_on)
      self.system_warnings.right_ldw_on = bool(self.system_warnings.right_ldw_on)
      self.system_warnings.fcw_on = bool(self.system_warnings.fcw_on)
      self.system_warnings.maintenance = bool(self.system_warnings.maintenance)
      self.system_warnings.failsafe = bool(self.system_warnings.failsafe)
      self.system_warnings.tsr_enabled = bool(self.system_warnings.tsr_enabled)
      self.system_warnings.hw_repeatable_enabled = bool(self.system_warnings.hw_repeatable_enabled)
      self.system_warnings.tamper_alert = bool(self.system_warnings.tamper_alert)
      self.car_info.high_beam = bool(self.car_info.high_beam)
      self.car_info.low_beam = bool(self.car_info.low_beam)
      self.car_info.wipers = bool(self.car_info.wipers)
      self.car_info.right_signal = bool(self.car_info.right_signal)
      self.car_info.left_signal = bool(self.car_info.left_signal)
      self.car_info.brake_signal = bool(self.car_info.brake_signal)
      self.car_info.wipers_available = bool(self.car_info.wipers_available)
      self.car_info.low_beam_available = bool(self.car_info.low_beam_available)
      self.car_info.high_beam_available = bool(self.car_info.high_beam_available)
      self.car_info.right_blink_available = bool(self.car_info.right_blink_available)
      self.car_info.left_blink_available = bool(self.car_info.left_blink_available)
      self.car_info.brake_available = bool(self.car_info.brake_available)
      self.car_info.speed_available = bool(self.car_info.speed_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tsr = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.TSR()
        _x = val1
        start = end
        end += 15
        (_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type,) = _get_struct_2B3fB().unpack(str[start:end])
        self.tsr.append(val1)
      _x = self
      start = end
      end += 56
      (_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939,) = _get_struct_9Bf43B().unpack(str[start:end])
      self.gyro.gyro_sensor_data_available = bool(self.gyro.gyro_sensor_data_available)
      start = end
      end += 16
      self.smart_adas.menu_ticks = _get_struct_16B().unpack(str[start:end])
      self.smart_adas.menu_ticks = list(map(bool, self.smart_adas.menu_ticks))
      start = end
      end += 16
      self.smart_adas.advanced_menu_ticks = _get_struct_16B().unpack(str[start:end])
      self.smart_adas.advanced_menu_ticks = list(map(bool, self.smart_adas.advanced_menu_ticks))
      _x = self
      start = end
      end += 18
      (_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number,) = _get_struct_IQ6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B6f4B6fB2fB2f2B().pack(_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers))
      length = len(self.next_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_lane:
        _x = val1
        buff.write(_get_struct_3B6fB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
      _x = self
      buff.write(_get_struct_2fB2f9B().pack(_x.lane.lane_curvature, _x.lane.lane_heading, _x.lane.ca, _x.lane.pitch_angle, _x.lane.yaw_angle, _x.lane.right_ldw_availability, _x.lane.left_ldw_availability, _x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe))
      length = len(self.obstacle_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacle_data:
        _x = val1
        buff.write(_get_struct_B3f6B2f3B2f2B3fBf().pack(_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle))
      _x = self
      buff.write(_get_struct_8Bf26B().pack(_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings))
      length = len(self.tsr)
      buff.write(_struct_I.pack(length))
      for val1 in self.tsr:
        _x = val1
        buff.write(_get_struct_2B3fB().pack(_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type))
      _x = self
      buff.write(_get_struct_9Bf43B().pack(_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939))
      buff.write(self.smart_adas.menu_ticks.tostring())
      buff.write(self.smart_adas.advanced_menu_ticks.tostring())
      _x = self
      buff.write(_get_struct_IQ6B().pack(_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane is None:
        self.left_lane = mobileye_msgs.msg.LKAlane()
      if self.right_lane is None:
        self.right_lane = mobileye_msgs.msg.LKAlane()
      if self.reference_points is None:
        self.reference_points = mobileye_msgs.msg.ReferencePoints()
      if self.next_lane is None:
        self.next_lane = None
      if self.lane is None:
        self.lane = mobileye_msgs.msg.Lane()
      if self.obstacle_status is None:
        self.obstacle_status = mobileye_msgs.msg.ObstacleStatus()
      if self.obstacle_data is None:
        self.obstacle_data = None
      if self.system_warnings is None:
        self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      if self.car_info is None:
        self.car_info = mobileye_msgs.msg.CarInfo()
      if self.tsr is None:
        self.tsr = None
      if self.tsr_vision_only is None:
        self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      if self.gyro is None:
        self.gyro = mobileye_msgs.msg.Gyro()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      if self.seeq is None:
        self.seeq = mobileye_msgs.msg.SeeQ()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers,) = _get_struct_3B6f4B6fB2fB2f2B().unpack(str[start:end])
      self.left_lane.view_range_availability = bool(self.left_lane.view_range_availability)
      self.right_lane.view_range_availability = bool(self.right_lane.view_range_availability)
      self.reference_points.ref_point1_validity = bool(self.reference_points.ref_point1_validity)
      self.reference_points.ref_point2_validity = bool(self.reference_points.ref_point2_validity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_lane = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.LKAlane()
        _x = val1
        start = end
        end += 28
        (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B6fB().unpack(str[start:end])
        val1.view_range_availability = bool(val1.view_range_availability)
        self.next_lane.append(val1)
      _x = self
      start = end
      end += 26
      (_x.lane.lane_curvature, _x.lane.lane_heading, _x.lane.ca, _x.lane.pitch_angle, _x.lane.yaw_angle, _x.lane.right_ldw_availability, _x.lane.left_ldw_availability, _x.obstacle_status.number_of_obstacles, _x.obstacle_status.timestamp, _x.obstacle_status.left_close_rang_cut_in, _x.obstacle_status.right_close_rang_cut_in, _x.obstacle_status.go, _x.obstacle_status.close_car, _x.obstacle_status.failsafe,) = _get_struct_2fB2f9B().unpack(str[start:end])
      self.lane.ca = bool(self.lane.ca)
      self.lane.right_ldw_availability = bool(self.lane.right_ldw_availability)
      self.lane.left_ldw_availability = bool(self.lane.left_ldw_availability)
      self.obstacle_status.left_close_rang_cut_in = bool(self.obstacle_status.left_close_rang_cut_in)
      self.obstacle_status.right_close_rang_cut_in = bool(self.obstacle_status.right_close_rang_cut_in)
      self.obstacle_status.close_car = bool(self.obstacle_status.close_car)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacle_data = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.ObstacleData()
        _x = val1
        start = end
        end += 57
        (_x.obstacle_id, _x.obstacle_position_x, _x.obstacle_position_y, _x.obstacle_relative_velocity_x, _x.obstacle_type, _x.obstacle_status, _x.obstacle_brake_lights, _x.cut_in_and_out, _x.blinker_info, _x.obstacle_valid, _x.obstacle_length, _x.obstacle_width, _x.obstacle_age, _x.obstacle_lane, _x.cipv_flag, _x.radar_position_x, _x.radar_velocity_x, _x.radar_match_confidence, _x.matched_radar_id, _x.obstacle_angle_rate, _x.obstacle_scale_change, _x.obstacle_object_accel_x, _x.obstacle_replaced, _x.obstacle_angle,) = _get_struct_B3f6B2f3B2f2B3fBf().unpack(str[start:end])
        val1.obstacle_brake_lights = bool(val1.obstacle_brake_lights)
        val1.obstacle_replaced = bool(val1.obstacle_replaced)
        self.obstacle_data.append(val1)
      _x = self
      start = end
      end += 38
      (_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings,) = _get_struct_8Bf26B().unpack(str[start:end])
      self.system_warnings.peds_in_dz = bool(self.system_warnings.peds_in_dz)
      self.system_warnings.peds_fcw = bool(self.system_warnings.peds_fcw)
      self.system_warnings.error_valid = bool(self.system_warnings.error_valid)
      self.system_warnings.zero_speed = bool(self.system_warnings.zero_speed)
      self.system_warnings.headway_valid = bool(self.system_warnings.headway_valid)
      self.system_warnings.ldw_off = bool(self.system_warnings.ldw_off)
      self.system_warnings.left_ldw_on = bool(self.system_warnings.left_ldw_on)
      self.system_warnings.right_ldw_on = bool(self.system_warnings.right_ldw_on)
      self.system_warnings.fcw_on = bool(self.system_warnings.fcw_on)
      self.system_warnings.maintenance = bool(self.system_warnings.maintenance)
      self.system_warnings.failsafe = bool(self.system_warnings.failsafe)
      self.system_warnings.tsr_enabled = bool(self.system_warnings.tsr_enabled)
      self.system_warnings.hw_repeatable_enabled = bool(self.system_warnings.hw_repeatable_enabled)
      self.system_warnings.tamper_alert = bool(self.system_warnings.tamper_alert)
      self.car_info.high_beam = bool(self.car_info.high_beam)
      self.car_info.low_beam = bool(self.car_info.low_beam)
      self.car_info.wipers = bool(self.car_info.wipers)
      self.car_info.right_signal = bool(self.car_info.right_signal)
      self.car_info.left_signal = bool(self.car_info.left_signal)
      self.car_info.brake_signal = bool(self.car_info.brake_signal)
      self.car_info.wipers_available = bool(self.car_info.wipers_available)
      self.car_info.low_beam_available = bool(self.car_info.low_beam_available)
      self.car_info.high_beam_available = bool(self.car_info.high_beam_available)
      self.car_info.right_blink_available = bool(self.car_info.right_blink_available)
      self.car_info.left_blink_available = bool(self.car_info.left_blink_available)
      self.car_info.brake_available = bool(self.car_info.brake_available)
      self.car_info.speed_available = bool(self.car_info.speed_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tsr = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.TSR()
        _x = val1
        start = end
        end += 15
        (_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type,) = _get_struct_2B3fB().unpack(str[start:end])
        self.tsr.append(val1)
      _x = self
      start = end
      end += 56
      (_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939,) = _get_struct_9Bf43B().unpack(str[start:end])
      self.gyro.gyro_sensor_data_available = bool(self.gyro.gyro_sensor_data_available)
      start = end
      end += 16
      self.smart_adas.menu_ticks = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.smart_adas.menu_ticks = list(map(bool, self.smart_adas.menu_ticks))
      start = end
      end += 16
      self.smart_adas.advanced_menu_ticks = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.smart_adas.advanced_menu_ticks = list(map(bool, self.smart_adas.advanced_menu_ticks))
      _x = self
      start = end
      end += 18
      (_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number,) = _get_struct_IQ6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_2B3fB = None
def _get_struct_2B3fB():
    global _struct_2B3fB
    if _struct_2B3fB is None:
        _struct_2B3fB = struct.Struct("<2B3fB")
    return _struct_2B3fB
_struct_2fB2f9B = None
def _get_struct_2fB2f9B():
    global _struct_2fB2f9B
    if _struct_2fB2f9B is None:
        _struct_2fB2f9B = struct.Struct("<2fB2f9B")
    return _struct_2fB2f9B
_struct_3B6f4B6fB2fB2f2B = None
def _get_struct_3B6f4B6fB2fB2f2B():
    global _struct_3B6f4B6fB2fB2f2B
    if _struct_3B6f4B6fB2fB2f2B is None:
        _struct_3B6f4B6fB2fB2f2B = struct.Struct("<3B6f4B6fB2fB2f2B")
    return _struct_3B6f4B6fB2fB2f2B
_struct_3B6fB = None
def _get_struct_3B6fB():
    global _struct_3B6fB
    if _struct_3B6fB is None:
        _struct_3B6fB = struct.Struct("<3B6fB")
    return _struct_3B6fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8Bf26B = None
def _get_struct_8Bf26B():
    global _struct_8Bf26B
    if _struct_8Bf26B is None:
        _struct_8Bf26B = struct.Struct("<8Bf26B")
    return _struct_8Bf26B
_struct_9Bf43B = None
def _get_struct_9Bf43B():
    global _struct_9Bf43B
    if _struct_9Bf43B is None:
        _struct_9Bf43B = struct.Struct("<9Bf43B")
    return _struct_9Bf43B
_struct_B3f6B2f3B2f2B3fBf = None
def _get_struct_B3f6B2f3B2f2B3fBf():
    global _struct_B3f6B2f3B2f2B3fBf
    if _struct_B3f6B2f3B2f2B3fBf is None:
        _struct_B3f6B2f3B2f2B3fBf = struct.Struct("<B3f6B2f3B2f2B3fBf")
    return _struct_B3f6B2f3B2f2B3fBf
_struct_IQ6B = None
def _get_struct_IQ6B():
    global _struct_IQ6B
    if _struct_IQ6B is None:
        _struct_IQ6B = struct.Struct("<IQ6B")
    return _struct_IQ6B
