# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/CarInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CarInfo(genpy.Message):
  _md5sum = "50aff2fafecf310fa3fc9bcf4c9a5c85"
  _type = "mobileye_msgs/CarInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool high_beam
bool low_beam
bool wipers
bool right_signal
bool left_signal
bool brake_signal
bool wipers_available
bool low_beam_available
bool high_beam_available
bool right_blink_available
bool left_blink_available
bool brake_available
bool speed_available
uint8 speed
uint8 shield_plus_settings"""
  __slots__ = ['high_beam','low_beam','wipers','right_signal','left_signal','brake_signal','wipers_available','low_beam_available','high_beam_available','right_blink_available','left_blink_available','brake_available','speed_available','speed','shield_plus_settings']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       high_beam,low_beam,wipers,right_signal,left_signal,brake_signal,wipers_available,low_beam_available,high_beam_available,right_blink_available,left_blink_available,brake_available,speed_available,speed,shield_plus_settings

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CarInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.high_beam is None:
        self.high_beam = False
      if self.low_beam is None:
        self.low_beam = False
      if self.wipers is None:
        self.wipers = False
      if self.right_signal is None:
        self.right_signal = False
      if self.left_signal is None:
        self.left_signal = False
      if self.brake_signal is None:
        self.brake_signal = False
      if self.wipers_available is None:
        self.wipers_available = False
      if self.low_beam_available is None:
        self.low_beam_available = False
      if self.high_beam_available is None:
        self.high_beam_available = False
      if self.right_blink_available is None:
        self.right_blink_available = False
      if self.left_blink_available is None:
        self.left_blink_available = False
      if self.brake_available is None:
        self.brake_available = False
      if self.speed_available is None:
        self.speed_available = False
      if self.speed is None:
        self.speed = 0
      if self.shield_plus_settings is None:
        self.shield_plus_settings = 0
    else:
      self.high_beam = False
      self.low_beam = False
      self.wipers = False
      self.right_signal = False
      self.left_signal = False
      self.brake_signal = False
      self.wipers_available = False
      self.low_beam_available = False
      self.high_beam_available = False
      self.right_blink_available = False
      self.left_blink_available = False
      self.brake_available = False
      self.speed_available = False
      self.speed = 0
      self.shield_plus_settings = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15B().pack(_x.high_beam, _x.low_beam, _x.wipers, _x.right_signal, _x.left_signal, _x.brake_signal, _x.wipers_available, _x.low_beam_available, _x.high_beam_available, _x.right_blink_available, _x.left_blink_available, _x.brake_available, _x.speed_available, _x.speed, _x.shield_plus_settings))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.high_beam, _x.low_beam, _x.wipers, _x.right_signal, _x.left_signal, _x.brake_signal, _x.wipers_available, _x.low_beam_available, _x.high_beam_available, _x.right_blink_available, _x.left_blink_available, _x.brake_available, _x.speed_available, _x.speed, _x.shield_plus_settings,) = _get_struct_15B().unpack(str[start:end])
      self.high_beam = bool(self.high_beam)
      self.low_beam = bool(self.low_beam)
      self.wipers = bool(self.wipers)
      self.right_signal = bool(self.right_signal)
      self.left_signal = bool(self.left_signal)
      self.brake_signal = bool(self.brake_signal)
      self.wipers_available = bool(self.wipers_available)
      self.low_beam_available = bool(self.low_beam_available)
      self.high_beam_available = bool(self.high_beam_available)
      self.right_blink_available = bool(self.right_blink_available)
      self.left_blink_available = bool(self.left_blink_available)
      self.brake_available = bool(self.brake_available)
      self.speed_available = bool(self.speed_available)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15B().pack(_x.high_beam, _x.low_beam, _x.wipers, _x.right_signal, _x.left_signal, _x.brake_signal, _x.wipers_available, _x.low_beam_available, _x.high_beam_available, _x.right_blink_available, _x.left_blink_available, _x.brake_available, _x.speed_available, _x.speed, _x.shield_plus_settings))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.high_beam, _x.low_beam, _x.wipers, _x.right_signal, _x.left_signal, _x.brake_signal, _x.wipers_available, _x.low_beam_available, _x.high_beam_available, _x.right_blink_available, _x.left_blink_available, _x.brake_available, _x.speed_available, _x.speed, _x.shield_plus_settings,) = _get_struct_15B().unpack(str[start:end])
      self.high_beam = bool(self.high_beam)
      self.low_beam = bool(self.low_beam)
      self.wipers = bool(self.wipers)
      self.right_signal = bool(self.right_signal)
      self.left_signal = bool(self.left_signal)
      self.brake_signal = bool(self.brake_signal)
      self.wipers_available = bool(self.wipers_available)
      self.low_beam_available = bool(self.low_beam_available)
      self.high_beam_available = bool(self.high_beam_available)
      self.right_blink_available = bool(self.right_blink_available)
      self.left_blink_available = bool(self.left_blink_available)
      self.brake_available = bool(self.brake_available)
      self.speed_available = bool(self.speed_available)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15B = None
def _get_struct_15B():
    global _struct_15B
    if _struct_15B is None:
        _struct_15B = struct.Struct("<15B")
    return _struct_15B
