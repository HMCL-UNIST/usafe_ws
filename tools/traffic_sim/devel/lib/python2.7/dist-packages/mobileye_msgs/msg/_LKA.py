# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/LKA.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobileye_msgs.msg
import std_msgs.msg

class LKA(genpy.Message):
  _md5sum = "b5e3ba1f4afa652894372b06e4e02639"
  _type = "mobileye_msgs/LKA"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

LKAlane left_lane
LKAlane right_lane

ReferencePoints reference_points

uint8 number_of_next_lane_markers

LKAlane[] next_lane

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mobileye_msgs/LKAlane
uint8 lane_type
uint8 quality
uint8 model_degree

float32 position_parameter_c0
float32 curvature_parameter_c2
float32 curvature_derivative_c3
float32 width_marking

float32 heading_angle_parameter_c1
float32 view_range
bool view_range_availability

================================================================================
MSG: mobileye_msgs/ReferencePoints
float32 ref_point1_position
float32 ref_point1_distance
bool ref_point1_validity
float32 ref_point2_position
float32 ref_point2_distance
bool ref_point2_validity"""
  __slots__ = ['header','left_lane','right_lane','reference_points','number_of_next_lane_markers','next_lane']
  _slot_types = ['std_msgs/Header','mobileye_msgs/LKAlane','mobileye_msgs/LKAlane','mobileye_msgs/ReferencePoints','uint8','mobileye_msgs/LKAlane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_lane,right_lane,reference_points,number_of_next_lane_markers,next_lane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LKA, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane is None:
        self.left_lane = mobileye_msgs.msg.LKAlane()
      if self.right_lane is None:
        self.right_lane = mobileye_msgs.msg.LKAlane()
      if self.reference_points is None:
        self.reference_points = mobileye_msgs.msg.ReferencePoints()
      if self.number_of_next_lane_markers is None:
        self.number_of_next_lane_markers = 0
      if self.next_lane is None:
        self.next_lane = []
    else:
      self.header = std_msgs.msg.Header()
      self.left_lane = mobileye_msgs.msg.LKAlane()
      self.right_lane = mobileye_msgs.msg.LKAlane()
      self.reference_points = mobileye_msgs.msg.ReferencePoints()
      self.number_of_next_lane_markers = 0
      self.next_lane = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B6f4B6fB2fB2f2B().pack(_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers))
      length = len(self.next_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_lane:
        _x = val1
        buff.write(_get_struct_3B6fB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane is None:
        self.left_lane = mobileye_msgs.msg.LKAlane()
      if self.right_lane is None:
        self.right_lane = mobileye_msgs.msg.LKAlane()
      if self.reference_points is None:
        self.reference_points = mobileye_msgs.msg.ReferencePoints()
      if self.next_lane is None:
        self.next_lane = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers,) = _get_struct_3B6f4B6fB2fB2f2B().unpack(str[start:end])
      self.left_lane.view_range_availability = bool(self.left_lane.view_range_availability)
      self.right_lane.view_range_availability = bool(self.right_lane.view_range_availability)
      self.reference_points.ref_point1_validity = bool(self.reference_points.ref_point1_validity)
      self.reference_points.ref_point2_validity = bool(self.reference_points.ref_point2_validity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_lane = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.LKAlane()
        _x = val1
        start = end
        end += 28
        (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B6fB().unpack(str[start:end])
        val1.view_range_availability = bool(val1.view_range_availability)
        self.next_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B6f4B6fB2fB2f2B().pack(_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers))
      length = len(self.next_lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.next_lane:
        _x = val1
        buff.write(_get_struct_3B6fB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_lane is None:
        self.left_lane = mobileye_msgs.msg.LKAlane()
      if self.right_lane is None:
        self.right_lane = mobileye_msgs.msg.LKAlane()
      if self.reference_points is None:
        self.reference_points = mobileye_msgs.msg.ReferencePoints()
      if self.next_lane is None:
        self.next_lane = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.left_lane.lane_type, _x.left_lane.quality, _x.left_lane.model_degree, _x.left_lane.position_parameter_c0, _x.left_lane.curvature_parameter_c2, _x.left_lane.curvature_derivative_c3, _x.left_lane.width_marking, _x.left_lane.heading_angle_parameter_c1, _x.left_lane.view_range, _x.left_lane.view_range_availability, _x.right_lane.lane_type, _x.right_lane.quality, _x.right_lane.model_degree, _x.right_lane.position_parameter_c0, _x.right_lane.curvature_parameter_c2, _x.right_lane.curvature_derivative_c3, _x.right_lane.width_marking, _x.right_lane.heading_angle_parameter_c1, _x.right_lane.view_range, _x.right_lane.view_range_availability, _x.reference_points.ref_point1_position, _x.reference_points.ref_point1_distance, _x.reference_points.ref_point1_validity, _x.reference_points.ref_point2_position, _x.reference_points.ref_point2_distance, _x.reference_points.ref_point2_validity, _x.number_of_next_lane_markers,) = _get_struct_3B6f4B6fB2fB2f2B().unpack(str[start:end])
      self.left_lane.view_range_availability = bool(self.left_lane.view_range_availability)
      self.right_lane.view_range_availability = bool(self.right_lane.view_range_availability)
      self.reference_points.ref_point1_validity = bool(self.reference_points.ref_point1_validity)
      self.reference_points.ref_point2_validity = bool(self.reference_points.ref_point2_validity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.next_lane = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.LKAlane()
        _x = val1
        start = end
        end += 28
        (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B6fB().unpack(str[start:end])
        val1.view_range_availability = bool(val1.view_range_availability)
        self.next_lane.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B6f4B6fB2fB2f2B = None
def _get_struct_3B6f4B6fB2fB2f2B():
    global _struct_3B6f4B6fB2fB2f2B
    if _struct_3B6f4B6fB2fB2f2B is None:
        _struct_3B6f4B6fB2fB2f2B = struct.Struct("<3B6f4B6fB2fB2f2B")
    return _struct_3B6f4B6fB2fB2f2B
_struct_3B6fB = None
def _get_struct_3B6fB():
    global _struct_3B6fB
    if _struct_3B6fB is None:
        _struct_3B6fB = struct.Struct("<3B6fB")
    return _struct_3B6fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
