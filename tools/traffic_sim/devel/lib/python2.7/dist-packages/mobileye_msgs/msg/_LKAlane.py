# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/LKAlane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LKAlane(genpy.Message):
  _md5sum = "7b414dd7d22f435b47d4035bf3d8fde4"
  _type = "mobileye_msgs/LKAlane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 lane_type
uint8 quality
uint8 model_degree

float32 position_parameter_c0
float32 curvature_parameter_c2
float32 curvature_derivative_c3
float32 width_marking

float32 heading_angle_parameter_c1
float32 view_range
bool view_range_availability
"""
  __slots__ = ['lane_type','quality','model_degree','position_parameter_c0','curvature_parameter_c2','curvature_derivative_c3','width_marking','heading_angle_parameter_c1','view_range','view_range_availability']
  _slot_types = ['uint8','uint8','uint8','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_type,quality,model_degree,position_parameter_c0,curvature_parameter_c2,curvature_derivative_c3,width_marking,heading_angle_parameter_c1,view_range,view_range_availability

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LKAlane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane_type is None:
        self.lane_type = 0
      if self.quality is None:
        self.quality = 0
      if self.model_degree is None:
        self.model_degree = 0
      if self.position_parameter_c0 is None:
        self.position_parameter_c0 = 0.
      if self.curvature_parameter_c2 is None:
        self.curvature_parameter_c2 = 0.
      if self.curvature_derivative_c3 is None:
        self.curvature_derivative_c3 = 0.
      if self.width_marking is None:
        self.width_marking = 0.
      if self.heading_angle_parameter_c1 is None:
        self.heading_angle_parameter_c1 = 0.
      if self.view_range is None:
        self.view_range = 0.
      if self.view_range_availability is None:
        self.view_range_availability = False
    else:
      self.lane_type = 0
      self.quality = 0
      self.model_degree = 0
      self.position_parameter_c0 = 0.
      self.curvature_parameter_c2 = 0.
      self.curvature_derivative_c3 = 0.
      self.width_marking = 0.
      self.heading_angle_parameter_c1 = 0.
      self.view_range = 0.
      self.view_range_availability = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B6fB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B6fB().unpack(str[start:end])
      self.view_range_availability = bool(self.view_range_availability)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B6fB().pack(_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.lane_type, _x.quality, _x.model_degree, _x.position_parameter_c0, _x.curvature_parameter_c2, _x.curvature_derivative_c3, _x.width_marking, _x.heading_angle_parameter_c1, _x.view_range, _x.view_range_availability,) = _get_struct_3B6fB().unpack(str[start:end])
      self.view_range_availability = bool(self.view_range_availability)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B6fB = None
def _get_struct_3B6fB():
    global _struct_3B6fB
    if _struct_3B6fB is None:
        _struct_3B6fB = struct.Struct("<3B6fB")
    return _struct_3B6fB
