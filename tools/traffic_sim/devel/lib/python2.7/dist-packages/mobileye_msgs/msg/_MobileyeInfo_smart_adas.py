# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/MobileyeInfo_smart_adas.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobileye_msgs.msg
import std_msgs.msg

class MobileyeInfo_smart_adas(genpy.Message):
  _md5sum = "1b63fad4adb86b289d19be4eadb354a3"
  _type = "mobileye_msgs/MobileyeInfo_smart_adas"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

SmartADAS smart_adas

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mobileye_msgs/SmartADAS
uint8 persistent_on_off
uint8 volume_level
uint8 hmw_level
uint8 ldw_volume_level
uint8 hmw_volume_level
uint8 ldw_level
uint8 pedestrian_warning_level
uint8 sli_warning_level
uint8 blinker_reminder_level
uint8 virtual_bumper_level
uint8 hw_repeatable_level

uint8 buzzer_min_volume
uint8 buzzer_max_volume
uint8 buzzer_hmw_min_volume
uint8 buzzer_hmw_max_volume
uint8 buzzer_ldw_min_volume
uint8 buzzer_ldw_max_volume
uint8 ewiii_speed_indication
uint8 disable_system_off
uint8 calibration_source
uint8 ldw_min_value
uint8 ldw_max_value
uint8 ldw_speed
uint8 ped_min_value
uint8 ped_max_value
uint8 speed_for_high_low_beam_control
uint8 virtual_bumper_min_value
uint8 virtual_bumper_max_value
uint8 blinker_reminder_min_value
uint8 blinker_reminder_max_value

uint8 hmw_min_value
uint8 hmw_max_value
uint8 hmw_repeatable_min_value
uint8 hmw_repeatable_max_value
uint8 sli_min_value
uint8 sli_max_value
uint8 sli_delta_round_step
uint8 sli_delta_round_upwards
uint8 country_code
uint8 sli_unit_speed
uint8 tamper_alert_on_frames
uint8 tamper_alert_off_frames
uint8 tamper_alert_enable_j1939

bool[16] menu_ticks

bool[16] advanced_menu_ticks"""
  __slots__ = ['header','smart_adas']
  _slot_types = ['std_msgs/Header','mobileye_msgs/SmartADAS']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,smart_adas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MobileyeInfo_smart_adas, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
    else:
      self.header = std_msgs.msg.Header()
      self.smart_adas = mobileye_msgs.msg.SmartADAS()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_43B().pack(_x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939))
      buff.write(_get_struct_16B().pack(*self.smart_adas.menu_ticks))
      buff.write(_get_struct_16B().pack(*self.smart_adas.advanced_menu_ticks))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939,) = _get_struct_43B().unpack(str[start:end])
      start = end
      end += 16
      self.smart_adas.menu_ticks = _get_struct_16B().unpack(str[start:end])
      self.smart_adas.menu_ticks = list(map(bool, self.smart_adas.menu_ticks))
      start = end
      end += 16
      self.smart_adas.advanced_menu_ticks = _get_struct_16B().unpack(str[start:end])
      self.smart_adas.advanced_menu_ticks = list(map(bool, self.smart_adas.advanced_menu_ticks))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_43B().pack(_x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939))
      buff.write(self.smart_adas.menu_ticks.tostring())
      buff.write(self.smart_adas.advanced_menu_ticks.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939,) = _get_struct_43B().unpack(str[start:end])
      start = end
      end += 16
      self.smart_adas.menu_ticks = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.smart_adas.menu_ticks = list(map(bool, self.smart_adas.menu_ticks))
      start = end
      end += 16
      self.smart_adas.advanced_menu_ticks = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.smart_adas.advanced_menu_ticks = list(map(bool, self.smart_adas.advanced_menu_ticks))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_43B = None
def _get_struct_43B():
    global _struct_43B
    if _struct_43B is None:
        _struct_43B = struct.Struct("<43B")
    return _struct_43B
