# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye_msgs/StandardCAN.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobileye_msgs.msg

class StandardCAN(genpy.Message):
  _md5sum = "54e4cfc9bd8b43c069770d7bbb9295cd"
  _type = "mobileye_msgs/StandardCAN"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """SystemWarnings system_warnings
CarInfo car_info
TSR[] tsr
TSRVisionOnlySign tsr_vision_only
Gyro gyro
SmartADAS smart_adas
SeeQ seeq
================================================================================
MSG: mobileye_msgs/SystemWarnings
uint8 sound_type
bool peds_in_dz
bool peds_fcw
uint8 time_indicator

bool error_valid
uint8 error_code
bool zero_speed
bool headway_valid
float32 headway_measurement

bool ldw_off
bool left_ldw_on
bool right_ldw_on
bool fcw_on
bool maintenance
bool failsafe

bool tsr_enabled
bool hw_repeatable_enabled
uint8 headway_warning_level
uint8 tsr_warning_level
bool tamper_alert
================================================================================
MSG: mobileye_msgs/CarInfo
bool high_beam
bool low_beam
bool wipers
bool right_signal
bool left_signal
bool brake_signal
bool wipers_available
bool low_beam_available
bool high_beam_available
bool right_blink_available
bool left_blink_available
bool brake_available
bool speed_available
uint8 speed
uint8 shield_plus_settings
================================================================================
MSG: mobileye_msgs/TSR
uint8 vision_only_sign_type
uint8 supplementary_sign_type
float32 sign_position_x
float32 sign_position_y
float32 sign_position_z
uint8 filter_type
================================================================================
MSG: mobileye_msgs/TSRVisionOnlySign
uint8 vision_only_sign_type_display_1
uint8 vision_only_sign_type_display_2
uint8 vision_only_sign_type_display_3
uint8 vision_only_sign_type_display_4

uint8 supplementary_sign_type_display_1
uint8 supplementary_sign_type_display_2
uint8 supplementary_sign_type_display_3
uint8 supplementary_sign_type_display_4
================================================================================
MSG: mobileye_msgs/Gyro
bool gyro_sensor_data_available
float32 x_axis_data
================================================================================
MSG: mobileye_msgs/SmartADAS
uint8 persistent_on_off
uint8 volume_level
uint8 hmw_level
uint8 ldw_volume_level
uint8 hmw_volume_level
uint8 ldw_level
uint8 pedestrian_warning_level
uint8 sli_warning_level
uint8 blinker_reminder_level
uint8 virtual_bumper_level
uint8 hw_repeatable_level

uint8 buzzer_min_volume
uint8 buzzer_max_volume
uint8 buzzer_hmw_min_volume
uint8 buzzer_hmw_max_volume
uint8 buzzer_ldw_min_volume
uint8 buzzer_ldw_max_volume
uint8 ewiii_speed_indication
uint8 disable_system_off
uint8 calibration_source
uint8 ldw_min_value
uint8 ldw_max_value
uint8 ldw_speed
uint8 ped_min_value
uint8 ped_max_value
uint8 speed_for_high_low_beam_control
uint8 virtual_bumper_min_value
uint8 virtual_bumper_max_value
uint8 blinker_reminder_min_value
uint8 blinker_reminder_max_value

uint8 hmw_min_value
uint8 hmw_max_value
uint8 hmw_repeatable_min_value
uint8 hmw_repeatable_max_value
uint8 sli_min_value
uint8 sli_max_value
uint8 sli_delta_round_step
uint8 sli_delta_round_upwards
uint8 country_code
uint8 sli_unit_speed
uint8 tamper_alert_on_frames
uint8 tamper_alert_off_frames
uint8 tamper_alert_enable_j1939

bool[16] menu_ticks

bool[16] advanced_menu_ticks
================================================================================
MSG: mobileye_msgs/SeeQ
uint32 serial_number
uint64 production_date

uint8 brain_version_major
uint8 brain_version_minor
uint8 mest_version_major
uint8 mest_version_minor
uint8 mest_version_subminor
uint8 mest_version_patch_number"""
  __slots__ = ['system_warnings','car_info','tsr','tsr_vision_only','gyro','smart_adas','seeq']
  _slot_types = ['mobileye_msgs/SystemWarnings','mobileye_msgs/CarInfo','mobileye_msgs/TSR[]','mobileye_msgs/TSRVisionOnlySign','mobileye_msgs/Gyro','mobileye_msgs/SmartADAS','mobileye_msgs/SeeQ']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       system_warnings,car_info,tsr,tsr_vision_only,gyro,smart_adas,seeq

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StandardCAN, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.system_warnings is None:
        self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      if self.car_info is None:
        self.car_info = mobileye_msgs.msg.CarInfo()
      if self.tsr is None:
        self.tsr = []
      if self.tsr_vision_only is None:
        self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      if self.gyro is None:
        self.gyro = mobileye_msgs.msg.Gyro()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      if self.seeq is None:
        self.seeq = mobileye_msgs.msg.SeeQ()
    else:
      self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      self.car_info = mobileye_msgs.msg.CarInfo()
      self.tsr = []
      self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      self.gyro = mobileye_msgs.msg.Gyro()
      self.smart_adas = mobileye_msgs.msg.SmartADAS()
      self.seeq = mobileye_msgs.msg.SeeQ()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8Bf26B().pack(_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings))
      length = len(self.tsr)
      buff.write(_struct_I.pack(length))
      for val1 in self.tsr:
        _x = val1
        buff.write(_get_struct_2B3fB().pack(_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type))
      _x = self
      buff.write(_get_struct_9Bf43B().pack(_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939))
      buff.write(_get_struct_16B().pack(*self.smart_adas.menu_ticks))
      buff.write(_get_struct_16B().pack(*self.smart_adas.advanced_menu_ticks))
      _x = self
      buff.write(_get_struct_IQ6B().pack(_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.system_warnings is None:
        self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      if self.car_info is None:
        self.car_info = mobileye_msgs.msg.CarInfo()
      if self.tsr is None:
        self.tsr = None
      if self.tsr_vision_only is None:
        self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      if self.gyro is None:
        self.gyro = mobileye_msgs.msg.Gyro()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      if self.seeq is None:
        self.seeq = mobileye_msgs.msg.SeeQ()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings,) = _get_struct_8Bf26B().unpack(str[start:end])
      self.system_warnings.peds_in_dz = bool(self.system_warnings.peds_in_dz)
      self.system_warnings.peds_fcw = bool(self.system_warnings.peds_fcw)
      self.system_warnings.error_valid = bool(self.system_warnings.error_valid)
      self.system_warnings.zero_speed = bool(self.system_warnings.zero_speed)
      self.system_warnings.headway_valid = bool(self.system_warnings.headway_valid)
      self.system_warnings.ldw_off = bool(self.system_warnings.ldw_off)
      self.system_warnings.left_ldw_on = bool(self.system_warnings.left_ldw_on)
      self.system_warnings.right_ldw_on = bool(self.system_warnings.right_ldw_on)
      self.system_warnings.fcw_on = bool(self.system_warnings.fcw_on)
      self.system_warnings.maintenance = bool(self.system_warnings.maintenance)
      self.system_warnings.failsafe = bool(self.system_warnings.failsafe)
      self.system_warnings.tsr_enabled = bool(self.system_warnings.tsr_enabled)
      self.system_warnings.hw_repeatable_enabled = bool(self.system_warnings.hw_repeatable_enabled)
      self.system_warnings.tamper_alert = bool(self.system_warnings.tamper_alert)
      self.car_info.high_beam = bool(self.car_info.high_beam)
      self.car_info.low_beam = bool(self.car_info.low_beam)
      self.car_info.wipers = bool(self.car_info.wipers)
      self.car_info.right_signal = bool(self.car_info.right_signal)
      self.car_info.left_signal = bool(self.car_info.left_signal)
      self.car_info.brake_signal = bool(self.car_info.brake_signal)
      self.car_info.wipers_available = bool(self.car_info.wipers_available)
      self.car_info.low_beam_available = bool(self.car_info.low_beam_available)
      self.car_info.high_beam_available = bool(self.car_info.high_beam_available)
      self.car_info.right_blink_available = bool(self.car_info.right_blink_available)
      self.car_info.left_blink_available = bool(self.car_info.left_blink_available)
      self.car_info.brake_available = bool(self.car_info.brake_available)
      self.car_info.speed_available = bool(self.car_info.speed_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tsr = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.TSR()
        _x = val1
        start = end
        end += 15
        (_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type,) = _get_struct_2B3fB().unpack(str[start:end])
        self.tsr.append(val1)
      _x = self
      start = end
      end += 56
      (_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939,) = _get_struct_9Bf43B().unpack(str[start:end])
      self.gyro.gyro_sensor_data_available = bool(self.gyro.gyro_sensor_data_available)
      start = end
      end += 16
      self.smart_adas.menu_ticks = _get_struct_16B().unpack(str[start:end])
      self.smart_adas.menu_ticks = list(map(bool, self.smart_adas.menu_ticks))
      start = end
      end += 16
      self.smart_adas.advanced_menu_ticks = _get_struct_16B().unpack(str[start:end])
      self.smart_adas.advanced_menu_ticks = list(map(bool, self.smart_adas.advanced_menu_ticks))
      _x = self
      start = end
      end += 18
      (_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number,) = _get_struct_IQ6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8Bf26B().pack(_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings))
      length = len(self.tsr)
      buff.write(_struct_I.pack(length))
      for val1 in self.tsr:
        _x = val1
        buff.write(_get_struct_2B3fB().pack(_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type))
      _x = self
      buff.write(_get_struct_9Bf43B().pack(_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939))
      buff.write(self.smart_adas.menu_ticks.tostring())
      buff.write(self.smart_adas.advanced_menu_ticks.tostring())
      _x = self
      buff.write(_get_struct_IQ6B().pack(_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.system_warnings is None:
        self.system_warnings = mobileye_msgs.msg.SystemWarnings()
      if self.car_info is None:
        self.car_info = mobileye_msgs.msg.CarInfo()
      if self.tsr is None:
        self.tsr = None
      if self.tsr_vision_only is None:
        self.tsr_vision_only = mobileye_msgs.msg.TSRVisionOnlySign()
      if self.gyro is None:
        self.gyro = mobileye_msgs.msg.Gyro()
      if self.smart_adas is None:
        self.smart_adas = mobileye_msgs.msg.SmartADAS()
      if self.seeq is None:
        self.seeq = mobileye_msgs.msg.SeeQ()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.system_warnings.sound_type, _x.system_warnings.peds_in_dz, _x.system_warnings.peds_fcw, _x.system_warnings.time_indicator, _x.system_warnings.error_valid, _x.system_warnings.error_code, _x.system_warnings.zero_speed, _x.system_warnings.headway_valid, _x.system_warnings.headway_measurement, _x.system_warnings.ldw_off, _x.system_warnings.left_ldw_on, _x.system_warnings.right_ldw_on, _x.system_warnings.fcw_on, _x.system_warnings.maintenance, _x.system_warnings.failsafe, _x.system_warnings.tsr_enabled, _x.system_warnings.hw_repeatable_enabled, _x.system_warnings.headway_warning_level, _x.system_warnings.tsr_warning_level, _x.system_warnings.tamper_alert, _x.car_info.high_beam, _x.car_info.low_beam, _x.car_info.wipers, _x.car_info.right_signal, _x.car_info.left_signal, _x.car_info.brake_signal, _x.car_info.wipers_available, _x.car_info.low_beam_available, _x.car_info.high_beam_available, _x.car_info.right_blink_available, _x.car_info.left_blink_available, _x.car_info.brake_available, _x.car_info.speed_available, _x.car_info.speed, _x.car_info.shield_plus_settings,) = _get_struct_8Bf26B().unpack(str[start:end])
      self.system_warnings.peds_in_dz = bool(self.system_warnings.peds_in_dz)
      self.system_warnings.peds_fcw = bool(self.system_warnings.peds_fcw)
      self.system_warnings.error_valid = bool(self.system_warnings.error_valid)
      self.system_warnings.zero_speed = bool(self.system_warnings.zero_speed)
      self.system_warnings.headway_valid = bool(self.system_warnings.headway_valid)
      self.system_warnings.ldw_off = bool(self.system_warnings.ldw_off)
      self.system_warnings.left_ldw_on = bool(self.system_warnings.left_ldw_on)
      self.system_warnings.right_ldw_on = bool(self.system_warnings.right_ldw_on)
      self.system_warnings.fcw_on = bool(self.system_warnings.fcw_on)
      self.system_warnings.maintenance = bool(self.system_warnings.maintenance)
      self.system_warnings.failsafe = bool(self.system_warnings.failsafe)
      self.system_warnings.tsr_enabled = bool(self.system_warnings.tsr_enabled)
      self.system_warnings.hw_repeatable_enabled = bool(self.system_warnings.hw_repeatable_enabled)
      self.system_warnings.tamper_alert = bool(self.system_warnings.tamper_alert)
      self.car_info.high_beam = bool(self.car_info.high_beam)
      self.car_info.low_beam = bool(self.car_info.low_beam)
      self.car_info.wipers = bool(self.car_info.wipers)
      self.car_info.right_signal = bool(self.car_info.right_signal)
      self.car_info.left_signal = bool(self.car_info.left_signal)
      self.car_info.brake_signal = bool(self.car_info.brake_signal)
      self.car_info.wipers_available = bool(self.car_info.wipers_available)
      self.car_info.low_beam_available = bool(self.car_info.low_beam_available)
      self.car_info.high_beam_available = bool(self.car_info.high_beam_available)
      self.car_info.right_blink_available = bool(self.car_info.right_blink_available)
      self.car_info.left_blink_available = bool(self.car_info.left_blink_available)
      self.car_info.brake_available = bool(self.car_info.brake_available)
      self.car_info.speed_available = bool(self.car_info.speed_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tsr = []
      for i in range(0, length):
        val1 = mobileye_msgs.msg.TSR()
        _x = val1
        start = end
        end += 15
        (_x.vision_only_sign_type, _x.supplementary_sign_type, _x.sign_position_x, _x.sign_position_y, _x.sign_position_z, _x.filter_type,) = _get_struct_2B3fB().unpack(str[start:end])
        self.tsr.append(val1)
      _x = self
      start = end
      end += 56
      (_x.tsr_vision_only.vision_only_sign_type_display_1, _x.tsr_vision_only.vision_only_sign_type_display_2, _x.tsr_vision_only.vision_only_sign_type_display_3, _x.tsr_vision_only.vision_only_sign_type_display_4, _x.tsr_vision_only.supplementary_sign_type_display_1, _x.tsr_vision_only.supplementary_sign_type_display_2, _x.tsr_vision_only.supplementary_sign_type_display_3, _x.tsr_vision_only.supplementary_sign_type_display_4, _x.gyro.gyro_sensor_data_available, _x.gyro.x_axis_data, _x.smart_adas.persistent_on_off, _x.smart_adas.volume_level, _x.smart_adas.hmw_level, _x.smart_adas.ldw_volume_level, _x.smart_adas.hmw_volume_level, _x.smart_adas.ldw_level, _x.smart_adas.pedestrian_warning_level, _x.smart_adas.sli_warning_level, _x.smart_adas.blinker_reminder_level, _x.smart_adas.virtual_bumper_level, _x.smart_adas.hw_repeatable_level, _x.smart_adas.buzzer_min_volume, _x.smart_adas.buzzer_max_volume, _x.smart_adas.buzzer_hmw_min_volume, _x.smart_adas.buzzer_hmw_max_volume, _x.smart_adas.buzzer_ldw_min_volume, _x.smart_adas.buzzer_ldw_max_volume, _x.smart_adas.ewiii_speed_indication, _x.smart_adas.disable_system_off, _x.smart_adas.calibration_source, _x.smart_adas.ldw_min_value, _x.smart_adas.ldw_max_value, _x.smart_adas.ldw_speed, _x.smart_adas.ped_min_value, _x.smart_adas.ped_max_value, _x.smart_adas.speed_for_high_low_beam_control, _x.smart_adas.virtual_bumper_min_value, _x.smart_adas.virtual_bumper_max_value, _x.smart_adas.blinker_reminder_min_value, _x.smart_adas.blinker_reminder_max_value, _x.smart_adas.hmw_min_value, _x.smart_adas.hmw_max_value, _x.smart_adas.hmw_repeatable_min_value, _x.smart_adas.hmw_repeatable_max_value, _x.smart_adas.sli_min_value, _x.smart_adas.sli_max_value, _x.smart_adas.sli_delta_round_step, _x.smart_adas.sli_delta_round_upwards, _x.smart_adas.country_code, _x.smart_adas.sli_unit_speed, _x.smart_adas.tamper_alert_on_frames, _x.smart_adas.tamper_alert_off_frames, _x.smart_adas.tamper_alert_enable_j1939,) = _get_struct_9Bf43B().unpack(str[start:end])
      self.gyro.gyro_sensor_data_available = bool(self.gyro.gyro_sensor_data_available)
      start = end
      end += 16
      self.smart_adas.menu_ticks = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.smart_adas.menu_ticks = list(map(bool, self.smart_adas.menu_ticks))
      start = end
      end += 16
      self.smart_adas.advanced_menu_ticks = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.smart_adas.advanced_menu_ticks = list(map(bool, self.smart_adas.advanced_menu_ticks))
      _x = self
      start = end
      end += 18
      (_x.seeq.serial_number, _x.seeq.production_date, _x.seeq.brain_version_major, _x.seeq.brain_version_minor, _x.seeq.mest_version_major, _x.seeq.mest_version_minor, _x.seeq.mest_version_subminor, _x.seeq.mest_version_patch_number,) = _get_struct_IQ6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_2B3fB = None
def _get_struct_2B3fB():
    global _struct_2B3fB
    if _struct_2B3fB is None:
        _struct_2B3fB = struct.Struct("<2B3fB")
    return _struct_2B3fB
_struct_8Bf26B = None
def _get_struct_8Bf26B():
    global _struct_8Bf26B
    if _struct_8Bf26B is None:
        _struct_8Bf26B = struct.Struct("<8Bf26B")
    return _struct_8Bf26B
_struct_9Bf43B = None
def _get_struct_9Bf43B():
    global _struct_9Bf43B
    if _struct_9Bf43B is None:
        _struct_9Bf43B = struct.Struct("<9Bf43B")
    return _struct_9Bf43B
_struct_IQ6B = None
def _get_struct_IQ6B():
    global _struct_IQ6B
    if _struct_IQ6B is None:
        _struct_IQ6B = struct.Struct("<IQ6B")
    return _struct_IQ6B
