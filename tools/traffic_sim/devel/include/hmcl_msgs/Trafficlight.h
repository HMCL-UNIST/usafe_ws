// Generated by gencpp from file hmcl_msgs/Trafficlight.msg
// DO NOT EDIT!


#ifndef HMCL_MSGS_MESSAGE_TRAFFICLIGHT_H
#define HMCL_MSGS_MESSAGE_TRAFFICLIGHT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <hmcl_msgs/TrafficlightBulb.h>
#include <hmcl_msgs/TrafficlightBulb.h>
#include <hmcl_msgs/TrafficlightBulb.h>
#include <geometry_msgs/Pose.h>

namespace hmcl_msgs
{
template <class ContainerAllocator>
struct Trafficlight_
{
  typedef Trafficlight_<ContainerAllocator> Type;

  Trafficlight_()
    : header()
    , id(0)
    , lanelet_id(0)
    , pose()
    , left_light()
    , straight_light()
    , right_light()
    , valid_stop_line(false)
    , stop_line()  {
    }
  Trafficlight_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , lanelet_id(0)
    , pose(_alloc)
    , left_light(_alloc)
    , straight_light(_alloc)
    , right_light(_alloc)
    , valid_stop_line(false)
    , stop_line(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _lanelet_id_type;
  _lanelet_id_type lanelet_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::hmcl_msgs::TrafficlightBulb_<ContainerAllocator>  _left_light_type;
  _left_light_type left_light;

   typedef  ::hmcl_msgs::TrafficlightBulb_<ContainerAllocator>  _straight_light_type;
  _straight_light_type straight_light;

   typedef  ::hmcl_msgs::TrafficlightBulb_<ContainerAllocator>  _right_light_type;
  _right_light_type right_light;

   typedef uint8_t _valid_stop_line_type;
  _valid_stop_line_type valid_stop_line;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _stop_line_type;
  _stop_line_type stop_line;





  typedef boost::shared_ptr< ::hmcl_msgs::Trafficlight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmcl_msgs::Trafficlight_<ContainerAllocator> const> ConstPtr;

}; // struct Trafficlight_

typedef ::hmcl_msgs::Trafficlight_<std::allocator<void> > Trafficlight;

typedef boost::shared_ptr< ::hmcl_msgs::Trafficlight > TrafficlightPtr;
typedef boost::shared_ptr< ::hmcl_msgs::Trafficlight const> TrafficlightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmcl_msgs::Trafficlight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmcl_msgs::Trafficlight_<ContainerAllocator1> & lhs, const ::hmcl_msgs::Trafficlight_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.lanelet_id == rhs.lanelet_id &&
    lhs.pose == rhs.pose &&
    lhs.left_light == rhs.left_light &&
    lhs.straight_light == rhs.straight_light &&
    lhs.right_light == rhs.right_light &&
    lhs.valid_stop_line == rhs.valid_stop_line &&
    lhs.stop_line == rhs.stop_line;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmcl_msgs::Trafficlight_<ContainerAllocator1> & lhs, const ::hmcl_msgs::Trafficlight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmcl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::Trafficlight_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::Trafficlight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::Trafficlight_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8bcc1bd70d49e0e7bdd9aa331d45dc1";
  }

  static const char* value(const ::hmcl_msgs::Trafficlight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8bcc1bd70d49e0eULL;
  static const uint64_t static_value2 = 0x7bdd9aa331d45dc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmcl_msgs/Trafficlight";
  }

  static const char* value(const ::hmcl_msgs::Trafficlight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 id\n"
"int32 lanelet_id\n"
"geometry_msgs/Pose pose\n"
"TrafficlightBulb left_light\n"
"TrafficlightBulb straight_light\n"
"TrafficlightBulb right_light\n"
"bool valid_stop_line\n"
"geometry_msgs/Pose stop_line\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: hmcl_msgs/TrafficlightBulb\n"
"int32 id\n"
"int32 light_status # 0 red, 1 green, 2 yellow \n"
;
  }

  static const char* value(const ::hmcl_msgs::Trafficlight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.lanelet_id);
      stream.next(m.pose);
      stream.next(m.left_light);
      stream.next(m.straight_light);
      stream.next(m.right_light);
      stream.next(m.valid_stop_line);
      stream.next(m.stop_line);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trafficlight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmcl_msgs::Trafficlight_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "lanelet_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lanelet_id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "left_light: ";
    s << std::endl;
    Printer< ::hmcl_msgs::TrafficlightBulb_<ContainerAllocator> >::stream(s, indent + "  ", v.left_light);
    s << indent << "straight_light: ";
    s << std::endl;
    Printer< ::hmcl_msgs::TrafficlightBulb_<ContainerAllocator> >::stream(s, indent + "  ", v.straight_light);
    s << indent << "right_light: ";
    s << std::endl;
    Printer< ::hmcl_msgs::TrafficlightBulb_<ContainerAllocator> >::stream(s, indent + "  ", v.right_light);
    s << indent << "valid_stop_line: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_stop_line);
    s << indent << "stop_line: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_line);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMCL_MSGS_MESSAGE_TRAFFICLIGHT_H
