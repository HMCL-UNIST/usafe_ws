// Generated by gencpp from file hmcl_msgs/VehicleLight.msg
// DO NOT EDIT!


#ifndef HMCL_MSGS_MESSAGE_VEHICLELIGHT_H
#define HMCL_MSGS_MESSAGE_VEHICLELIGHT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hmcl_msgs
{
template <class ContainerAllocator>
struct VehicleLight_
{
  typedef VehicleLight_<ContainerAllocator> Type;

  VehicleLight_()
    : left_light(0)
    , right_light(0)
    , hazard_light(0)  {
    }
  VehicleLight_(const ContainerAllocator& _alloc)
    : left_light(0)
    , right_light(0)
    , hazard_light(0)  {
  (void)_alloc;
    }



   typedef uint8_t _left_light_type;
  _left_light_type left_light;

   typedef uint8_t _right_light_type;
  _right_light_type right_light;

   typedef uint8_t _hazard_light_type;
  _hazard_light_type hazard_light;





  typedef boost::shared_ptr< ::hmcl_msgs::VehicleLight_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmcl_msgs::VehicleLight_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleLight_

typedef ::hmcl_msgs::VehicleLight_<std::allocator<void> > VehicleLight;

typedef boost::shared_ptr< ::hmcl_msgs::VehicleLight > VehicleLightPtr;
typedef boost::shared_ptr< ::hmcl_msgs::VehicleLight const> VehicleLightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmcl_msgs::VehicleLight_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmcl_msgs::VehicleLight_<ContainerAllocator1> & lhs, const ::hmcl_msgs::VehicleLight_<ContainerAllocator2> & rhs)
{
  return lhs.left_light == rhs.left_light &&
    lhs.right_light == rhs.right_light &&
    lhs.hazard_light == rhs.hazard_light;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmcl_msgs::VehicleLight_<ContainerAllocator1> & lhs, const ::hmcl_msgs::VehicleLight_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmcl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::VehicleLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::VehicleLight_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::VehicleLight_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b381125a33d115f19eb1624e1387eaae";
  }

  static const char* value(const ::hmcl_msgs::VehicleLight_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb381125a33d115f1ULL;
  static const uint64_t static_value2 = 0x9eb1624e1387eaaeULL;
};

template<class ContainerAllocator>
struct DataType< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmcl_msgs/VehicleLight";
  }

  static const char* value(const ::hmcl_msgs::VehicleLight_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 0 off, 1 on \n"
"uint8 left_light\n"
"uint8 right_light\n"
"uint8 hazard_light\n"
;
  }

  static const char* value(const ::hmcl_msgs::VehicleLight_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_light);
      stream.next(m.right_light);
      stream.next(m.hazard_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleLight_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmcl_msgs::VehicleLight_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmcl_msgs::VehicleLight_<ContainerAllocator>& v)
  {
    s << indent << "left_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_light);
    s << indent << "right_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_light);
    s << indent << "hazard_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hazard_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMCL_MSGS_MESSAGE_VEHICLELIGHT_H
