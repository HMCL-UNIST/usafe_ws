// Generated by gencpp from file mobileye_msgs/MobileyeInfo_smart_adas.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_MOBILEYEINFO_SMART_ADAS_H
#define MOBILEYE_MSGS_MESSAGE_MOBILEYEINFO_SMART_ADAS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mobileye_msgs/SmartADAS.h>

namespace mobileye_msgs
{
template <class ContainerAllocator>
struct MobileyeInfo_smart_adas_
{
  typedef MobileyeInfo_smart_adas_<ContainerAllocator> Type;

  MobileyeInfo_smart_adas_()
    : header()
    , smart_adas()  {
    }
  MobileyeInfo_smart_adas_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , smart_adas(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mobileye_msgs::SmartADAS_<ContainerAllocator>  _smart_adas_type;
  _smart_adas_type smart_adas;





  typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> const> ConstPtr;

}; // struct MobileyeInfo_smart_adas_

typedef ::mobileye_msgs::MobileyeInfo_smart_adas_<std::allocator<void> > MobileyeInfo_smart_adas;

typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo_smart_adas > MobileyeInfo_smart_adasPtr;
typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo_smart_adas const> MobileyeInfo_smart_adasConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator1> & lhs, const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.smart_adas == rhs.smart_adas;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator1> & lhs, const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b63fad4adb86b289d19be4eadb354a3";
  }

  static const char* value(const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b63fad4adb86b28ULL;
  static const uint64_t static_value2 = 0x9d19be4eadb354a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/MobileyeInfo_smart_adas";
  }

  static const char* value(const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"SmartADAS smart_adas\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/SmartADAS\n"
"uint8 persistent_on_off\n"
"uint8 volume_level\n"
"uint8 hmw_level\n"
"uint8 ldw_volume_level\n"
"uint8 hmw_volume_level\n"
"uint8 ldw_level\n"
"uint8 pedestrian_warning_level\n"
"uint8 sli_warning_level\n"
"uint8 blinker_reminder_level\n"
"uint8 virtual_bumper_level\n"
"uint8 hw_repeatable_level\n"
"\n"
"uint8 buzzer_min_volume\n"
"uint8 buzzer_max_volume\n"
"uint8 buzzer_hmw_min_volume\n"
"uint8 buzzer_hmw_max_volume\n"
"uint8 buzzer_ldw_min_volume\n"
"uint8 buzzer_ldw_max_volume\n"
"uint8 ewiii_speed_indication\n"
"uint8 disable_system_off\n"
"uint8 calibration_source\n"
"uint8 ldw_min_value\n"
"uint8 ldw_max_value\n"
"uint8 ldw_speed\n"
"uint8 ped_min_value\n"
"uint8 ped_max_value\n"
"uint8 speed_for_high_low_beam_control\n"
"uint8 virtual_bumper_min_value\n"
"uint8 virtual_bumper_max_value\n"
"uint8 blinker_reminder_min_value\n"
"uint8 blinker_reminder_max_value\n"
"\n"
"uint8 hmw_min_value\n"
"uint8 hmw_max_value\n"
"uint8 hmw_repeatable_min_value\n"
"uint8 hmw_repeatable_max_value\n"
"uint8 sli_min_value\n"
"uint8 sli_max_value\n"
"uint8 sli_delta_round_step\n"
"uint8 sli_delta_round_upwards\n"
"uint8 country_code\n"
"uint8 sli_unit_speed\n"
"uint8 tamper_alert_on_frames\n"
"uint8 tamper_alert_off_frames\n"
"uint8 tamper_alert_enable_j1939\n"
"\n"
"bool[16] menu_ticks\n"
"\n"
"bool[16] advanced_menu_ticks\n"
;
  }

  static const char* value(const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.smart_adas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MobileyeInfo_smart_adas_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::MobileyeInfo_smart_adas_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "smart_adas: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >::stream(s, indent + "  ", v.smart_adas);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_MOBILEYEINFO_SMART_ADAS_H
