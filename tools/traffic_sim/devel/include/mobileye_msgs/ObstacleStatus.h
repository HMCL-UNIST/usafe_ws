// Generated by gencpp from file mobileye_msgs/ObstacleStatus.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_OBSTACLESTATUS_H
#define MOBILEYE_MSGS_MESSAGE_OBSTACLESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct ObstacleStatus_
{
  typedef ObstacleStatus_<ContainerAllocator> Type;

  ObstacleStatus_()
    : number_of_obstacles(0)
    , timestamp(0)
    , left_close_rang_cut_in(false)
    , right_close_rang_cut_in(false)
    , go(0)
    , close_car(false)
    , failsafe(0)  {
    }
  ObstacleStatus_(const ContainerAllocator& _alloc)
    : number_of_obstacles(0)
    , timestamp(0)
    , left_close_rang_cut_in(false)
    , right_close_rang_cut_in(false)
    , go(0)
    , close_car(false)
    , failsafe(0)  {
  (void)_alloc;
    }



   typedef uint8_t _number_of_obstacles_type;
  _number_of_obstacles_type number_of_obstacles;

   typedef uint8_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _left_close_rang_cut_in_type;
  _left_close_rang_cut_in_type left_close_rang_cut_in;

   typedef uint8_t _right_close_rang_cut_in_type;
  _right_close_rang_cut_in_type right_close_rang_cut_in;

   typedef uint8_t _go_type;
  _go_type go;

   typedef uint8_t _close_car_type;
  _close_car_type close_car;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;





  typedef boost::shared_ptr< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleStatus_

typedef ::mobileye_msgs::ObstacleStatus_<std::allocator<void> > ObstacleStatus;

typedef boost::shared_ptr< ::mobileye_msgs::ObstacleStatus > ObstacleStatusPtr;
typedef boost::shared_ptr< ::mobileye_msgs::ObstacleStatus const> ObstacleStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator2> & rhs)
{
  return lhs.number_of_obstacles == rhs.number_of_obstacles &&
    lhs.timestamp == rhs.timestamp &&
    lhs.left_close_rang_cut_in == rhs.left_close_rang_cut_in &&
    lhs.right_close_rang_cut_in == rhs.right_close_rang_cut_in &&
    lhs.go == rhs.go &&
    lhs.close_car == rhs.close_car &&
    lhs.failsafe == rhs.failsafe;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b9b8b37869bebe9592f8765c69bab28";
  }

  static const char* value(const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b9b8b37869bebe9ULL;
  static const uint64_t static_value2 = 0x592f8765c69bab28ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/ObstacleStatus";
  }

  static const char* value(const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 number_of_obstacles\n"
"uint8 timestamp\n"
"\n"
"bool left_close_rang_cut_in\n"
"bool right_close_rang_cut_in\n"
"\n"
"uint8 go\n"
"bool close_car\n"
"uint8 failsafe\n"
;
  }

  static const char* value(const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_of_obstacles);
      stream.next(m.timestamp);
      stream.next(m.left_close_rang_cut_in);
      stream.next(m.right_close_rang_cut_in);
      stream.next(m.go);
      stream.next(m.close_car);
      stream.next(m.failsafe);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::ObstacleStatus_<ContainerAllocator>& v)
  {
    s << indent << "number_of_obstacles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_of_obstacles);
    s << indent << "timestamp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "left_close_rang_cut_in: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_close_rang_cut_in);
    s << indent << "right_close_rang_cut_in: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_close_rang_cut_in);
    s << indent << "go: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.go);
    s << indent << "close_car: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.close_car);
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_OBSTACLESTATUS_H
