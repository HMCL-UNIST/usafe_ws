// Generated by gencpp from file mobileye_msgs/SystemWarnings.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_SYSTEMWARNINGS_H
#define MOBILEYE_MSGS_MESSAGE_SYSTEMWARNINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct SystemWarnings_
{
  typedef SystemWarnings_<ContainerAllocator> Type;

  SystemWarnings_()
    : sound_type(0)
    , peds_in_dz(false)
    , peds_fcw(false)
    , time_indicator(0)
    , error_valid(false)
    , error_code(0)
    , zero_speed(false)
    , headway_valid(false)
    , headway_measurement(0.0)
    , ldw_off(false)
    , left_ldw_on(false)
    , right_ldw_on(false)
    , fcw_on(false)
    , maintenance(false)
    , failsafe(false)
    , tsr_enabled(false)
    , hw_repeatable_enabled(false)
    , headway_warning_level(0)
    , tsr_warning_level(0)
    , tamper_alert(false)  {
    }
  SystemWarnings_(const ContainerAllocator& _alloc)
    : sound_type(0)
    , peds_in_dz(false)
    , peds_fcw(false)
    , time_indicator(0)
    , error_valid(false)
    , error_code(0)
    , zero_speed(false)
    , headway_valid(false)
    , headway_measurement(0.0)
    , ldw_off(false)
    , left_ldw_on(false)
    , right_ldw_on(false)
    , fcw_on(false)
    , maintenance(false)
    , failsafe(false)
    , tsr_enabled(false)
    , hw_repeatable_enabled(false)
    , headway_warning_level(0)
    , tsr_warning_level(0)
    , tamper_alert(false)  {
  (void)_alloc;
    }



   typedef uint8_t _sound_type_type;
  _sound_type_type sound_type;

   typedef uint8_t _peds_in_dz_type;
  _peds_in_dz_type peds_in_dz;

   typedef uint8_t _peds_fcw_type;
  _peds_fcw_type peds_fcw;

   typedef uint8_t _time_indicator_type;
  _time_indicator_type time_indicator;

   typedef uint8_t _error_valid_type;
  _error_valid_type error_valid;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _zero_speed_type;
  _zero_speed_type zero_speed;

   typedef uint8_t _headway_valid_type;
  _headway_valid_type headway_valid;

   typedef float _headway_measurement_type;
  _headway_measurement_type headway_measurement;

   typedef uint8_t _ldw_off_type;
  _ldw_off_type ldw_off;

   typedef uint8_t _left_ldw_on_type;
  _left_ldw_on_type left_ldw_on;

   typedef uint8_t _right_ldw_on_type;
  _right_ldw_on_type right_ldw_on;

   typedef uint8_t _fcw_on_type;
  _fcw_on_type fcw_on;

   typedef uint8_t _maintenance_type;
  _maintenance_type maintenance;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;

   typedef uint8_t _tsr_enabled_type;
  _tsr_enabled_type tsr_enabled;

   typedef uint8_t _hw_repeatable_enabled_type;
  _hw_repeatable_enabled_type hw_repeatable_enabled;

   typedef uint8_t _headway_warning_level_type;
  _headway_warning_level_type headway_warning_level;

   typedef uint8_t _tsr_warning_level_type;
  _tsr_warning_level_type tsr_warning_level;

   typedef uint8_t _tamper_alert_type;
  _tamper_alert_type tamper_alert;





  typedef boost::shared_ptr< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> const> ConstPtr;

}; // struct SystemWarnings_

typedef ::mobileye_msgs::SystemWarnings_<std::allocator<void> > SystemWarnings;

typedef boost::shared_ptr< ::mobileye_msgs::SystemWarnings > SystemWarningsPtr;
typedef boost::shared_ptr< ::mobileye_msgs::SystemWarnings const> SystemWarningsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::SystemWarnings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::SystemWarnings_<ContainerAllocator1> & lhs, const ::mobileye_msgs::SystemWarnings_<ContainerAllocator2> & rhs)
{
  return lhs.sound_type == rhs.sound_type &&
    lhs.peds_in_dz == rhs.peds_in_dz &&
    lhs.peds_fcw == rhs.peds_fcw &&
    lhs.time_indicator == rhs.time_indicator &&
    lhs.error_valid == rhs.error_valid &&
    lhs.error_code == rhs.error_code &&
    lhs.zero_speed == rhs.zero_speed &&
    lhs.headway_valid == rhs.headway_valid &&
    lhs.headway_measurement == rhs.headway_measurement &&
    lhs.ldw_off == rhs.ldw_off &&
    lhs.left_ldw_on == rhs.left_ldw_on &&
    lhs.right_ldw_on == rhs.right_ldw_on &&
    lhs.fcw_on == rhs.fcw_on &&
    lhs.maintenance == rhs.maintenance &&
    lhs.failsafe == rhs.failsafe &&
    lhs.tsr_enabled == rhs.tsr_enabled &&
    lhs.hw_repeatable_enabled == rhs.hw_repeatable_enabled &&
    lhs.headway_warning_level == rhs.headway_warning_level &&
    lhs.tsr_warning_level == rhs.tsr_warning_level &&
    lhs.tamper_alert == rhs.tamper_alert;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::SystemWarnings_<ContainerAllocator1> & lhs, const ::mobileye_msgs::SystemWarnings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13b6bac628f7b8055c48f3c1bf2dfa99";
  }

  static const char* value(const ::mobileye_msgs::SystemWarnings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13b6bac628f7b805ULL;
  static const uint64_t static_value2 = 0x5c48f3c1bf2dfa99ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/SystemWarnings";
  }

  static const char* value(const ::mobileye_msgs::SystemWarnings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 sound_type\n"
"bool peds_in_dz\n"
"bool peds_fcw\n"
"uint8 time_indicator\n"
"\n"
"bool error_valid\n"
"uint8 error_code\n"
"bool zero_speed\n"
"bool headway_valid\n"
"float32 headway_measurement\n"
"\n"
"bool ldw_off\n"
"bool left_ldw_on\n"
"bool right_ldw_on\n"
"bool fcw_on\n"
"bool maintenance\n"
"bool failsafe\n"
"\n"
"bool tsr_enabled\n"
"bool hw_repeatable_enabled\n"
"uint8 headway_warning_level\n"
"uint8 tsr_warning_level\n"
"bool tamper_alert\n"
;
  }

  static const char* value(const ::mobileye_msgs::SystemWarnings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sound_type);
      stream.next(m.peds_in_dz);
      stream.next(m.peds_fcw);
      stream.next(m.time_indicator);
      stream.next(m.error_valid);
      stream.next(m.error_code);
      stream.next(m.zero_speed);
      stream.next(m.headway_valid);
      stream.next(m.headway_measurement);
      stream.next(m.ldw_off);
      stream.next(m.left_ldw_on);
      stream.next(m.right_ldw_on);
      stream.next(m.fcw_on);
      stream.next(m.maintenance);
      stream.next(m.failsafe);
      stream.next(m.tsr_enabled);
      stream.next(m.hw_repeatable_enabled);
      stream.next(m.headway_warning_level);
      stream.next(m.tsr_warning_level);
      stream.next(m.tamper_alert);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemWarnings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::SystemWarnings_<ContainerAllocator>& v)
  {
    s << indent << "sound_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sound_type);
    s << indent << "peds_in_dz: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.peds_in_dz);
    s << indent << "peds_fcw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.peds_fcw);
    s << indent << "time_indicator: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_indicator);
    s << indent << "error_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_valid);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "zero_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zero_speed);
    s << indent << "headway_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.headway_valid);
    s << indent << "headway_measurement: ";
    Printer<float>::stream(s, indent + "  ", v.headway_measurement);
    s << indent << "ldw_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ldw_off);
    s << indent << "left_ldw_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_ldw_on);
    s << indent << "right_ldw_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_ldw_on);
    s << indent << "fcw_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fcw_on);
    s << indent << "maintenance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maintenance);
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
    s << indent << "tsr_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tsr_enabled);
    s << indent << "hw_repeatable_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hw_repeatable_enabled);
    s << indent << "headway_warning_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.headway_warning_level);
    s << indent << "tsr_warning_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tsr_warning_level);
    s << indent << "tamper_alert: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tamper_alert);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_SYSTEMWARNINGS_H
