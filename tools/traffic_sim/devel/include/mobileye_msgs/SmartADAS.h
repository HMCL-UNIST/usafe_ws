// Generated by gencpp from file mobileye_msgs/SmartADAS.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_SMARTADAS_H
#define MOBILEYE_MSGS_MESSAGE_SMARTADAS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct SmartADAS_
{
  typedef SmartADAS_<ContainerAllocator> Type;

  SmartADAS_()
    : persistent_on_off(0)
    , volume_level(0)
    , hmw_level(0)
    , ldw_volume_level(0)
    , hmw_volume_level(0)
    , ldw_level(0)
    , pedestrian_warning_level(0)
    , sli_warning_level(0)
    , blinker_reminder_level(0)
    , virtual_bumper_level(0)
    , hw_repeatable_level(0)
    , buzzer_min_volume(0)
    , buzzer_max_volume(0)
    , buzzer_hmw_min_volume(0)
    , buzzer_hmw_max_volume(0)
    , buzzer_ldw_min_volume(0)
    , buzzer_ldw_max_volume(0)
    , ewiii_speed_indication(0)
    , disable_system_off(0)
    , calibration_source(0)
    , ldw_min_value(0)
    , ldw_max_value(0)
    , ldw_speed(0)
    , ped_min_value(0)
    , ped_max_value(0)
    , speed_for_high_low_beam_control(0)
    , virtual_bumper_min_value(0)
    , virtual_bumper_max_value(0)
    , blinker_reminder_min_value(0)
    , blinker_reminder_max_value(0)
    , hmw_min_value(0)
    , hmw_max_value(0)
    , hmw_repeatable_min_value(0)
    , hmw_repeatable_max_value(0)
    , sli_min_value(0)
    , sli_max_value(0)
    , sli_delta_round_step(0)
    , sli_delta_round_upwards(0)
    , country_code(0)
    , sli_unit_speed(0)
    , tamper_alert_on_frames(0)
    , tamper_alert_off_frames(0)
    , tamper_alert_enable_j1939(0)
    , menu_ticks()
    , advanced_menu_ticks()  {
      menu_ticks.assign(false);

      advanced_menu_ticks.assign(false);
  }
  SmartADAS_(const ContainerAllocator& _alloc)
    : persistent_on_off(0)
    , volume_level(0)
    , hmw_level(0)
    , ldw_volume_level(0)
    , hmw_volume_level(0)
    , ldw_level(0)
    , pedestrian_warning_level(0)
    , sli_warning_level(0)
    , blinker_reminder_level(0)
    , virtual_bumper_level(0)
    , hw_repeatable_level(0)
    , buzzer_min_volume(0)
    , buzzer_max_volume(0)
    , buzzer_hmw_min_volume(0)
    , buzzer_hmw_max_volume(0)
    , buzzer_ldw_min_volume(0)
    , buzzer_ldw_max_volume(0)
    , ewiii_speed_indication(0)
    , disable_system_off(0)
    , calibration_source(0)
    , ldw_min_value(0)
    , ldw_max_value(0)
    , ldw_speed(0)
    , ped_min_value(0)
    , ped_max_value(0)
    , speed_for_high_low_beam_control(0)
    , virtual_bumper_min_value(0)
    , virtual_bumper_max_value(0)
    , blinker_reminder_min_value(0)
    , blinker_reminder_max_value(0)
    , hmw_min_value(0)
    , hmw_max_value(0)
    , hmw_repeatable_min_value(0)
    , hmw_repeatable_max_value(0)
    , sli_min_value(0)
    , sli_max_value(0)
    , sli_delta_round_step(0)
    , sli_delta_round_upwards(0)
    , country_code(0)
    , sli_unit_speed(0)
    , tamper_alert_on_frames(0)
    , tamper_alert_off_frames(0)
    , tamper_alert_enable_j1939(0)
    , menu_ticks()
    , advanced_menu_ticks()  {
  (void)_alloc;
      menu_ticks.assign(false);

      advanced_menu_ticks.assign(false);
  }



   typedef uint8_t _persistent_on_off_type;
  _persistent_on_off_type persistent_on_off;

   typedef uint8_t _volume_level_type;
  _volume_level_type volume_level;

   typedef uint8_t _hmw_level_type;
  _hmw_level_type hmw_level;

   typedef uint8_t _ldw_volume_level_type;
  _ldw_volume_level_type ldw_volume_level;

   typedef uint8_t _hmw_volume_level_type;
  _hmw_volume_level_type hmw_volume_level;

   typedef uint8_t _ldw_level_type;
  _ldw_level_type ldw_level;

   typedef uint8_t _pedestrian_warning_level_type;
  _pedestrian_warning_level_type pedestrian_warning_level;

   typedef uint8_t _sli_warning_level_type;
  _sli_warning_level_type sli_warning_level;

   typedef uint8_t _blinker_reminder_level_type;
  _blinker_reminder_level_type blinker_reminder_level;

   typedef uint8_t _virtual_bumper_level_type;
  _virtual_bumper_level_type virtual_bumper_level;

   typedef uint8_t _hw_repeatable_level_type;
  _hw_repeatable_level_type hw_repeatable_level;

   typedef uint8_t _buzzer_min_volume_type;
  _buzzer_min_volume_type buzzer_min_volume;

   typedef uint8_t _buzzer_max_volume_type;
  _buzzer_max_volume_type buzzer_max_volume;

   typedef uint8_t _buzzer_hmw_min_volume_type;
  _buzzer_hmw_min_volume_type buzzer_hmw_min_volume;

   typedef uint8_t _buzzer_hmw_max_volume_type;
  _buzzer_hmw_max_volume_type buzzer_hmw_max_volume;

   typedef uint8_t _buzzer_ldw_min_volume_type;
  _buzzer_ldw_min_volume_type buzzer_ldw_min_volume;

   typedef uint8_t _buzzer_ldw_max_volume_type;
  _buzzer_ldw_max_volume_type buzzer_ldw_max_volume;

   typedef uint8_t _ewiii_speed_indication_type;
  _ewiii_speed_indication_type ewiii_speed_indication;

   typedef uint8_t _disable_system_off_type;
  _disable_system_off_type disable_system_off;

   typedef uint8_t _calibration_source_type;
  _calibration_source_type calibration_source;

   typedef uint8_t _ldw_min_value_type;
  _ldw_min_value_type ldw_min_value;

   typedef uint8_t _ldw_max_value_type;
  _ldw_max_value_type ldw_max_value;

   typedef uint8_t _ldw_speed_type;
  _ldw_speed_type ldw_speed;

   typedef uint8_t _ped_min_value_type;
  _ped_min_value_type ped_min_value;

   typedef uint8_t _ped_max_value_type;
  _ped_max_value_type ped_max_value;

   typedef uint8_t _speed_for_high_low_beam_control_type;
  _speed_for_high_low_beam_control_type speed_for_high_low_beam_control;

   typedef uint8_t _virtual_bumper_min_value_type;
  _virtual_bumper_min_value_type virtual_bumper_min_value;

   typedef uint8_t _virtual_bumper_max_value_type;
  _virtual_bumper_max_value_type virtual_bumper_max_value;

   typedef uint8_t _blinker_reminder_min_value_type;
  _blinker_reminder_min_value_type blinker_reminder_min_value;

   typedef uint8_t _blinker_reminder_max_value_type;
  _blinker_reminder_max_value_type blinker_reminder_max_value;

   typedef uint8_t _hmw_min_value_type;
  _hmw_min_value_type hmw_min_value;

   typedef uint8_t _hmw_max_value_type;
  _hmw_max_value_type hmw_max_value;

   typedef uint8_t _hmw_repeatable_min_value_type;
  _hmw_repeatable_min_value_type hmw_repeatable_min_value;

   typedef uint8_t _hmw_repeatable_max_value_type;
  _hmw_repeatable_max_value_type hmw_repeatable_max_value;

   typedef uint8_t _sli_min_value_type;
  _sli_min_value_type sli_min_value;

   typedef uint8_t _sli_max_value_type;
  _sli_max_value_type sli_max_value;

   typedef uint8_t _sli_delta_round_step_type;
  _sli_delta_round_step_type sli_delta_round_step;

   typedef uint8_t _sli_delta_round_upwards_type;
  _sli_delta_round_upwards_type sli_delta_round_upwards;

   typedef uint8_t _country_code_type;
  _country_code_type country_code;

   typedef uint8_t _sli_unit_speed_type;
  _sli_unit_speed_type sli_unit_speed;

   typedef uint8_t _tamper_alert_on_frames_type;
  _tamper_alert_on_frames_type tamper_alert_on_frames;

   typedef uint8_t _tamper_alert_off_frames_type;
  _tamper_alert_off_frames_type tamper_alert_off_frames;

   typedef uint8_t _tamper_alert_enable_j1939_type;
  _tamper_alert_enable_j1939_type tamper_alert_enable_j1939;

   typedef boost::array<uint8_t, 16>  _menu_ticks_type;
  _menu_ticks_type menu_ticks;

   typedef boost::array<uint8_t, 16>  _advanced_menu_ticks_type;
  _advanced_menu_ticks_type advanced_menu_ticks;





  typedef boost::shared_ptr< ::mobileye_msgs::SmartADAS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::SmartADAS_<ContainerAllocator> const> ConstPtr;

}; // struct SmartADAS_

typedef ::mobileye_msgs::SmartADAS_<std::allocator<void> > SmartADAS;

typedef boost::shared_ptr< ::mobileye_msgs::SmartADAS > SmartADASPtr;
typedef boost::shared_ptr< ::mobileye_msgs::SmartADAS const> SmartADASConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::SmartADAS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::SmartADAS_<ContainerAllocator1> & lhs, const ::mobileye_msgs::SmartADAS_<ContainerAllocator2> & rhs)
{
  return lhs.persistent_on_off == rhs.persistent_on_off &&
    lhs.volume_level == rhs.volume_level &&
    lhs.hmw_level == rhs.hmw_level &&
    lhs.ldw_volume_level == rhs.ldw_volume_level &&
    lhs.hmw_volume_level == rhs.hmw_volume_level &&
    lhs.ldw_level == rhs.ldw_level &&
    lhs.pedestrian_warning_level == rhs.pedestrian_warning_level &&
    lhs.sli_warning_level == rhs.sli_warning_level &&
    lhs.blinker_reminder_level == rhs.blinker_reminder_level &&
    lhs.virtual_bumper_level == rhs.virtual_bumper_level &&
    lhs.hw_repeatable_level == rhs.hw_repeatable_level &&
    lhs.buzzer_min_volume == rhs.buzzer_min_volume &&
    lhs.buzzer_max_volume == rhs.buzzer_max_volume &&
    lhs.buzzer_hmw_min_volume == rhs.buzzer_hmw_min_volume &&
    lhs.buzzer_hmw_max_volume == rhs.buzzer_hmw_max_volume &&
    lhs.buzzer_ldw_min_volume == rhs.buzzer_ldw_min_volume &&
    lhs.buzzer_ldw_max_volume == rhs.buzzer_ldw_max_volume &&
    lhs.ewiii_speed_indication == rhs.ewiii_speed_indication &&
    lhs.disable_system_off == rhs.disable_system_off &&
    lhs.calibration_source == rhs.calibration_source &&
    lhs.ldw_min_value == rhs.ldw_min_value &&
    lhs.ldw_max_value == rhs.ldw_max_value &&
    lhs.ldw_speed == rhs.ldw_speed &&
    lhs.ped_min_value == rhs.ped_min_value &&
    lhs.ped_max_value == rhs.ped_max_value &&
    lhs.speed_for_high_low_beam_control == rhs.speed_for_high_low_beam_control &&
    lhs.virtual_bumper_min_value == rhs.virtual_bumper_min_value &&
    lhs.virtual_bumper_max_value == rhs.virtual_bumper_max_value &&
    lhs.blinker_reminder_min_value == rhs.blinker_reminder_min_value &&
    lhs.blinker_reminder_max_value == rhs.blinker_reminder_max_value &&
    lhs.hmw_min_value == rhs.hmw_min_value &&
    lhs.hmw_max_value == rhs.hmw_max_value &&
    lhs.hmw_repeatable_min_value == rhs.hmw_repeatable_min_value &&
    lhs.hmw_repeatable_max_value == rhs.hmw_repeatable_max_value &&
    lhs.sli_min_value == rhs.sli_min_value &&
    lhs.sli_max_value == rhs.sli_max_value &&
    lhs.sli_delta_round_step == rhs.sli_delta_round_step &&
    lhs.sli_delta_round_upwards == rhs.sli_delta_round_upwards &&
    lhs.country_code == rhs.country_code &&
    lhs.sli_unit_speed == rhs.sli_unit_speed &&
    lhs.tamper_alert_on_frames == rhs.tamper_alert_on_frames &&
    lhs.tamper_alert_off_frames == rhs.tamper_alert_off_frames &&
    lhs.tamper_alert_enable_j1939 == rhs.tamper_alert_enable_j1939 &&
    lhs.menu_ticks == rhs.menu_ticks &&
    lhs.advanced_menu_ticks == rhs.advanced_menu_ticks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::SmartADAS_<ContainerAllocator1> & lhs, const ::mobileye_msgs::SmartADAS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::SmartADAS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::SmartADAS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::SmartADAS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2234fe7679b621d841bd2d8b34cf58ad";
  }

  static const char* value(const ::mobileye_msgs::SmartADAS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2234fe7679b621d8ULL;
  static const uint64_t static_value2 = 0x41bd2d8b34cf58adULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/SmartADAS";
  }

  static const char* value(const ::mobileye_msgs::SmartADAS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 persistent_on_off\n"
"uint8 volume_level\n"
"uint8 hmw_level\n"
"uint8 ldw_volume_level\n"
"uint8 hmw_volume_level\n"
"uint8 ldw_level\n"
"uint8 pedestrian_warning_level\n"
"uint8 sli_warning_level\n"
"uint8 blinker_reminder_level\n"
"uint8 virtual_bumper_level\n"
"uint8 hw_repeatable_level\n"
"\n"
"uint8 buzzer_min_volume\n"
"uint8 buzzer_max_volume\n"
"uint8 buzzer_hmw_min_volume\n"
"uint8 buzzer_hmw_max_volume\n"
"uint8 buzzer_ldw_min_volume\n"
"uint8 buzzer_ldw_max_volume\n"
"uint8 ewiii_speed_indication\n"
"uint8 disable_system_off\n"
"uint8 calibration_source\n"
"uint8 ldw_min_value\n"
"uint8 ldw_max_value\n"
"uint8 ldw_speed\n"
"uint8 ped_min_value\n"
"uint8 ped_max_value\n"
"uint8 speed_for_high_low_beam_control\n"
"uint8 virtual_bumper_min_value\n"
"uint8 virtual_bumper_max_value\n"
"uint8 blinker_reminder_min_value\n"
"uint8 blinker_reminder_max_value\n"
"\n"
"uint8 hmw_min_value\n"
"uint8 hmw_max_value\n"
"uint8 hmw_repeatable_min_value\n"
"uint8 hmw_repeatable_max_value\n"
"uint8 sli_min_value\n"
"uint8 sli_max_value\n"
"uint8 sli_delta_round_step\n"
"uint8 sli_delta_round_upwards\n"
"uint8 country_code\n"
"uint8 sli_unit_speed\n"
"uint8 tamper_alert_on_frames\n"
"uint8 tamper_alert_off_frames\n"
"uint8 tamper_alert_enable_j1939\n"
"\n"
"bool[16] menu_ticks\n"
"\n"
"bool[16] advanced_menu_ticks\n"
;
  }

  static const char* value(const ::mobileye_msgs::SmartADAS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.persistent_on_off);
      stream.next(m.volume_level);
      stream.next(m.hmw_level);
      stream.next(m.ldw_volume_level);
      stream.next(m.hmw_volume_level);
      stream.next(m.ldw_level);
      stream.next(m.pedestrian_warning_level);
      stream.next(m.sli_warning_level);
      stream.next(m.blinker_reminder_level);
      stream.next(m.virtual_bumper_level);
      stream.next(m.hw_repeatable_level);
      stream.next(m.buzzer_min_volume);
      stream.next(m.buzzer_max_volume);
      stream.next(m.buzzer_hmw_min_volume);
      stream.next(m.buzzer_hmw_max_volume);
      stream.next(m.buzzer_ldw_min_volume);
      stream.next(m.buzzer_ldw_max_volume);
      stream.next(m.ewiii_speed_indication);
      stream.next(m.disable_system_off);
      stream.next(m.calibration_source);
      stream.next(m.ldw_min_value);
      stream.next(m.ldw_max_value);
      stream.next(m.ldw_speed);
      stream.next(m.ped_min_value);
      stream.next(m.ped_max_value);
      stream.next(m.speed_for_high_low_beam_control);
      stream.next(m.virtual_bumper_min_value);
      stream.next(m.virtual_bumper_max_value);
      stream.next(m.blinker_reminder_min_value);
      stream.next(m.blinker_reminder_max_value);
      stream.next(m.hmw_min_value);
      stream.next(m.hmw_max_value);
      stream.next(m.hmw_repeatable_min_value);
      stream.next(m.hmw_repeatable_max_value);
      stream.next(m.sli_min_value);
      stream.next(m.sli_max_value);
      stream.next(m.sli_delta_round_step);
      stream.next(m.sli_delta_round_upwards);
      stream.next(m.country_code);
      stream.next(m.sli_unit_speed);
      stream.next(m.tamper_alert_on_frames);
      stream.next(m.tamper_alert_off_frames);
      stream.next(m.tamper_alert_enable_j1939);
      stream.next(m.menu_ticks);
      stream.next(m.advanced_menu_ticks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SmartADAS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::SmartADAS_<ContainerAllocator>& v)
  {
    s << indent << "persistent_on_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.persistent_on_off);
    s << indent << "volume_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.volume_level);
    s << indent << "hmw_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmw_level);
    s << indent << "ldw_volume_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ldw_volume_level);
    s << indent << "hmw_volume_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmw_volume_level);
    s << indent << "ldw_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ldw_level);
    s << indent << "pedestrian_warning_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedestrian_warning_level);
    s << indent << "sli_warning_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sli_warning_level);
    s << indent << "blinker_reminder_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_reminder_level);
    s << indent << "virtual_bumper_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.virtual_bumper_level);
    s << indent << "hw_repeatable_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hw_repeatable_level);
    s << indent << "buzzer_min_volume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer_min_volume);
    s << indent << "buzzer_max_volume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer_max_volume);
    s << indent << "buzzer_hmw_min_volume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer_hmw_min_volume);
    s << indent << "buzzer_hmw_max_volume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer_hmw_max_volume);
    s << indent << "buzzer_ldw_min_volume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer_ldw_min_volume);
    s << indent << "buzzer_ldw_max_volume: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buzzer_ldw_max_volume);
    s << indent << "ewiii_speed_indication: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ewiii_speed_indication);
    s << indent << "disable_system_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disable_system_off);
    s << indent << "calibration_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibration_source);
    s << indent << "ldw_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ldw_min_value);
    s << indent << "ldw_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ldw_max_value);
    s << indent << "ldw_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ldw_speed);
    s << indent << "ped_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ped_min_value);
    s << indent << "ped_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ped_max_value);
    s << indent << "speed_for_high_low_beam_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_for_high_low_beam_control);
    s << indent << "virtual_bumper_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.virtual_bumper_min_value);
    s << indent << "virtual_bumper_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.virtual_bumper_max_value);
    s << indent << "blinker_reminder_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_reminder_min_value);
    s << indent << "blinker_reminder_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_reminder_max_value);
    s << indent << "hmw_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmw_min_value);
    s << indent << "hmw_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmw_max_value);
    s << indent << "hmw_repeatable_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmw_repeatable_min_value);
    s << indent << "hmw_repeatable_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hmw_repeatable_max_value);
    s << indent << "sli_min_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sli_min_value);
    s << indent << "sli_max_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sli_max_value);
    s << indent << "sli_delta_round_step: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sli_delta_round_step);
    s << indent << "sli_delta_round_upwards: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sli_delta_round_upwards);
    s << indent << "country_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.country_code);
    s << indent << "sli_unit_speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sli_unit_speed);
    s << indent << "tamper_alert_on_frames: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tamper_alert_on_frames);
    s << indent << "tamper_alert_off_frames: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tamper_alert_off_frames);
    s << indent << "tamper_alert_enable_j1939: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tamper_alert_enable_j1939);
    s << indent << "menu_ticks[]" << std::endl;
    for (size_t i = 0; i < v.menu_ticks.size(); ++i)
    {
      s << indent << "  menu_ticks[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.menu_ticks[i]);
    }
    s << indent << "advanced_menu_ticks[]" << std::endl;
    for (size_t i = 0; i < v.advanced_menu_ticks.size(); ++i)
    {
      s << indent << "  advanced_menu_ticks[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.advanced_menu_ticks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_SMARTADAS_H
