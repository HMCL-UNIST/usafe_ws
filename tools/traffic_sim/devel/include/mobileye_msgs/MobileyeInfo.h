// Generated by gencpp from file mobileye_msgs/MobileyeInfo.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_MOBILEYEINFO_H
#define MOBILEYE_MSGS_MESSAGE_MOBILEYEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mobileye_msgs/LKAlane.h>
#include <mobileye_msgs/LKAlane.h>
#include <mobileye_msgs/ReferencePoints.h>
#include <mobileye_msgs/LKAlane.h>
#include <mobileye_msgs/Lane.h>
#include <mobileye_msgs/ObstacleStatus.h>
#include <mobileye_msgs/ObstacleData.h>
#include <mobileye_msgs/SystemWarnings.h>
#include <mobileye_msgs/CarInfo.h>
#include <mobileye_msgs/TSR.h>
#include <mobileye_msgs/TSRVisionOnlySign.h>
#include <mobileye_msgs/Gyro.h>
#include <mobileye_msgs/SmartADAS.h>
#include <mobileye_msgs/SeeQ.h>

namespace mobileye_msgs
{
template <class ContainerAllocator>
struct MobileyeInfo_
{
  typedef MobileyeInfo_<ContainerAllocator> Type;

  MobileyeInfo_()
    : header()
    , left_lane()
    , right_lane()
    , reference_points()
    , number_of_next_lane_markers(0)
    , next_lane()
    , lane()
    , obstacle_status()
    , obstacle_data()
    , system_warnings()
    , car_info()
    , tsr()
    , tsr_vision_only()
    , gyro()
    , smart_adas()
    , seeq()  {
    }
  MobileyeInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_lane(_alloc)
    , right_lane(_alloc)
    , reference_points(_alloc)
    , number_of_next_lane_markers(0)
    , next_lane(_alloc)
    , lane(_alloc)
    , obstacle_status(_alloc)
    , obstacle_data(_alloc)
    , system_warnings(_alloc)
    , car_info(_alloc)
    , tsr(_alloc)
    , tsr_vision_only(_alloc)
    , gyro(_alloc)
    , smart_adas(_alloc)
    , seeq(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mobileye_msgs::LKAlane_<ContainerAllocator>  _left_lane_type;
  _left_lane_type left_lane;

   typedef  ::mobileye_msgs::LKAlane_<ContainerAllocator>  _right_lane_type;
  _right_lane_type right_lane;

   typedef  ::mobileye_msgs::ReferencePoints_<ContainerAllocator>  _reference_points_type;
  _reference_points_type reference_points;

   typedef uint8_t _number_of_next_lane_markers_type;
  _number_of_next_lane_markers_type number_of_next_lane_markers;

   typedef std::vector< ::mobileye_msgs::LKAlane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mobileye_msgs::LKAlane_<ContainerAllocator> >::other >  _next_lane_type;
  _next_lane_type next_lane;

   typedef  ::mobileye_msgs::Lane_<ContainerAllocator>  _lane_type;
  _lane_type lane;

   typedef  ::mobileye_msgs::ObstacleStatus_<ContainerAllocator>  _obstacle_status_type;
  _obstacle_status_type obstacle_status;

   typedef std::vector< ::mobileye_msgs::ObstacleData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >::other >  _obstacle_data_type;
  _obstacle_data_type obstacle_data;

   typedef  ::mobileye_msgs::SystemWarnings_<ContainerAllocator>  _system_warnings_type;
  _system_warnings_type system_warnings;

   typedef  ::mobileye_msgs::CarInfo_<ContainerAllocator>  _car_info_type;
  _car_info_type car_info;

   typedef std::vector< ::mobileye_msgs::TSR_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mobileye_msgs::TSR_<ContainerAllocator> >::other >  _tsr_type;
  _tsr_type tsr;

   typedef  ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator>  _tsr_vision_only_type;
  _tsr_vision_only_type tsr_vision_only;

   typedef  ::mobileye_msgs::Gyro_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::mobileye_msgs::SmartADAS_<ContainerAllocator>  _smart_adas_type;
  _smart_adas_type smart_adas;

   typedef  ::mobileye_msgs::SeeQ_<ContainerAllocator>  _seeq_type;
  _seeq_type seeq;





  typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MobileyeInfo_

typedef ::mobileye_msgs::MobileyeInfo_<std::allocator<void> > MobileyeInfo;

typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo > MobileyeInfoPtr;
typedef boost::shared_ptr< ::mobileye_msgs::MobileyeInfo const> MobileyeInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator1> & lhs, const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_lane == rhs.left_lane &&
    lhs.right_lane == rhs.right_lane &&
    lhs.reference_points == rhs.reference_points &&
    lhs.number_of_next_lane_markers == rhs.number_of_next_lane_markers &&
    lhs.next_lane == rhs.next_lane &&
    lhs.lane == rhs.lane &&
    lhs.obstacle_status == rhs.obstacle_status &&
    lhs.obstacle_data == rhs.obstacle_data &&
    lhs.system_warnings == rhs.system_warnings &&
    lhs.car_info == rhs.car_info &&
    lhs.tsr == rhs.tsr &&
    lhs.tsr_vision_only == rhs.tsr_vision_only &&
    lhs.gyro == rhs.gyro &&
    lhs.smart_adas == rhs.smart_adas &&
    lhs.seeq == rhs.seeq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator1> & lhs, const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f347fd8c2960b4f7e8d7a1b937971d62";
  }

  static const char* value(const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf347fd8c2960b4f7ULL;
  static const uint64_t static_value2 = 0xe8d7a1b937971d62ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/MobileyeInfo";
  }

  static const char* value(const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"LKAlane left_lane\n"
"LKAlane right_lane\n"
"\n"
"ReferencePoints reference_points\n"
"\n"
"uint8 number_of_next_lane_markers\n"
"\n"
"LKAlane[] next_lane\n"
"\n"
"Lane lane\n"
"\n"
"ObstacleStatus obstacle_status\n"
"ObstacleData[] obstacle_data\n"
"\n"
"SystemWarnings system_warnings\n"
"CarInfo car_info\n"
"TSR[] tsr\n"
"TSRVisionOnlySign tsr_vision_only\n"
"Gyro gyro\n"
"SmartADAS smart_adas\n"
"SeeQ seeq\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/LKAlane\n"
"uint8 lane_type\n"
"uint8 quality\n"
"uint8 model_degree\n"
"\n"
"float32 position_parameter_c0\n"
"float32 curvature_parameter_c2\n"
"float32 curvature_derivative_c3\n"
"float32 width_marking\n"
"\n"
"float32 heading_angle_parameter_c1\n"
"float32 view_range\n"
"bool view_range_availability\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/ReferencePoints\n"
"float32 ref_point1_position\n"
"float32 ref_point1_distance\n"
"bool ref_point1_validity\n"
"float32 ref_point2_position\n"
"float32 ref_point2_distance\n"
"bool ref_point2_validity\n"
"================================================================================\n"
"MSG: mobileye_msgs/Lane\n"
"float32 lane_curvature\n"
"float32 lane_heading\n"
"\n"
"bool ca\n"
"float32 pitch_angle\n"
"float32 yaw_angle\n"
"\n"
"bool right_ldw_availability\n"
"bool left_ldw_availability\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/ObstacleStatus\n"
"uint8 number_of_obstacles\n"
"uint8 timestamp\n"
"\n"
"bool left_close_rang_cut_in\n"
"bool right_close_rang_cut_in\n"
"\n"
"uint8 go\n"
"bool close_car\n"
"uint8 failsafe\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/ObstacleData\n"
"uint8 obstacle_id\n"
"float32 obstacle_position_x\n"
"float32 obstacle_position_y\n"
"float32 obstacle_relative_velocity_x\n"
"\n"
"uint8 obstacle_type\n"
"uint8 obstacle_status\n"
"bool obstacle_brake_lights\n"
"uint8 cut_in_and_out\n"
"uint8 blinker_info\n"
"uint8 obstacle_valid\n"
"\n"
"float32 obstacle_length\n"
"float32 obstacle_width\n"
"uint8 obstacle_age\n"
"uint8 obstacle_lane\n"
"uint8 cipv_flag\n"
"\n"
"float32 radar_position_x\n"
"float32 radar_velocity_x\n"
"uint8 radar_match_confidence\n"
"uint8 matched_radar_id\n"
"\n"
"float32 obstacle_angle_rate\n"
"float32 obstacle_scale_change\n"
"float32 obstacle_object_accel_x\n"
"bool obstacle_replaced\n"
"float32 obstacle_angle\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/SystemWarnings\n"
"uint8 sound_type\n"
"bool peds_in_dz\n"
"bool peds_fcw\n"
"uint8 time_indicator\n"
"\n"
"bool error_valid\n"
"uint8 error_code\n"
"bool zero_speed\n"
"bool headway_valid\n"
"float32 headway_measurement\n"
"\n"
"bool ldw_off\n"
"bool left_ldw_on\n"
"bool right_ldw_on\n"
"bool fcw_on\n"
"bool maintenance\n"
"bool failsafe\n"
"\n"
"bool tsr_enabled\n"
"bool hw_repeatable_enabled\n"
"uint8 headway_warning_level\n"
"uint8 tsr_warning_level\n"
"bool tamper_alert\n"
"================================================================================\n"
"MSG: mobileye_msgs/CarInfo\n"
"bool high_beam\n"
"bool low_beam\n"
"bool wipers\n"
"bool right_signal\n"
"bool left_signal\n"
"bool brake_signal\n"
"bool wipers_available\n"
"bool low_beam_available\n"
"bool high_beam_available\n"
"bool right_blink_available\n"
"bool left_blink_available\n"
"bool brake_available\n"
"bool speed_available\n"
"uint8 speed\n"
"uint8 shield_plus_settings\n"
"================================================================================\n"
"MSG: mobileye_msgs/TSR\n"
"uint8 vision_only_sign_type\n"
"uint8 supplementary_sign_type\n"
"float32 sign_position_x\n"
"float32 sign_position_y\n"
"float32 sign_position_z\n"
"uint8 filter_type\n"
"================================================================================\n"
"MSG: mobileye_msgs/TSRVisionOnlySign\n"
"uint8 vision_only_sign_type_display_1\n"
"uint8 vision_only_sign_type_display_2\n"
"uint8 vision_only_sign_type_display_3\n"
"uint8 vision_only_sign_type_display_4\n"
"\n"
"uint8 supplementary_sign_type_display_1\n"
"uint8 supplementary_sign_type_display_2\n"
"uint8 supplementary_sign_type_display_3\n"
"uint8 supplementary_sign_type_display_4\n"
"================================================================================\n"
"MSG: mobileye_msgs/Gyro\n"
"bool gyro_sensor_data_available\n"
"float32 x_axis_data\n"
"================================================================================\n"
"MSG: mobileye_msgs/SmartADAS\n"
"uint8 persistent_on_off\n"
"uint8 volume_level\n"
"uint8 hmw_level\n"
"uint8 ldw_volume_level\n"
"uint8 hmw_volume_level\n"
"uint8 ldw_level\n"
"uint8 pedestrian_warning_level\n"
"uint8 sli_warning_level\n"
"uint8 blinker_reminder_level\n"
"uint8 virtual_bumper_level\n"
"uint8 hw_repeatable_level\n"
"\n"
"uint8 buzzer_min_volume\n"
"uint8 buzzer_max_volume\n"
"uint8 buzzer_hmw_min_volume\n"
"uint8 buzzer_hmw_max_volume\n"
"uint8 buzzer_ldw_min_volume\n"
"uint8 buzzer_ldw_max_volume\n"
"uint8 ewiii_speed_indication\n"
"uint8 disable_system_off\n"
"uint8 calibration_source\n"
"uint8 ldw_min_value\n"
"uint8 ldw_max_value\n"
"uint8 ldw_speed\n"
"uint8 ped_min_value\n"
"uint8 ped_max_value\n"
"uint8 speed_for_high_low_beam_control\n"
"uint8 virtual_bumper_min_value\n"
"uint8 virtual_bumper_max_value\n"
"uint8 blinker_reminder_min_value\n"
"uint8 blinker_reminder_max_value\n"
"\n"
"uint8 hmw_min_value\n"
"uint8 hmw_max_value\n"
"uint8 hmw_repeatable_min_value\n"
"uint8 hmw_repeatable_max_value\n"
"uint8 sli_min_value\n"
"uint8 sli_max_value\n"
"uint8 sli_delta_round_step\n"
"uint8 sli_delta_round_upwards\n"
"uint8 country_code\n"
"uint8 sli_unit_speed\n"
"uint8 tamper_alert_on_frames\n"
"uint8 tamper_alert_off_frames\n"
"uint8 tamper_alert_enable_j1939\n"
"\n"
"bool[16] menu_ticks\n"
"\n"
"bool[16] advanced_menu_ticks\n"
"================================================================================\n"
"MSG: mobileye_msgs/SeeQ\n"
"uint32 serial_number\n"
"uint64 production_date\n"
"\n"
"uint8 brain_version_major\n"
"uint8 brain_version_minor\n"
"uint8 mest_version_major\n"
"uint8 mest_version_minor\n"
"uint8 mest_version_subminor\n"
"uint8 mest_version_patch_number\n"
;
  }

  static const char* value(const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_lane);
      stream.next(m.right_lane);
      stream.next(m.reference_points);
      stream.next(m.number_of_next_lane_markers);
      stream.next(m.next_lane);
      stream.next(m.lane);
      stream.next(m.obstacle_status);
      stream.next(m.obstacle_data);
      stream.next(m.system_warnings);
      stream.next(m.car_info);
      stream.next(m.tsr);
      stream.next(m.tsr_vision_only);
      stream.next(m.gyro);
      stream.next(m.smart_adas);
      stream.next(m.seeq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MobileyeInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::MobileyeInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::MobileyeInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_lane: ";
    s << std::endl;
    Printer< ::mobileye_msgs::LKAlane_<ContainerAllocator> >::stream(s, indent + "  ", v.left_lane);
    s << indent << "right_lane: ";
    s << std::endl;
    Printer< ::mobileye_msgs::LKAlane_<ContainerAllocator> >::stream(s, indent + "  ", v.right_lane);
    s << indent << "reference_points: ";
    s << std::endl;
    Printer< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_points);
    s << indent << "number_of_next_lane_markers: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_of_next_lane_markers);
    s << indent << "next_lane[]" << std::endl;
    for (size_t i = 0; i < v.next_lane.size(); ++i)
    {
      s << indent << "  next_lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mobileye_msgs::LKAlane_<ContainerAllocator> >::stream(s, indent + "    ", v.next_lane[i]);
    }
    s << indent << "lane: ";
    s << std::endl;
    Printer< ::mobileye_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "  ", v.lane);
    s << indent << "obstacle_status: ";
    s << std::endl;
    Printer< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle_status);
    s << indent << "obstacle_data[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_data.size(); ++i)
    {
      s << indent << "  obstacle_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_data[i]);
    }
    s << indent << "system_warnings: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >::stream(s, indent + "  ", v.system_warnings);
    s << indent << "car_info: ";
    s << std::endl;
    Printer< ::mobileye_msgs::CarInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.car_info);
    s << indent << "tsr[]" << std::endl;
    for (size_t i = 0; i < v.tsr.size(); ++i)
    {
      s << indent << "  tsr[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mobileye_msgs::TSR_<ContainerAllocator> >::stream(s, indent + "    ", v.tsr[i]);
    }
    s << indent << "tsr_vision_only: ";
    s << std::endl;
    Printer< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >::stream(s, indent + "  ", v.tsr_vision_only);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::mobileye_msgs::Gyro_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "smart_adas: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >::stream(s, indent + "  ", v.smart_adas);
    s << indent << "seeq: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SeeQ_<ContainerAllocator> >::stream(s, indent + "  ", v.seeq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_MOBILEYEINFO_H
