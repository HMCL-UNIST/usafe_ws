// Generated by gencpp from file mobileye_msgs/TSRVisionOnlySign.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_TSRVISIONONLYSIGN_H
#define MOBILEYE_MSGS_MESSAGE_TSRVISIONONLYSIGN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct TSRVisionOnlySign_
{
  typedef TSRVisionOnlySign_<ContainerAllocator> Type;

  TSRVisionOnlySign_()
    : vision_only_sign_type_display_1(0)
    , vision_only_sign_type_display_2(0)
    , vision_only_sign_type_display_3(0)
    , vision_only_sign_type_display_4(0)
    , supplementary_sign_type_display_1(0)
    , supplementary_sign_type_display_2(0)
    , supplementary_sign_type_display_3(0)
    , supplementary_sign_type_display_4(0)  {
    }
  TSRVisionOnlySign_(const ContainerAllocator& _alloc)
    : vision_only_sign_type_display_1(0)
    , vision_only_sign_type_display_2(0)
    , vision_only_sign_type_display_3(0)
    , vision_only_sign_type_display_4(0)
    , supplementary_sign_type_display_1(0)
    , supplementary_sign_type_display_2(0)
    , supplementary_sign_type_display_3(0)
    , supplementary_sign_type_display_4(0)  {
  (void)_alloc;
    }



   typedef uint8_t _vision_only_sign_type_display_1_type;
  _vision_only_sign_type_display_1_type vision_only_sign_type_display_1;

   typedef uint8_t _vision_only_sign_type_display_2_type;
  _vision_only_sign_type_display_2_type vision_only_sign_type_display_2;

   typedef uint8_t _vision_only_sign_type_display_3_type;
  _vision_only_sign_type_display_3_type vision_only_sign_type_display_3;

   typedef uint8_t _vision_only_sign_type_display_4_type;
  _vision_only_sign_type_display_4_type vision_only_sign_type_display_4;

   typedef uint8_t _supplementary_sign_type_display_1_type;
  _supplementary_sign_type_display_1_type supplementary_sign_type_display_1;

   typedef uint8_t _supplementary_sign_type_display_2_type;
  _supplementary_sign_type_display_2_type supplementary_sign_type_display_2;

   typedef uint8_t _supplementary_sign_type_display_3_type;
  _supplementary_sign_type_display_3_type supplementary_sign_type_display_3;

   typedef uint8_t _supplementary_sign_type_display_4_type;
  _supplementary_sign_type_display_4_type supplementary_sign_type_display_4;





  typedef boost::shared_ptr< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> const> ConstPtr;

}; // struct TSRVisionOnlySign_

typedef ::mobileye_msgs::TSRVisionOnlySign_<std::allocator<void> > TSRVisionOnlySign;

typedef boost::shared_ptr< ::mobileye_msgs::TSRVisionOnlySign > TSRVisionOnlySignPtr;
typedef boost::shared_ptr< ::mobileye_msgs::TSRVisionOnlySign const> TSRVisionOnlySignConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator1> & lhs, const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator2> & rhs)
{
  return lhs.vision_only_sign_type_display_1 == rhs.vision_only_sign_type_display_1 &&
    lhs.vision_only_sign_type_display_2 == rhs.vision_only_sign_type_display_2 &&
    lhs.vision_only_sign_type_display_3 == rhs.vision_only_sign_type_display_3 &&
    lhs.vision_only_sign_type_display_4 == rhs.vision_only_sign_type_display_4 &&
    lhs.supplementary_sign_type_display_1 == rhs.supplementary_sign_type_display_1 &&
    lhs.supplementary_sign_type_display_2 == rhs.supplementary_sign_type_display_2 &&
    lhs.supplementary_sign_type_display_3 == rhs.supplementary_sign_type_display_3 &&
    lhs.supplementary_sign_type_display_4 == rhs.supplementary_sign_type_display_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator1> & lhs, const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81ad54807425b67a5be6ad808e97e8ee";
  }

  static const char* value(const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81ad54807425b67aULL;
  static const uint64_t static_value2 = 0x5be6ad808e97e8eeULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/TSRVisionOnlySign";
  }

  static const char* value(const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 vision_only_sign_type_display_1\n"
"uint8 vision_only_sign_type_display_2\n"
"uint8 vision_only_sign_type_display_3\n"
"uint8 vision_only_sign_type_display_4\n"
"\n"
"uint8 supplementary_sign_type_display_1\n"
"uint8 supplementary_sign_type_display_2\n"
"uint8 supplementary_sign_type_display_3\n"
"uint8 supplementary_sign_type_display_4\n"
;
  }

  static const char* value(const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vision_only_sign_type_display_1);
      stream.next(m.vision_only_sign_type_display_2);
      stream.next(m.vision_only_sign_type_display_3);
      stream.next(m.vision_only_sign_type_display_4);
      stream.next(m.supplementary_sign_type_display_1);
      stream.next(m.supplementary_sign_type_display_2);
      stream.next(m.supplementary_sign_type_display_3);
      stream.next(m.supplementary_sign_type_display_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TSRVisionOnlySign_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator>& v)
  {
    s << indent << "vision_only_sign_type_display_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type_display_1);
    s << indent << "vision_only_sign_type_display_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type_display_2);
    s << indent << "vision_only_sign_type_display_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type_display_3);
    s << indent << "vision_only_sign_type_display_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type_display_4);
    s << indent << "supplementary_sign_type_display_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supplementary_sign_type_display_1);
    s << indent << "supplementary_sign_type_display_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supplementary_sign_type_display_2);
    s << indent << "supplementary_sign_type_display_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supplementary_sign_type_display_3);
    s << indent << "supplementary_sign_type_display_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supplementary_sign_type_display_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_TSRVISIONONLYSIGN_H
