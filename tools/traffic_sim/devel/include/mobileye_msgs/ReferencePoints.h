// Generated by gencpp from file mobileye_msgs/ReferencePoints.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_REFERENCEPOINTS_H
#define MOBILEYE_MSGS_MESSAGE_REFERENCEPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct ReferencePoints_
{
  typedef ReferencePoints_<ContainerAllocator> Type;

  ReferencePoints_()
    : ref_point1_position(0.0)
    , ref_point1_distance(0.0)
    , ref_point1_validity(false)
    , ref_point2_position(0.0)
    , ref_point2_distance(0.0)
    , ref_point2_validity(false)  {
    }
  ReferencePoints_(const ContainerAllocator& _alloc)
    : ref_point1_position(0.0)
    , ref_point1_distance(0.0)
    , ref_point1_validity(false)
    , ref_point2_position(0.0)
    , ref_point2_distance(0.0)
    , ref_point2_validity(false)  {
  (void)_alloc;
    }



   typedef float _ref_point1_position_type;
  _ref_point1_position_type ref_point1_position;

   typedef float _ref_point1_distance_type;
  _ref_point1_distance_type ref_point1_distance;

   typedef uint8_t _ref_point1_validity_type;
  _ref_point1_validity_type ref_point1_validity;

   typedef float _ref_point2_position_type;
  _ref_point2_position_type ref_point2_position;

   typedef float _ref_point2_distance_type;
  _ref_point2_distance_type ref_point2_distance;

   typedef uint8_t _ref_point2_validity_type;
  _ref_point2_validity_type ref_point2_validity;





  typedef boost::shared_ptr< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> const> ConstPtr;

}; // struct ReferencePoints_

typedef ::mobileye_msgs::ReferencePoints_<std::allocator<void> > ReferencePoints;

typedef boost::shared_ptr< ::mobileye_msgs::ReferencePoints > ReferencePointsPtr;
typedef boost::shared_ptr< ::mobileye_msgs::ReferencePoints const> ReferencePointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::ReferencePoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::ReferencePoints_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ReferencePoints_<ContainerAllocator2> & rhs)
{
  return lhs.ref_point1_position == rhs.ref_point1_position &&
    lhs.ref_point1_distance == rhs.ref_point1_distance &&
    lhs.ref_point1_validity == rhs.ref_point1_validity &&
    lhs.ref_point2_position == rhs.ref_point2_position &&
    lhs.ref_point2_distance == rhs.ref_point2_distance &&
    lhs.ref_point2_validity == rhs.ref_point2_validity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::ReferencePoints_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ReferencePoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56eb2a2d0b9b9695b81746d73432e3b8";
  }

  static const char* value(const ::mobileye_msgs::ReferencePoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56eb2a2d0b9b9695ULL;
  static const uint64_t static_value2 = 0xb81746d73432e3b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/ReferencePoints";
  }

  static const char* value(const ::mobileye_msgs::ReferencePoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ref_point1_position\n"
"float32 ref_point1_distance\n"
"bool ref_point1_validity\n"
"float32 ref_point2_position\n"
"float32 ref_point2_distance\n"
"bool ref_point2_validity\n"
;
  }

  static const char* value(const ::mobileye_msgs::ReferencePoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ref_point1_position);
      stream.next(m.ref_point1_distance);
      stream.next(m.ref_point1_validity);
      stream.next(m.ref_point2_position);
      stream.next(m.ref_point2_distance);
      stream.next(m.ref_point2_validity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReferencePoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::ReferencePoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::ReferencePoints_<ContainerAllocator>& v)
  {
    s << indent << "ref_point1_position: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point1_position);
    s << indent << "ref_point1_distance: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point1_distance);
    s << indent << "ref_point1_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ref_point1_validity);
    s << indent << "ref_point2_position: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point2_position);
    s << indent << "ref_point2_distance: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point2_distance);
    s << indent << "ref_point2_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ref_point2_validity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_REFERENCEPOINTS_H
