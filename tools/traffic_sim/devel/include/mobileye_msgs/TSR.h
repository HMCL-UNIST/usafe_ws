// Generated by gencpp from file mobileye_msgs/TSR.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_TSR_H
#define MOBILEYE_MSGS_MESSAGE_TSR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct TSR_
{
  typedef TSR_<ContainerAllocator> Type;

  TSR_()
    : vision_only_sign_type(0)
    , supplementary_sign_type(0)
    , sign_position_x(0.0)
    , sign_position_y(0.0)
    , sign_position_z(0.0)
    , filter_type(0)  {
    }
  TSR_(const ContainerAllocator& _alloc)
    : vision_only_sign_type(0)
    , supplementary_sign_type(0)
    , sign_position_x(0.0)
    , sign_position_y(0.0)
    , sign_position_z(0.0)
    , filter_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _vision_only_sign_type_type;
  _vision_only_sign_type_type vision_only_sign_type;

   typedef uint8_t _supplementary_sign_type_type;
  _supplementary_sign_type_type supplementary_sign_type;

   typedef float _sign_position_x_type;
  _sign_position_x_type sign_position_x;

   typedef float _sign_position_y_type;
  _sign_position_y_type sign_position_y;

   typedef float _sign_position_z_type;
  _sign_position_z_type sign_position_z;

   typedef uint8_t _filter_type_type;
  _filter_type_type filter_type;





  typedef boost::shared_ptr< ::mobileye_msgs::TSR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::TSR_<ContainerAllocator> const> ConstPtr;

}; // struct TSR_

typedef ::mobileye_msgs::TSR_<std::allocator<void> > TSR;

typedef boost::shared_ptr< ::mobileye_msgs::TSR > TSRPtr;
typedef boost::shared_ptr< ::mobileye_msgs::TSR const> TSRConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::TSR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::TSR_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::TSR_<ContainerAllocator1> & lhs, const ::mobileye_msgs::TSR_<ContainerAllocator2> & rhs)
{
  return lhs.vision_only_sign_type == rhs.vision_only_sign_type &&
    lhs.supplementary_sign_type == rhs.supplementary_sign_type &&
    lhs.sign_position_x == rhs.sign_position_x &&
    lhs.sign_position_y == rhs.sign_position_y &&
    lhs.sign_position_z == rhs.sign_position_z &&
    lhs.filter_type == rhs.filter_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::TSR_<ContainerAllocator1> & lhs, const ::mobileye_msgs::TSR_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::TSR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::TSR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::TSR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::TSR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::TSR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::TSR_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::TSR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b21293c7f6ed978e4a364de1d436a9c";
  }

  static const char* value(const ::mobileye_msgs::TSR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b21293c7f6ed978ULL;
  static const uint64_t static_value2 = 0xe4a364de1d436a9cULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::TSR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/TSR";
  }

  static const char* value(const ::mobileye_msgs::TSR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::TSR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 vision_only_sign_type\n"
"uint8 supplementary_sign_type\n"
"float32 sign_position_x\n"
"float32 sign_position_y\n"
"float32 sign_position_z\n"
"uint8 filter_type\n"
;
  }

  static const char* value(const ::mobileye_msgs::TSR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::TSR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vision_only_sign_type);
      stream.next(m.supplementary_sign_type);
      stream.next(m.sign_position_x);
      stream.next(m.sign_position_y);
      stream.next(m.sign_position_z);
      stream.next(m.filter_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TSR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::TSR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::TSR_<ContainerAllocator>& v)
  {
    s << indent << "vision_only_sign_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vision_only_sign_type);
    s << indent << "supplementary_sign_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.supplementary_sign_type);
    s << indent << "sign_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.sign_position_x);
    s << indent << "sign_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.sign_position_y);
    s << indent << "sign_position_z: ";
    Printer<float>::stream(s, indent + "  ", v.sign_position_z);
    s << indent << "filter_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filter_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_TSR_H
