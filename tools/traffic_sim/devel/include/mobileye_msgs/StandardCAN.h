// Generated by gencpp from file mobileye_msgs/StandardCAN.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_STANDARDCAN_H
#define MOBILEYE_MSGS_MESSAGE_STANDARDCAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mobileye_msgs/SystemWarnings.h>
#include <mobileye_msgs/CarInfo.h>
#include <mobileye_msgs/TSR.h>
#include <mobileye_msgs/TSRVisionOnlySign.h>
#include <mobileye_msgs/Gyro.h>
#include <mobileye_msgs/SmartADAS.h>
#include <mobileye_msgs/SeeQ.h>

namespace mobileye_msgs
{
template <class ContainerAllocator>
struct StandardCAN_
{
  typedef StandardCAN_<ContainerAllocator> Type;

  StandardCAN_()
    : system_warnings()
    , car_info()
    , tsr()
    , tsr_vision_only()
    , gyro()
    , smart_adas()
    , seeq()  {
    }
  StandardCAN_(const ContainerAllocator& _alloc)
    : system_warnings(_alloc)
    , car_info(_alloc)
    , tsr(_alloc)
    , tsr_vision_only(_alloc)
    , gyro(_alloc)
    , smart_adas(_alloc)
    , seeq(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mobileye_msgs::SystemWarnings_<ContainerAllocator>  _system_warnings_type;
  _system_warnings_type system_warnings;

   typedef  ::mobileye_msgs::CarInfo_<ContainerAllocator>  _car_info_type;
  _car_info_type car_info;

   typedef std::vector< ::mobileye_msgs::TSR_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mobileye_msgs::TSR_<ContainerAllocator> >::other >  _tsr_type;
  _tsr_type tsr;

   typedef  ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator>  _tsr_vision_only_type;
  _tsr_vision_only_type tsr_vision_only;

   typedef  ::mobileye_msgs::Gyro_<ContainerAllocator>  _gyro_type;
  _gyro_type gyro;

   typedef  ::mobileye_msgs::SmartADAS_<ContainerAllocator>  _smart_adas_type;
  _smart_adas_type smart_adas;

   typedef  ::mobileye_msgs::SeeQ_<ContainerAllocator>  _seeq_type;
  _seeq_type seeq;





  typedef boost::shared_ptr< ::mobileye_msgs::StandardCAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::StandardCAN_<ContainerAllocator> const> ConstPtr;

}; // struct StandardCAN_

typedef ::mobileye_msgs::StandardCAN_<std::allocator<void> > StandardCAN;

typedef boost::shared_ptr< ::mobileye_msgs::StandardCAN > StandardCANPtr;
typedef boost::shared_ptr< ::mobileye_msgs::StandardCAN const> StandardCANConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::StandardCAN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::StandardCAN_<ContainerAllocator1> & lhs, const ::mobileye_msgs::StandardCAN_<ContainerAllocator2> & rhs)
{
  return lhs.system_warnings == rhs.system_warnings &&
    lhs.car_info == rhs.car_info &&
    lhs.tsr == rhs.tsr &&
    lhs.tsr_vision_only == rhs.tsr_vision_only &&
    lhs.gyro == rhs.gyro &&
    lhs.smart_adas == rhs.smart_adas &&
    lhs.seeq == rhs.seeq;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::StandardCAN_<ContainerAllocator1> & lhs, const ::mobileye_msgs::StandardCAN_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::StandardCAN_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::StandardCAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::StandardCAN_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54e4cfc9bd8b43c069770d7bbb9295cd";
  }

  static const char* value(const ::mobileye_msgs::StandardCAN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54e4cfc9bd8b43c0ULL;
  static const uint64_t static_value2 = 0x69770d7bbb9295cdULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/StandardCAN";
  }

  static const char* value(const ::mobileye_msgs::StandardCAN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SystemWarnings system_warnings\n"
"CarInfo car_info\n"
"TSR[] tsr\n"
"TSRVisionOnlySign tsr_vision_only\n"
"Gyro gyro\n"
"SmartADAS smart_adas\n"
"SeeQ seeq\n"
"================================================================================\n"
"MSG: mobileye_msgs/SystemWarnings\n"
"uint8 sound_type\n"
"bool peds_in_dz\n"
"bool peds_fcw\n"
"uint8 time_indicator\n"
"\n"
"bool error_valid\n"
"uint8 error_code\n"
"bool zero_speed\n"
"bool headway_valid\n"
"float32 headway_measurement\n"
"\n"
"bool ldw_off\n"
"bool left_ldw_on\n"
"bool right_ldw_on\n"
"bool fcw_on\n"
"bool maintenance\n"
"bool failsafe\n"
"\n"
"bool tsr_enabled\n"
"bool hw_repeatable_enabled\n"
"uint8 headway_warning_level\n"
"uint8 tsr_warning_level\n"
"bool tamper_alert\n"
"================================================================================\n"
"MSG: mobileye_msgs/CarInfo\n"
"bool high_beam\n"
"bool low_beam\n"
"bool wipers\n"
"bool right_signal\n"
"bool left_signal\n"
"bool brake_signal\n"
"bool wipers_available\n"
"bool low_beam_available\n"
"bool high_beam_available\n"
"bool right_blink_available\n"
"bool left_blink_available\n"
"bool brake_available\n"
"bool speed_available\n"
"uint8 speed\n"
"uint8 shield_plus_settings\n"
"================================================================================\n"
"MSG: mobileye_msgs/TSR\n"
"uint8 vision_only_sign_type\n"
"uint8 supplementary_sign_type\n"
"float32 sign_position_x\n"
"float32 sign_position_y\n"
"float32 sign_position_z\n"
"uint8 filter_type\n"
"================================================================================\n"
"MSG: mobileye_msgs/TSRVisionOnlySign\n"
"uint8 vision_only_sign_type_display_1\n"
"uint8 vision_only_sign_type_display_2\n"
"uint8 vision_only_sign_type_display_3\n"
"uint8 vision_only_sign_type_display_4\n"
"\n"
"uint8 supplementary_sign_type_display_1\n"
"uint8 supplementary_sign_type_display_2\n"
"uint8 supplementary_sign_type_display_3\n"
"uint8 supplementary_sign_type_display_4\n"
"================================================================================\n"
"MSG: mobileye_msgs/Gyro\n"
"bool gyro_sensor_data_available\n"
"float32 x_axis_data\n"
"================================================================================\n"
"MSG: mobileye_msgs/SmartADAS\n"
"uint8 persistent_on_off\n"
"uint8 volume_level\n"
"uint8 hmw_level\n"
"uint8 ldw_volume_level\n"
"uint8 hmw_volume_level\n"
"uint8 ldw_level\n"
"uint8 pedestrian_warning_level\n"
"uint8 sli_warning_level\n"
"uint8 blinker_reminder_level\n"
"uint8 virtual_bumper_level\n"
"uint8 hw_repeatable_level\n"
"\n"
"uint8 buzzer_min_volume\n"
"uint8 buzzer_max_volume\n"
"uint8 buzzer_hmw_min_volume\n"
"uint8 buzzer_hmw_max_volume\n"
"uint8 buzzer_ldw_min_volume\n"
"uint8 buzzer_ldw_max_volume\n"
"uint8 ewiii_speed_indication\n"
"uint8 disable_system_off\n"
"uint8 calibration_source\n"
"uint8 ldw_min_value\n"
"uint8 ldw_max_value\n"
"uint8 ldw_speed\n"
"uint8 ped_min_value\n"
"uint8 ped_max_value\n"
"uint8 speed_for_high_low_beam_control\n"
"uint8 virtual_bumper_min_value\n"
"uint8 virtual_bumper_max_value\n"
"uint8 blinker_reminder_min_value\n"
"uint8 blinker_reminder_max_value\n"
"\n"
"uint8 hmw_min_value\n"
"uint8 hmw_max_value\n"
"uint8 hmw_repeatable_min_value\n"
"uint8 hmw_repeatable_max_value\n"
"uint8 sli_min_value\n"
"uint8 sli_max_value\n"
"uint8 sli_delta_round_step\n"
"uint8 sli_delta_round_upwards\n"
"uint8 country_code\n"
"uint8 sli_unit_speed\n"
"uint8 tamper_alert_on_frames\n"
"uint8 tamper_alert_off_frames\n"
"uint8 tamper_alert_enable_j1939\n"
"\n"
"bool[16] menu_ticks\n"
"\n"
"bool[16] advanced_menu_ticks\n"
"================================================================================\n"
"MSG: mobileye_msgs/SeeQ\n"
"uint32 serial_number\n"
"uint64 production_date\n"
"\n"
"uint8 brain_version_major\n"
"uint8 brain_version_minor\n"
"uint8 mest_version_major\n"
"uint8 mest_version_minor\n"
"uint8 mest_version_subminor\n"
"uint8 mest_version_patch_number\n"
;
  }

  static const char* value(const ::mobileye_msgs::StandardCAN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system_warnings);
      stream.next(m.car_info);
      stream.next(m.tsr);
      stream.next(m.tsr_vision_only);
      stream.next(m.gyro);
      stream.next(m.smart_adas);
      stream.next(m.seeq);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StandardCAN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::StandardCAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::StandardCAN_<ContainerAllocator>& v)
  {
    s << indent << "system_warnings: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SystemWarnings_<ContainerAllocator> >::stream(s, indent + "  ", v.system_warnings);
    s << indent << "car_info: ";
    s << std::endl;
    Printer< ::mobileye_msgs::CarInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.car_info);
    s << indent << "tsr[]" << std::endl;
    for (size_t i = 0; i < v.tsr.size(); ++i)
    {
      s << indent << "  tsr[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mobileye_msgs::TSR_<ContainerAllocator> >::stream(s, indent + "    ", v.tsr[i]);
    }
    s << indent << "tsr_vision_only: ";
    s << std::endl;
    Printer< ::mobileye_msgs::TSRVisionOnlySign_<ContainerAllocator> >::stream(s, indent + "  ", v.tsr_vision_only);
    s << indent << "gyro: ";
    s << std::endl;
    Printer< ::mobileye_msgs::Gyro_<ContainerAllocator> >::stream(s, indent + "  ", v.gyro);
    s << indent << "smart_adas: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SmartADAS_<ContainerAllocator> >::stream(s, indent + "  ", v.smart_adas);
    s << indent << "seeq: ";
    s << std::endl;
    Printer< ::mobileye_msgs::SeeQ_<ContainerAllocator> >::stream(s, indent + "  ", v.seeq);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_STANDARDCAN_H
