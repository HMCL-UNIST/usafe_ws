// Generated by gencpp from file mobileye_msgs/Gyro.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_GYRO_H
#define MOBILEYE_MSGS_MESSAGE_GYRO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct Gyro_
{
  typedef Gyro_<ContainerAllocator> Type;

  Gyro_()
    : gyro_sensor_data_available(false)
    , x_axis_data(0.0)  {
    }
  Gyro_(const ContainerAllocator& _alloc)
    : gyro_sensor_data_available(false)
    , x_axis_data(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _gyro_sensor_data_available_type;
  _gyro_sensor_data_available_type gyro_sensor_data_available;

   typedef float _x_axis_data_type;
  _x_axis_data_type x_axis_data;





  typedef boost::shared_ptr< ::mobileye_msgs::Gyro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::Gyro_<ContainerAllocator> const> ConstPtr;

}; // struct Gyro_

typedef ::mobileye_msgs::Gyro_<std::allocator<void> > Gyro;

typedef boost::shared_ptr< ::mobileye_msgs::Gyro > GyroPtr;
typedef boost::shared_ptr< ::mobileye_msgs::Gyro const> GyroConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::Gyro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::Gyro_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::Gyro_<ContainerAllocator1> & lhs, const ::mobileye_msgs::Gyro_<ContainerAllocator2> & rhs)
{
  return lhs.gyro_sensor_data_available == rhs.gyro_sensor_data_available &&
    lhs.x_axis_data == rhs.x_axis_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::Gyro_<ContainerAllocator1> & lhs, const ::mobileye_msgs::Gyro_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::Gyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::Gyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::Gyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::Gyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::Gyro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::Gyro_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::Gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15689ec0f13fb1c15689a8f65d1fda0b";
  }

  static const char* value(const ::mobileye_msgs::Gyro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15689ec0f13fb1c1ULL;
  static const uint64_t static_value2 = 0x5689a8f65d1fda0bULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::Gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/Gyro";
  }

  static const char* value(const ::mobileye_msgs::Gyro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::Gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool gyro_sensor_data_available\n"
"float32 x_axis_data\n"
;
  }

  static const char* value(const ::mobileye_msgs::Gyro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::Gyro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro_sensor_data_available);
      stream.next(m.x_axis_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gyro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::Gyro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::Gyro_<ContainerAllocator>& v)
  {
    s << indent << "gyro_sensor_data_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gyro_sensor_data_available);
    s << indent << "x_axis_data: ";
    Printer<float>::stream(s, indent + "  ", v.x_axis_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_GYRO_H
