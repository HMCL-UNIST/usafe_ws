// Generated by gencpp from file mobileye_msgs/CarInfo.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_CARINFO_H
#define MOBILEYE_MSGS_MESSAGE_CARINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct CarInfo_
{
  typedef CarInfo_<ContainerAllocator> Type;

  CarInfo_()
    : high_beam(false)
    , low_beam(false)
    , wipers(false)
    , right_signal(false)
    , left_signal(false)
    , brake_signal(false)
    , wipers_available(false)
    , low_beam_available(false)
    , high_beam_available(false)
    , right_blink_available(false)
    , left_blink_available(false)
    , brake_available(false)
    , speed_available(false)
    , speed(0)
    , shield_plus_settings(0)  {
    }
  CarInfo_(const ContainerAllocator& _alloc)
    : high_beam(false)
    , low_beam(false)
    , wipers(false)
    , right_signal(false)
    , left_signal(false)
    , brake_signal(false)
    , wipers_available(false)
    , low_beam_available(false)
    , high_beam_available(false)
    , right_blink_available(false)
    , left_blink_available(false)
    , brake_available(false)
    , speed_available(false)
    , speed(0)
    , shield_plus_settings(0)  {
  (void)_alloc;
    }



   typedef uint8_t _high_beam_type;
  _high_beam_type high_beam;

   typedef uint8_t _low_beam_type;
  _low_beam_type low_beam;

   typedef uint8_t _wipers_type;
  _wipers_type wipers;

   typedef uint8_t _right_signal_type;
  _right_signal_type right_signal;

   typedef uint8_t _left_signal_type;
  _left_signal_type left_signal;

   typedef uint8_t _brake_signal_type;
  _brake_signal_type brake_signal;

   typedef uint8_t _wipers_available_type;
  _wipers_available_type wipers_available;

   typedef uint8_t _low_beam_available_type;
  _low_beam_available_type low_beam_available;

   typedef uint8_t _high_beam_available_type;
  _high_beam_available_type high_beam_available;

   typedef uint8_t _right_blink_available_type;
  _right_blink_available_type right_blink_available;

   typedef uint8_t _left_blink_available_type;
  _left_blink_available_type left_blink_available;

   typedef uint8_t _brake_available_type;
  _brake_available_type brake_available;

   typedef uint8_t _speed_available_type;
  _speed_available_type speed_available;

   typedef uint8_t _speed_type;
  _speed_type speed;

   typedef uint8_t _shield_plus_settings_type;
  _shield_plus_settings_type shield_plus_settings;





  typedef boost::shared_ptr< ::mobileye_msgs::CarInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::CarInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CarInfo_

typedef ::mobileye_msgs::CarInfo_<std::allocator<void> > CarInfo;

typedef boost::shared_ptr< ::mobileye_msgs::CarInfo > CarInfoPtr;
typedef boost::shared_ptr< ::mobileye_msgs::CarInfo const> CarInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::CarInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::CarInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::CarInfo_<ContainerAllocator1> & lhs, const ::mobileye_msgs::CarInfo_<ContainerAllocator2> & rhs)
{
  return lhs.high_beam == rhs.high_beam &&
    lhs.low_beam == rhs.low_beam &&
    lhs.wipers == rhs.wipers &&
    lhs.right_signal == rhs.right_signal &&
    lhs.left_signal == rhs.left_signal &&
    lhs.brake_signal == rhs.brake_signal &&
    lhs.wipers_available == rhs.wipers_available &&
    lhs.low_beam_available == rhs.low_beam_available &&
    lhs.high_beam_available == rhs.high_beam_available &&
    lhs.right_blink_available == rhs.right_blink_available &&
    lhs.left_blink_available == rhs.left_blink_available &&
    lhs.brake_available == rhs.brake_available &&
    lhs.speed_available == rhs.speed_available &&
    lhs.speed == rhs.speed &&
    lhs.shield_plus_settings == rhs.shield_plus_settings;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::CarInfo_<ContainerAllocator1> & lhs, const ::mobileye_msgs::CarInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::CarInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::CarInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::CarInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50aff2fafecf310fa3fc9bcf4c9a5c85";
  }

  static const char* value(const ::mobileye_msgs::CarInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50aff2fafecf310fULL;
  static const uint64_t static_value2 = 0xa3fc9bcf4c9a5c85ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/CarInfo";
  }

  static const char* value(const ::mobileye_msgs::CarInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool high_beam\n"
"bool low_beam\n"
"bool wipers\n"
"bool right_signal\n"
"bool left_signal\n"
"bool brake_signal\n"
"bool wipers_available\n"
"bool low_beam_available\n"
"bool high_beam_available\n"
"bool right_blink_available\n"
"bool left_blink_available\n"
"bool brake_available\n"
"bool speed_available\n"
"uint8 speed\n"
"uint8 shield_plus_settings\n"
;
  }

  static const char* value(const ::mobileye_msgs::CarInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.high_beam);
      stream.next(m.low_beam);
      stream.next(m.wipers);
      stream.next(m.right_signal);
      stream.next(m.left_signal);
      stream.next(m.brake_signal);
      stream.next(m.wipers_available);
      stream.next(m.low_beam_available);
      stream.next(m.high_beam_available);
      stream.next(m.right_blink_available);
      stream.next(m.left_blink_available);
      stream.next(m.brake_available);
      stream.next(m.speed_available);
      stream.next(m.speed);
      stream.next(m.shield_plus_settings);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::CarInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::CarInfo_<ContainerAllocator>& v)
  {
    s << indent << "high_beam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_beam);
    s << indent << "low_beam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_beam);
    s << indent << "wipers: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wipers);
    s << indent << "right_signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_signal);
    s << indent << "left_signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_signal);
    s << indent << "brake_signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_signal);
    s << indent << "wipers_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wipers_available);
    s << indent << "low_beam_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_beam_available);
    s << indent << "high_beam_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_beam_available);
    s << indent << "right_blink_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_blink_available);
    s << indent << "left_blink_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_blink_available);
    s << indent << "brake_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_available);
    s << indent << "speed_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_available);
    s << indent << "speed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed);
    s << indent << "shield_plus_settings: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shield_plus_settings);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_CARINFO_H
