// Generated by gencpp from file mobileye_msgs/SeeQ.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_SEEQ_H
#define MOBILEYE_MSGS_MESSAGE_SEEQ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct SeeQ_
{
  typedef SeeQ_<ContainerAllocator> Type;

  SeeQ_()
    : serial_number(0)
    , production_date(0)
    , brain_version_major(0)
    , brain_version_minor(0)
    , mest_version_major(0)
    , mest_version_minor(0)
    , mest_version_subminor(0)
    , mest_version_patch_number(0)  {
    }
  SeeQ_(const ContainerAllocator& _alloc)
    : serial_number(0)
    , production_date(0)
    , brain_version_major(0)
    , brain_version_minor(0)
    , mest_version_major(0)
    , mest_version_minor(0)
    , mest_version_subminor(0)
    , mest_version_patch_number(0)  {
  (void)_alloc;
    }



   typedef uint32_t _serial_number_type;
  _serial_number_type serial_number;

   typedef uint64_t _production_date_type;
  _production_date_type production_date;

   typedef uint8_t _brain_version_major_type;
  _brain_version_major_type brain_version_major;

   typedef uint8_t _brain_version_minor_type;
  _brain_version_minor_type brain_version_minor;

   typedef uint8_t _mest_version_major_type;
  _mest_version_major_type mest_version_major;

   typedef uint8_t _mest_version_minor_type;
  _mest_version_minor_type mest_version_minor;

   typedef uint8_t _mest_version_subminor_type;
  _mest_version_subminor_type mest_version_subminor;

   typedef uint8_t _mest_version_patch_number_type;
  _mest_version_patch_number_type mest_version_patch_number;





  typedef boost::shared_ptr< ::mobileye_msgs::SeeQ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::SeeQ_<ContainerAllocator> const> ConstPtr;

}; // struct SeeQ_

typedef ::mobileye_msgs::SeeQ_<std::allocator<void> > SeeQ;

typedef boost::shared_ptr< ::mobileye_msgs::SeeQ > SeeQPtr;
typedef boost::shared_ptr< ::mobileye_msgs::SeeQ const> SeeQConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::SeeQ_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::SeeQ_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::SeeQ_<ContainerAllocator1> & lhs, const ::mobileye_msgs::SeeQ_<ContainerAllocator2> & rhs)
{
  return lhs.serial_number == rhs.serial_number &&
    lhs.production_date == rhs.production_date &&
    lhs.brain_version_major == rhs.brain_version_major &&
    lhs.brain_version_minor == rhs.brain_version_minor &&
    lhs.mest_version_major == rhs.mest_version_major &&
    lhs.mest_version_minor == rhs.mest_version_minor &&
    lhs.mest_version_subminor == rhs.mest_version_subminor &&
    lhs.mest_version_patch_number == rhs.mest_version_patch_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::SeeQ_<ContainerAllocator1> & lhs, const ::mobileye_msgs::SeeQ_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::SeeQ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::SeeQ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::SeeQ_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd0f4ac945460fd2020ae1118ef5c53f";
  }

  static const char* value(const ::mobileye_msgs::SeeQ_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd0f4ac945460fd2ULL;
  static const uint64_t static_value2 = 0x020ae1118ef5c53fULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/SeeQ";
  }

  static const char* value(const ::mobileye_msgs::SeeQ_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 serial_number\n"
"uint64 production_date\n"
"\n"
"uint8 brain_version_major\n"
"uint8 brain_version_minor\n"
"uint8 mest_version_major\n"
"uint8 mest_version_minor\n"
"uint8 mest_version_subminor\n"
"uint8 mest_version_patch_number\n"
;
  }

  static const char* value(const ::mobileye_msgs::SeeQ_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.serial_number);
      stream.next(m.production_date);
      stream.next(m.brain_version_major);
      stream.next(m.brain_version_minor);
      stream.next(m.mest_version_major);
      stream.next(m.mest_version_minor);
      stream.next(m.mest_version_subminor);
      stream.next(m.mest_version_patch_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SeeQ_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::SeeQ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::SeeQ_<ContainerAllocator>& v)
  {
    s << indent << "serial_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serial_number);
    s << indent << "production_date: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.production_date);
    s << indent << "brain_version_major: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brain_version_major);
    s << indent << "brain_version_minor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brain_version_minor);
    s << indent << "mest_version_major: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mest_version_major);
    s << indent << "mest_version_minor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mest_version_minor);
    s << indent << "mest_version_subminor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mest_version_subminor);
    s << indent << "mest_version_patch_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mest_version_patch_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_SEEQ_H
