// Generated by gencpp from file mobileye_msgs/ObstacleData.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_OBSTACLEDATA_H
#define MOBILEYE_MSGS_MESSAGE_OBSTACLEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct ObstacleData_
{
  typedef ObstacleData_<ContainerAllocator> Type;

  ObstacleData_()
    : obstacle_id(0)
    , obstacle_position_x(0.0)
    , obstacle_position_y(0.0)
    , obstacle_relative_velocity_x(0.0)
    , obstacle_type(0)
    , obstacle_status(0)
    , obstacle_brake_lights(false)
    , cut_in_and_out(0)
    , blinker_info(0)
    , obstacle_valid(0)
    , obstacle_length(0.0)
    , obstacle_width(0.0)
    , obstacle_age(0)
    , obstacle_lane(0)
    , cipv_flag(0)
    , radar_position_x(0.0)
    , radar_velocity_x(0.0)
    , radar_match_confidence(0)
    , matched_radar_id(0)
    , obstacle_angle_rate(0.0)
    , obstacle_scale_change(0.0)
    , obstacle_object_accel_x(0.0)
    , obstacle_replaced(false)
    , obstacle_angle(0.0)  {
    }
  ObstacleData_(const ContainerAllocator& _alloc)
    : obstacle_id(0)
    , obstacle_position_x(0.0)
    , obstacle_position_y(0.0)
    , obstacle_relative_velocity_x(0.0)
    , obstacle_type(0)
    , obstacle_status(0)
    , obstacle_brake_lights(false)
    , cut_in_and_out(0)
    , blinker_info(0)
    , obstacle_valid(0)
    , obstacle_length(0.0)
    , obstacle_width(0.0)
    , obstacle_age(0)
    , obstacle_lane(0)
    , cipv_flag(0)
    , radar_position_x(0.0)
    , radar_velocity_x(0.0)
    , radar_match_confidence(0)
    , matched_radar_id(0)
    , obstacle_angle_rate(0.0)
    , obstacle_scale_change(0.0)
    , obstacle_object_accel_x(0.0)
    , obstacle_replaced(false)
    , obstacle_angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _obstacle_id_type;
  _obstacle_id_type obstacle_id;

   typedef float _obstacle_position_x_type;
  _obstacle_position_x_type obstacle_position_x;

   typedef float _obstacle_position_y_type;
  _obstacle_position_y_type obstacle_position_y;

   typedef float _obstacle_relative_velocity_x_type;
  _obstacle_relative_velocity_x_type obstacle_relative_velocity_x;

   typedef uint8_t _obstacle_type_type;
  _obstacle_type_type obstacle_type;

   typedef uint8_t _obstacle_status_type;
  _obstacle_status_type obstacle_status;

   typedef uint8_t _obstacle_brake_lights_type;
  _obstacle_brake_lights_type obstacle_brake_lights;

   typedef uint8_t _cut_in_and_out_type;
  _cut_in_and_out_type cut_in_and_out;

   typedef uint8_t _blinker_info_type;
  _blinker_info_type blinker_info;

   typedef uint8_t _obstacle_valid_type;
  _obstacle_valid_type obstacle_valid;

   typedef float _obstacle_length_type;
  _obstacle_length_type obstacle_length;

   typedef float _obstacle_width_type;
  _obstacle_width_type obstacle_width;

   typedef uint8_t _obstacle_age_type;
  _obstacle_age_type obstacle_age;

   typedef uint8_t _obstacle_lane_type;
  _obstacle_lane_type obstacle_lane;

   typedef uint8_t _cipv_flag_type;
  _cipv_flag_type cipv_flag;

   typedef float _radar_position_x_type;
  _radar_position_x_type radar_position_x;

   typedef float _radar_velocity_x_type;
  _radar_velocity_x_type radar_velocity_x;

   typedef uint8_t _radar_match_confidence_type;
  _radar_match_confidence_type radar_match_confidence;

   typedef uint8_t _matched_radar_id_type;
  _matched_radar_id_type matched_radar_id;

   typedef float _obstacle_angle_rate_type;
  _obstacle_angle_rate_type obstacle_angle_rate;

   typedef float _obstacle_scale_change_type;
  _obstacle_scale_change_type obstacle_scale_change;

   typedef float _obstacle_object_accel_x_type;
  _obstacle_object_accel_x_type obstacle_object_accel_x;

   typedef uint8_t _obstacle_replaced_type;
  _obstacle_replaced_type obstacle_replaced;

   typedef float _obstacle_angle_type;
  _obstacle_angle_type obstacle_angle;





  typedef boost::shared_ptr< ::mobileye_msgs::ObstacleData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::ObstacleData_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleData_

typedef ::mobileye_msgs::ObstacleData_<std::allocator<void> > ObstacleData;

typedef boost::shared_ptr< ::mobileye_msgs::ObstacleData > ObstacleDataPtr;
typedef boost::shared_ptr< ::mobileye_msgs::ObstacleData const> ObstacleDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::ObstacleData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::ObstacleData_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ObstacleData_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_id == rhs.obstacle_id &&
    lhs.obstacle_position_x == rhs.obstacle_position_x &&
    lhs.obstacle_position_y == rhs.obstacle_position_y &&
    lhs.obstacle_relative_velocity_x == rhs.obstacle_relative_velocity_x &&
    lhs.obstacle_type == rhs.obstacle_type &&
    lhs.obstacle_status == rhs.obstacle_status &&
    lhs.obstacle_brake_lights == rhs.obstacle_brake_lights &&
    lhs.cut_in_and_out == rhs.cut_in_and_out &&
    lhs.blinker_info == rhs.blinker_info &&
    lhs.obstacle_valid == rhs.obstacle_valid &&
    lhs.obstacle_length == rhs.obstacle_length &&
    lhs.obstacle_width == rhs.obstacle_width &&
    lhs.obstacle_age == rhs.obstacle_age &&
    lhs.obstacle_lane == rhs.obstacle_lane &&
    lhs.cipv_flag == rhs.cipv_flag &&
    lhs.radar_position_x == rhs.radar_position_x &&
    lhs.radar_velocity_x == rhs.radar_velocity_x &&
    lhs.radar_match_confidence == rhs.radar_match_confidence &&
    lhs.matched_radar_id == rhs.matched_radar_id &&
    lhs.obstacle_angle_rate == rhs.obstacle_angle_rate &&
    lhs.obstacle_scale_change == rhs.obstacle_scale_change &&
    lhs.obstacle_object_accel_x == rhs.obstacle_object_accel_x &&
    lhs.obstacle_replaced == rhs.obstacle_replaced &&
    lhs.obstacle_angle == rhs.obstacle_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::ObstacleData_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ObstacleData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ObstacleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ObstacleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ObstacleData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f95ac1fed6a2bf8af234e0196c675c0";
  }

  static const char* value(const ::mobileye_msgs::ObstacleData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f95ac1fed6a2bf8ULL;
  static const uint64_t static_value2 = 0xaf234e0196c675c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/ObstacleData";
  }

  static const char* value(const ::mobileye_msgs::ObstacleData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 obstacle_id\n"
"float32 obstacle_position_x\n"
"float32 obstacle_position_y\n"
"float32 obstacle_relative_velocity_x\n"
"\n"
"uint8 obstacle_type\n"
"uint8 obstacle_status\n"
"bool obstacle_brake_lights\n"
"uint8 cut_in_and_out\n"
"uint8 blinker_info\n"
"uint8 obstacle_valid\n"
"\n"
"float32 obstacle_length\n"
"float32 obstacle_width\n"
"uint8 obstacle_age\n"
"uint8 obstacle_lane\n"
"uint8 cipv_flag\n"
"\n"
"float32 radar_position_x\n"
"float32 radar_velocity_x\n"
"uint8 radar_match_confidence\n"
"uint8 matched_radar_id\n"
"\n"
"float32 obstacle_angle_rate\n"
"float32 obstacle_scale_change\n"
"float32 obstacle_object_accel_x\n"
"bool obstacle_replaced\n"
"float32 obstacle_angle\n"
;
  }

  static const char* value(const ::mobileye_msgs::ObstacleData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_id);
      stream.next(m.obstacle_position_x);
      stream.next(m.obstacle_position_y);
      stream.next(m.obstacle_relative_velocity_x);
      stream.next(m.obstacle_type);
      stream.next(m.obstacle_status);
      stream.next(m.obstacle_brake_lights);
      stream.next(m.cut_in_and_out);
      stream.next(m.blinker_info);
      stream.next(m.obstacle_valid);
      stream.next(m.obstacle_length);
      stream.next(m.obstacle_width);
      stream.next(m.obstacle_age);
      stream.next(m.obstacle_lane);
      stream.next(m.cipv_flag);
      stream.next(m.radar_position_x);
      stream.next(m.radar_velocity_x);
      stream.next(m.radar_match_confidence);
      stream.next(m.matched_radar_id);
      stream.next(m.obstacle_angle_rate);
      stream.next(m.obstacle_scale_change);
      stream.next(m.obstacle_object_accel_x);
      stream.next(m.obstacle_replaced);
      stream.next(m.obstacle_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::ObstacleData_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_id);
    s << indent << "obstacle_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_position_x);
    s << indent << "obstacle_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_position_y);
    s << indent << "obstacle_relative_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_relative_velocity_x);
    s << indent << "obstacle_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_type);
    s << indent << "obstacle_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_status);
    s << indent << "obstacle_brake_lights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_brake_lights);
    s << indent << "cut_in_and_out: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cut_in_and_out);
    s << indent << "blinker_info: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blinker_info);
    s << indent << "obstacle_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_valid);
    s << indent << "obstacle_length: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_length);
    s << indent << "obstacle_width: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_width);
    s << indent << "obstacle_age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_age);
    s << indent << "obstacle_lane: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_lane);
    s << indent << "cipv_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cipv_flag);
    s << indent << "radar_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.radar_position_x);
    s << indent << "radar_velocity_x: ";
    Printer<float>::stream(s, indent + "  ", v.radar_velocity_x);
    s << indent << "radar_match_confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_match_confidence);
    s << indent << "matched_radar_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.matched_radar_id);
    s << indent << "obstacle_angle_rate: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_angle_rate);
    s << indent << "obstacle_scale_change: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_scale_change);
    s << indent << "obstacle_object_accel_x: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_object_accel_x);
    s << indent << "obstacle_replaced: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_replaced);
    s << indent << "obstacle_angle: ";
    Printer<float>::stream(s, indent + "  ", v.obstacle_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_OBSTACLEDATA_H
