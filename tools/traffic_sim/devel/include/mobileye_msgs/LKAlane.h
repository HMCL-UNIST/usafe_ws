// Generated by gencpp from file mobileye_msgs/LKAlane.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_LKALANE_H
#define MOBILEYE_MSGS_MESSAGE_LKALANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye_msgs
{
template <class ContainerAllocator>
struct LKAlane_
{
  typedef LKAlane_<ContainerAllocator> Type;

  LKAlane_()
    : lane_type(0)
    , quality(0)
    , model_degree(0)
    , position_parameter_c0(0.0)
    , curvature_parameter_c2(0.0)
    , curvature_derivative_c3(0.0)
    , width_marking(0.0)
    , heading_angle_parameter_c1(0.0)
    , view_range(0.0)
    , view_range_availability(false)  {
    }
  LKAlane_(const ContainerAllocator& _alloc)
    : lane_type(0)
    , quality(0)
    , model_degree(0)
    , position_parameter_c0(0.0)
    , curvature_parameter_c2(0.0)
    , curvature_derivative_c3(0.0)
    , width_marking(0.0)
    , heading_angle_parameter_c1(0.0)
    , view_range(0.0)
    , view_range_availability(false)  {
  (void)_alloc;
    }



   typedef uint8_t _lane_type_type;
  _lane_type_type lane_type;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint8_t _model_degree_type;
  _model_degree_type model_degree;

   typedef float _position_parameter_c0_type;
  _position_parameter_c0_type position_parameter_c0;

   typedef float _curvature_parameter_c2_type;
  _curvature_parameter_c2_type curvature_parameter_c2;

   typedef float _curvature_derivative_c3_type;
  _curvature_derivative_c3_type curvature_derivative_c3;

   typedef float _width_marking_type;
  _width_marking_type width_marking;

   typedef float _heading_angle_parameter_c1_type;
  _heading_angle_parameter_c1_type heading_angle_parameter_c1;

   typedef float _view_range_type;
  _view_range_type view_range;

   typedef uint8_t _view_range_availability_type;
  _view_range_availability_type view_range_availability;





  typedef boost::shared_ptr< ::mobileye_msgs::LKAlane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::LKAlane_<ContainerAllocator> const> ConstPtr;

}; // struct LKAlane_

typedef ::mobileye_msgs::LKAlane_<std::allocator<void> > LKAlane;

typedef boost::shared_ptr< ::mobileye_msgs::LKAlane > LKAlanePtr;
typedef boost::shared_ptr< ::mobileye_msgs::LKAlane const> LKAlaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::LKAlane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::LKAlane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::LKAlane_<ContainerAllocator1> & lhs, const ::mobileye_msgs::LKAlane_<ContainerAllocator2> & rhs)
{
  return lhs.lane_type == rhs.lane_type &&
    lhs.quality == rhs.quality &&
    lhs.model_degree == rhs.model_degree &&
    lhs.position_parameter_c0 == rhs.position_parameter_c0 &&
    lhs.curvature_parameter_c2 == rhs.curvature_parameter_c2 &&
    lhs.curvature_derivative_c3 == rhs.curvature_derivative_c3 &&
    lhs.width_marking == rhs.width_marking &&
    lhs.heading_angle_parameter_c1 == rhs.heading_angle_parameter_c1 &&
    lhs.view_range == rhs.view_range &&
    lhs.view_range_availability == rhs.view_range_availability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::LKAlane_<ContainerAllocator1> & lhs, const ::mobileye_msgs::LKAlane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::LKAlane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::LKAlane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::LKAlane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b414dd7d22f435b47d4035bf3d8fde4";
  }

  static const char* value(const ::mobileye_msgs::LKAlane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b414dd7d22f435bULL;
  static const uint64_t static_value2 = 0x47d4035bf3d8fde4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/LKAlane";
  }

  static const char* value(const ::mobileye_msgs::LKAlane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 lane_type\n"
"uint8 quality\n"
"uint8 model_degree\n"
"\n"
"float32 position_parameter_c0\n"
"float32 curvature_parameter_c2\n"
"float32 curvature_derivative_c3\n"
"float32 width_marking\n"
"\n"
"float32 heading_angle_parameter_c1\n"
"float32 view_range\n"
"bool view_range_availability\n"
;
  }

  static const char* value(const ::mobileye_msgs::LKAlane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_type);
      stream.next(m.quality);
      stream.next(m.model_degree);
      stream.next(m.position_parameter_c0);
      stream.next(m.curvature_parameter_c2);
      stream.next(m.curvature_derivative_c3);
      stream.next(m.width_marking);
      stream.next(m.heading_angle_parameter_c1);
      stream.next(m.view_range);
      stream.next(m.view_range_availability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LKAlane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::LKAlane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::LKAlane_<ContainerAllocator>& v)
  {
    s << indent << "lane_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_type);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "model_degree: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.model_degree);
    s << indent << "position_parameter_c0: ";
    Printer<float>::stream(s, indent + "  ", v.position_parameter_c0);
    s << indent << "curvature_parameter_c2: ";
    Printer<float>::stream(s, indent + "  ", v.curvature_parameter_c2);
    s << indent << "curvature_derivative_c3: ";
    Printer<float>::stream(s, indent + "  ", v.curvature_derivative_c3);
    s << indent << "width_marking: ";
    Printer<float>::stream(s, indent + "  ", v.width_marking);
    s << indent << "heading_angle_parameter_c1: ";
    Printer<float>::stream(s, indent + "  ", v.heading_angle_parameter_c1);
    s << indent << "view_range: ";
    Printer<float>::stream(s, indent + "  ", v.view_range);
    s << indent << "view_range_availability: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.view_range_availability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_LKALANE_H
