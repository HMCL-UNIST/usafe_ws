// Generated by gencpp from file mobileye_msgs/ExtLogData.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MSGS_MESSAGE_EXTLOGDATA_H
#define MOBILEYE_MSGS_MESSAGE_EXTLOGDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mobileye_msgs/Lane.h>
#include <mobileye_msgs/ObstacleStatus.h>
#include <mobileye_msgs/ObstacleData.h>

namespace mobileye_msgs
{
template <class ContainerAllocator>
struct ExtLogData_
{
  typedef ExtLogData_<ContainerAllocator> Type;

  ExtLogData_()
    : header()
    , lane()
    , obstacle_status()
    , obstacle_data()  {
    }
  ExtLogData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane(_alloc)
    , obstacle_status(_alloc)
    , obstacle_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mobileye_msgs::Lane_<ContainerAllocator>  _lane_type;
  _lane_type lane;

   typedef  ::mobileye_msgs::ObstacleStatus_<ContainerAllocator>  _obstacle_status_type;
  _obstacle_status_type obstacle_status;

   typedef std::vector< ::mobileye_msgs::ObstacleData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >::other >  _obstacle_data_type;
  _obstacle_data_type obstacle_data;





  typedef boost::shared_ptr< ::mobileye_msgs::ExtLogData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye_msgs::ExtLogData_<ContainerAllocator> const> ConstPtr;

}; // struct ExtLogData_

typedef ::mobileye_msgs::ExtLogData_<std::allocator<void> > ExtLogData;

typedef boost::shared_ptr< ::mobileye_msgs::ExtLogData > ExtLogDataPtr;
typedef boost::shared_ptr< ::mobileye_msgs::ExtLogData const> ExtLogDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye_msgs::ExtLogData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobileye_msgs::ExtLogData_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ExtLogData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lane == rhs.lane &&
    lhs.obstacle_status == rhs.obstacle_status &&
    lhs.obstacle_data == rhs.obstacle_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobileye_msgs::ExtLogData_<ContainerAllocator1> & lhs, const ::mobileye_msgs::ExtLogData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobileye_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye_msgs::ExtLogData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye_msgs::ExtLogData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye_msgs::ExtLogData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd5a83cb9f73511e0698020e5d37d36e";
  }

  static const char* value(const ::mobileye_msgs::ExtLogData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd5a83cb9f73511eULL;
  static const uint64_t static_value2 = 0x0698020e5d37d36eULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_msgs/ExtLogData";
  }

  static const char* value(const ::mobileye_msgs::ExtLogData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"Lane lane\n"
"\n"
"ObstacleStatus obstacle_status\n"
"ObstacleData[] obstacle_data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/Lane\n"
"float32 lane_curvature\n"
"float32 lane_heading\n"
"\n"
"bool ca\n"
"float32 pitch_angle\n"
"float32 yaw_angle\n"
"\n"
"bool right_ldw_availability\n"
"bool left_ldw_availability\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/ObstacleStatus\n"
"uint8 number_of_obstacles\n"
"uint8 timestamp\n"
"\n"
"bool left_close_rang_cut_in\n"
"bool right_close_rang_cut_in\n"
"\n"
"uint8 go\n"
"bool close_car\n"
"uint8 failsafe\n"
"\n"
"================================================================================\n"
"MSG: mobileye_msgs/ObstacleData\n"
"uint8 obstacle_id\n"
"float32 obstacle_position_x\n"
"float32 obstacle_position_y\n"
"float32 obstacle_relative_velocity_x\n"
"\n"
"uint8 obstacle_type\n"
"uint8 obstacle_status\n"
"bool obstacle_brake_lights\n"
"uint8 cut_in_and_out\n"
"uint8 blinker_info\n"
"uint8 obstacle_valid\n"
"\n"
"float32 obstacle_length\n"
"float32 obstacle_width\n"
"uint8 obstacle_age\n"
"uint8 obstacle_lane\n"
"uint8 cipv_flag\n"
"\n"
"float32 radar_position_x\n"
"float32 radar_velocity_x\n"
"uint8 radar_match_confidence\n"
"uint8 matched_radar_id\n"
"\n"
"float32 obstacle_angle_rate\n"
"float32 obstacle_scale_change\n"
"float32 obstacle_object_accel_x\n"
"bool obstacle_replaced\n"
"float32 obstacle_angle\n"
;
  }

  static const char* value(const ::mobileye_msgs::ExtLogData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane);
      stream.next(m.obstacle_status);
      stream.next(m.obstacle_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtLogData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye_msgs::ExtLogData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye_msgs::ExtLogData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane: ";
    s << std::endl;
    Printer< ::mobileye_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "  ", v.lane);
    s << indent << "obstacle_status: ";
    s << std::endl;
    Printer< ::mobileye_msgs::ObstacleStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle_status);
    s << indent << "obstacle_data[]" << std::endl;
    for (size_t i = 0; i < v.obstacle_data.size(); ++i)
    {
      s << indent << "  obstacle_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mobileye_msgs::ObstacleData_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacle_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MSGS_MESSAGE_EXTLOGDATA_H
