// Generated by gencpp from file autorally_msgs/neuralNetLayer.msg
// DO NOT EDIT!


#ifndef AUTORALLY_MSGS_MESSAGE_NEURALNETLAYER_H
#define AUTORALLY_MSGS_MESSAGE_NEURALNETLAYER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autorally_msgs
{
template <class ContainerAllocator>
struct neuralNetLayer_
{
  typedef neuralNetLayer_<ContainerAllocator> Type;

  neuralNetLayer_()
    : name()
    , weight()
    , bias()  {
    }
  neuralNetLayer_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , weight(_alloc)
    , bias(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _weight_type;
  _weight_type weight;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _bias_type;
  _bias_type bias;





  typedef boost::shared_ptr< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> const> ConstPtr;

}; // struct neuralNetLayer_

typedef ::autorally_msgs::neuralNetLayer_<std::allocator<void> > neuralNetLayer;

typedef boost::shared_ptr< ::autorally_msgs::neuralNetLayer > neuralNetLayerPtr;
typedef boost::shared_ptr< ::autorally_msgs::neuralNetLayer const> neuralNetLayerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autorally_msgs::neuralNetLayer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autorally_msgs::neuralNetLayer_<ContainerAllocator1> & lhs, const ::autorally_msgs::neuralNetLayer_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.weight == rhs.weight &&
    lhs.bias == rhs.bias;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autorally_msgs::neuralNetLayer_<ContainerAllocator1> & lhs, const ::autorally_msgs::neuralNetLayer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autorally_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c7ae79f2ee4ffbb5044508aa41abced";
  }

  static const char* value(const ::autorally_msgs::neuralNetLayer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c7ae79f2ee4ffbbULL;
  static const uint64_t static_value2 = 0x5044508aa41abcedULL;
};

template<class ContainerAllocator>
struct DataType< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autorally_msgs/neuralNetLayer";
  }

  static const char* value(const ::autorally_msgs::neuralNetLayer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float32[] weight\n"
"float32[] bias\n"
;
  }

  static const char* value(const ::autorally_msgs::neuralNetLayer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.weight);
      stream.next(m.bias);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct neuralNetLayer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autorally_msgs::neuralNetLayer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autorally_msgs::neuralNetLayer_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "weight[]" << std::endl;
    for (size_t i = 0; i < v.weight.size(); ++i)
    {
      s << indent << "  weight[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.weight[i]);
    }
    s << indent << "bias[]" << std::endl;
    for (size_t i = 0; i < v.bias.size(); ++i)
    {
      s << indent << "  bias[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bias[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTORALLY_MSGS_MESSAGE_NEURALNETLAYER_H
