// Generated by gencpp from file autorally_msgs/lapStats.msg
// DO NOT EDIT!


#ifndef AUTORALLY_MSGS_MESSAGE_LAPSTATS_H
#define AUTORALLY_MSGS_MESSAGE_LAPSTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autorally_msgs
{
template <class ContainerAllocator>
struct lapStats_
{
  typedef lapStats_<ContainerAllocator> Type;

  lapStats_()
    : lap_number(0)
    , lap_time(0.0)
    , max_speed(0.0)
    , max_slip(0.0)  {
    }
  lapStats_(const ContainerAllocator& _alloc)
    : lap_number(0)
    , lap_time(0.0)
    , max_speed(0.0)
    , max_slip(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _lap_number_type;
  _lap_number_type lap_number;

   typedef double _lap_time_type;
  _lap_time_type lap_time;

   typedef double _max_speed_type;
  _max_speed_type max_speed;

   typedef double _max_slip_type;
  _max_slip_type max_slip;





  typedef boost::shared_ptr< ::autorally_msgs::lapStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autorally_msgs::lapStats_<ContainerAllocator> const> ConstPtr;

}; // struct lapStats_

typedef ::autorally_msgs::lapStats_<std::allocator<void> > lapStats;

typedef boost::shared_ptr< ::autorally_msgs::lapStats > lapStatsPtr;
typedef boost::shared_ptr< ::autorally_msgs::lapStats const> lapStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autorally_msgs::lapStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autorally_msgs::lapStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autorally_msgs::lapStats_<ContainerAllocator1> & lhs, const ::autorally_msgs::lapStats_<ContainerAllocator2> & rhs)
{
  return lhs.lap_number == rhs.lap_number &&
    lhs.lap_time == rhs.lap_time &&
    lhs.max_speed == rhs.max_speed &&
    lhs.max_slip == rhs.max_slip;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autorally_msgs::lapStats_<ContainerAllocator1> & lhs, const ::autorally_msgs::lapStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autorally_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autorally_msgs::lapStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autorally_msgs::lapStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autorally_msgs::lapStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autorally_msgs::lapStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autorally_msgs::lapStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autorally_msgs::lapStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autorally_msgs::lapStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0c1580b11cbef99426a15c0443b2e19";
  }

  static const char* value(const ::autorally_msgs::lapStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0c1580b11cbef99ULL;
  static const uint64_t static_value2 = 0x426a15c0443b2e19ULL;
};

template<class ContainerAllocator>
struct DataType< ::autorally_msgs::lapStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autorally_msgs/lapStats";
  }

  static const char* value(const ::autorally_msgs::lapStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autorally_msgs::lapStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 lap_number\n"
"float64 lap_time\n"
"float64 max_speed\n"
"float64 max_slip\n"
;
  }

  static const char* value(const ::autorally_msgs::lapStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autorally_msgs::lapStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lap_number);
      stream.next(m.lap_time);
      stream.next(m.max_speed);
      stream.next(m.max_slip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lapStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autorally_msgs::lapStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autorally_msgs::lapStats_<ContainerAllocator>& v)
  {
    s << indent << "lap_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lap_number);
    s << indent << "lap_time: ";
    Printer<double>::stream(s, indent + "  ", v.lap_time);
    s << indent << "max_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_speed);
    s << indent << "max_slip: ";
    Printer<double>::stream(s, indent + "  ", v.max_slip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTORALLY_MSGS_MESSAGE_LAPSTATS_H
