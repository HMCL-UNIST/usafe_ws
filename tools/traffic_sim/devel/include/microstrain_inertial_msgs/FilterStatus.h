// Generated by gencpp from file microstrain_inertial_msgs/FilterStatus.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERSTATUS_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct FilterStatus_
{
  typedef FilterStatus_<ContainerAllocator> Type;

  FilterStatus_()
    : filter_state(0)
    , dynamics_mode(0)
    , status_flags(0)  {
    }
  FilterStatus_(const ContainerAllocator& _alloc)
    : filter_state(0)
    , dynamics_mode(0)
    , status_flags(0)  {
  (void)_alloc;
    }



   typedef uint16_t _filter_state_type;
  _filter_state_type filter_state;

   typedef uint16_t _dynamics_mode_type;
  _dynamics_mode_type dynamics_mode;

   typedef uint16_t _status_flags_type;
  _status_flags_type status_flags;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> const> ConstPtr;

}; // struct FilterStatus_

typedef ::microstrain_inertial_msgs::FilterStatus_<std::allocator<void> > FilterStatus;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterStatus > FilterStatusPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterStatus const> FilterStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator2> & rhs)
{
  return lhs.filter_state == rhs.filter_state &&
    lhs.dynamics_mode == rhs.dynamics_mode &&
    lhs.status_flags == rhs.status_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44b6cdd5e336c9a880e785b76ea6be97";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44b6cdd5e336c9a8ULL;
  static const uint64_t static_value2 = 0x80e785b76ea6be97ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/FilterStatus";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 filter_state\n"
"\n"
"uint16 dynamics_mode\n"
"\n"
"uint16 status_flags\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filter_state);
      stream.next(m.dynamics_mode);
      stream.next(m.status_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::FilterStatus_<ContainerAllocator>& v)
  {
    s << indent << "filter_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.filter_state);
    s << indent << "dynamics_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dynamics_mode);
    s << indent << "status_flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERSTATUS_H
