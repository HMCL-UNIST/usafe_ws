// Generated by gencpp from file microstrain_inertial_msgs/FilterAidingMeasurementSummary.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERAIDINGMEASUREMENTSUMMARY_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERAIDINGMEASUREMENTSUMMARY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>
#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>
#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>
#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>
#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>
#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>
#include <microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.h>

namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct FilterAidingMeasurementSummary_
{
  typedef FilterAidingMeasurementSummary_<ContainerAllocator> Type;

  FilterAidingMeasurementSummary_()
    : gps_tow(0.0)
    , gnss1()
    , gnss2()
    , dual_antenna()
    , heading()
    , pressure()
    , magnetometer()
    , speed()  {
    }
  FilterAidingMeasurementSummary_(const ContainerAllocator& _alloc)
    : gps_tow(0.0)
    , gnss1(_alloc)
    , gnss2(_alloc)
    , dual_antenna(_alloc)
    , heading(_alloc)
    , pressure(_alloc)
    , magnetometer(_alloc)
    , speed(_alloc)  {
  (void)_alloc;
    }



   typedef double _gps_tow_type;
  _gps_tow_type gps_tow;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _gnss1_type;
  _gnss1_type gnss1;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _gnss2_type;
  _gnss2_type gnss2;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _dual_antenna_type;
  _dual_antenna_type dual_antenna;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _heading_type;
  _heading_type heading;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _pressure_type;
  _pressure_type pressure;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _magnetometer_type;
  _magnetometer_type magnetometer;

   typedef  ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>  _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> const> ConstPtr;

}; // struct FilterAidingMeasurementSummary_

typedef ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<std::allocator<void> > FilterAidingMeasurementSummary;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary > FilterAidingMeasurementSummaryPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary const> FilterAidingMeasurementSummaryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator2> & rhs)
{
  return lhs.gps_tow == rhs.gps_tow &&
    lhs.gnss1 == rhs.gnss1 &&
    lhs.gnss2 == rhs.gnss2 &&
    lhs.dual_antenna == rhs.dual_antenna &&
    lhs.heading == rhs.heading &&
    lhs.pressure == rhs.pressure &&
    lhs.magnetometer == rhs.magnetometer &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "150119d26260add7097bcac810af3fdb";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x150119d26260add7ULL;
  static const uint64_t static_value2 = 0x097bcac810af3fdbULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/FilterAidingMeasurementSummary";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gps_tow\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator gnss1\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator gnss2\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator dual_antenna\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator heading\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator pressure\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator magnetometer\n"
"microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator speed\n"
"================================================================================\n"
"MSG: microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator\n"
"bool enabled\n"
"bool used\n"
"bool residual_high_warning\n"
"bool sample_time_warning\n"
"bool configuration_error\n"
"bool max_num_meas_exceeded\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_tow);
      stream.next(m.gnss1);
      stream.next(m.gnss2);
      stream.next(m.dual_antenna);
      stream.next(m.heading);
      stream.next(m.pressure);
      stream.next(m.magnetometer);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterAidingMeasurementSummary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummary_<ContainerAllocator>& v)
  {
    s << indent << "gps_tow: ";
    Printer<double>::stream(s, indent + "  ", v.gps_tow);
    s << indent << "gnss1: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss1);
    s << indent << "gnss2: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss2);
    s << indent << "dual_antenna: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.dual_antenna);
    s << indent << "heading: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.heading);
    s << indent << "pressure: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.pressure);
    s << indent << "magnetometer: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.magnetometer);
    s << indent << "speed: ";
    s << std::endl;
    Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERAIDINGMEASUREMENTSUMMARY_H
