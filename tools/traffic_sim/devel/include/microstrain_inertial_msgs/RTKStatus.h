// Generated by gencpp from file microstrain_inertial_msgs/RTKStatus.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_RTKSTATUS_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_RTKSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct RTKStatus_
{
  typedef RTKStatus_<ContainerAllocator> Type;

  RTKStatus_()
    : gps_tow(0.0)
    , gps_week(0)
    , epoch_status(0)
    , dongle_version(0)
    , dongle_modem_state(0)
    , dongle_connection_type(0)
    , dongle_rssi(0)
    , dongle_signal_quality(0)
    , dongle_tower_change_indicator(0)
    , dongle_nmea_timeout(false)
    , dongle_server_timeout(false)
    , dongle_rtcm_timeout(false)
    , dongle_out_of_range(false)
    , dongle_corrections_unavailable(false)
    , gps_correction_latency(0.0)
    , glonass_correction_latency(0.0)
    , galileo_correction_latency(0.0)
    , beidou_correction_latency(0.0)
    , raw_status_flags(0)  {
    }
  RTKStatus_(const ContainerAllocator& _alloc)
    : gps_tow(0.0)
    , gps_week(0)
    , epoch_status(0)
    , dongle_version(0)
    , dongle_modem_state(0)
    , dongle_connection_type(0)
    , dongle_rssi(0)
    , dongle_signal_quality(0)
    , dongle_tower_change_indicator(0)
    , dongle_nmea_timeout(false)
    , dongle_server_timeout(false)
    , dongle_rtcm_timeout(false)
    , dongle_out_of_range(false)
    , dongle_corrections_unavailable(false)
    , gps_correction_latency(0.0)
    , glonass_correction_latency(0.0)
    , galileo_correction_latency(0.0)
    , beidou_correction_latency(0.0)
    , raw_status_flags(0)  {
  (void)_alloc;
    }



   typedef double _gps_tow_type;
  _gps_tow_type gps_tow;

   typedef uint16_t _gps_week_type;
  _gps_week_type gps_week;

   typedef uint16_t _epoch_status_type;
  _epoch_status_type epoch_status;

   typedef uint8_t _dongle_version_type;
  _dongle_version_type dongle_version;

   typedef uint8_t _dongle_modem_state_type;
  _dongle_modem_state_type dongle_modem_state;

   typedef uint8_t _dongle_connection_type_type;
  _dongle_connection_type_type dongle_connection_type;

   typedef int8_t _dongle_rssi_type;
  _dongle_rssi_type dongle_rssi;

   typedef uint8_t _dongle_signal_quality_type;
  _dongle_signal_quality_type dongle_signal_quality;

   typedef uint8_t _dongle_tower_change_indicator_type;
  _dongle_tower_change_indicator_type dongle_tower_change_indicator;

   typedef uint8_t _dongle_nmea_timeout_type;
  _dongle_nmea_timeout_type dongle_nmea_timeout;

   typedef uint8_t _dongle_server_timeout_type;
  _dongle_server_timeout_type dongle_server_timeout;

   typedef uint8_t _dongle_rtcm_timeout_type;
  _dongle_rtcm_timeout_type dongle_rtcm_timeout;

   typedef uint8_t _dongle_out_of_range_type;
  _dongle_out_of_range_type dongle_out_of_range;

   typedef uint8_t _dongle_corrections_unavailable_type;
  _dongle_corrections_unavailable_type dongle_corrections_unavailable;

   typedef float _gps_correction_latency_type;
  _gps_correction_latency_type gps_correction_latency;

   typedef float _glonass_correction_latency_type;
  _glonass_correction_latency_type glonass_correction_latency;

   typedef float _galileo_correction_latency_type;
  _galileo_correction_latency_type galileo_correction_latency;

   typedef float _beidou_correction_latency_type;
  _beidou_correction_latency_type beidou_correction_latency;

   typedef uint32_t _raw_status_flags_type;
  _raw_status_flags_type raw_status_flags;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODEM_STATE_OFF)
  #undef MODEM_STATE_OFF
#endif
#if defined(_WIN32) && defined(MODEM_STATE_NO_NETWORK)
  #undef MODEM_STATE_NO_NETWORK
#endif
#if defined(_WIN32) && defined(MODEM_STATE_NETWORK_CONNECTED)
  #undef MODEM_STATE_NETWORK_CONNECTED
#endif
#if defined(_WIN32) && defined(MODEM_STATE_CONFIGURING_DATA_CONTEXT)
  #undef MODEM_STATE_CONFIGURING_DATA_CONTEXT
#endif
#if defined(_WIN32) && defined(MODEM_STATE_ACTIVATING_DATA_CONTEXT)
  #undef MODEM_STATE_ACTIVATING_DATA_CONTEXT
#endif
#if defined(_WIN32) && defined(MODEM_STATE_CONFIGURING_SOCKET)
  #undef MODEM_STATE_CONFIGURING_SOCKET
#endif
#if defined(_WIN32) && defined(MODEM_STATE_WAITING_ON_SERVER_HANDSHAKE)
  #undef MODEM_STATE_WAITING_ON_SERVER_HANDSHAKE
#endif
#if defined(_WIN32) && defined(MODEM_STATE_CONNECTED_AND_IDLE)
  #undef MODEM_STATE_CONNECTED_AND_IDLE
#endif
#if defined(_WIN32) && defined(MODEM_STATE_CONNECTED_AND_STREAMING)
  #undef MODEM_STATE_CONNECTED_AND_STREAMING
#endif
#if defined(_WIN32) && defined(CONNECTION_TYPE_NO_CONNECTION)
  #undef CONNECTION_TYPE_NO_CONNECTION
#endif
#if defined(_WIN32) && defined(CONNECTION_TYPE_CONNECTION_2G)
  #undef CONNECTION_TYPE_CONNECTION_2G
#endif
#if defined(_WIN32) && defined(CONNECTION_TYPE_CONNECTION_3G)
  #undef CONNECTION_TYPE_CONNECTION_3G
#endif
#if defined(_WIN32) && defined(CONNECTION_TYPE_CONNECTION_4G)
  #undef CONNECTION_TYPE_CONNECTION_4G
#endif
#if defined(_WIN32) && defined(CONNECTION_TYPE_CONNECTION_5G)
  #undef CONNECTION_TYPE_CONNECTION_5G
#endif

  enum {
    MODEM_STATE_OFF = 0u,
    MODEM_STATE_NO_NETWORK = 1u,
    MODEM_STATE_NETWORK_CONNECTED = 2u,
    MODEM_STATE_CONFIGURING_DATA_CONTEXT = 3u,
    MODEM_STATE_ACTIVATING_DATA_CONTEXT = 4u,
    MODEM_STATE_CONFIGURING_SOCKET = 5u,
    MODEM_STATE_WAITING_ON_SERVER_HANDSHAKE = 6u,
    MODEM_STATE_CONNECTED_AND_IDLE = 7u,
    MODEM_STATE_CONNECTED_AND_STREAMING = 8u,
    CONNECTION_TYPE_NO_CONNECTION = 0u,
    CONNECTION_TYPE_CONNECTION_2G = 2u,
    CONNECTION_TYPE_CONNECTION_3G = 3u,
    CONNECTION_TYPE_CONNECTION_4G = 4u,
    CONNECTION_TYPE_CONNECTION_5G = 5u,
  };


  typedef boost::shared_ptr< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RTKStatus_

typedef ::microstrain_inertial_msgs::RTKStatus_<std::allocator<void> > RTKStatus;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::RTKStatus > RTKStatusPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::RTKStatus const> RTKStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator2> & rhs)
{
  return lhs.gps_tow == rhs.gps_tow &&
    lhs.gps_week == rhs.gps_week &&
    lhs.epoch_status == rhs.epoch_status &&
    lhs.dongle_version == rhs.dongle_version &&
    lhs.dongle_modem_state == rhs.dongle_modem_state &&
    lhs.dongle_connection_type == rhs.dongle_connection_type &&
    lhs.dongle_rssi == rhs.dongle_rssi &&
    lhs.dongle_signal_quality == rhs.dongle_signal_quality &&
    lhs.dongle_tower_change_indicator == rhs.dongle_tower_change_indicator &&
    lhs.dongle_nmea_timeout == rhs.dongle_nmea_timeout &&
    lhs.dongle_server_timeout == rhs.dongle_server_timeout &&
    lhs.dongle_rtcm_timeout == rhs.dongle_rtcm_timeout &&
    lhs.dongle_out_of_range == rhs.dongle_out_of_range &&
    lhs.dongle_corrections_unavailable == rhs.dongle_corrections_unavailable &&
    lhs.gps_correction_latency == rhs.gps_correction_latency &&
    lhs.glonass_correction_latency == rhs.glonass_correction_latency &&
    lhs.galileo_correction_latency == rhs.galileo_correction_latency &&
    lhs.beidou_correction_latency == rhs.beidou_correction_latency &&
    lhs.raw_status_flags == rhs.raw_status_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da5543a2118eca78b75d2cf97686be1d";
  }

  static const char* value(const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda5543a2118eca78ULL;
  static const uint64_t static_value2 = 0xb75d2cf97686be1dULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/RTKStatus";
  }

  static const char* value(const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Possible values for dongle_modem_state\n"
"uint8   MODEM_STATE_OFF = 0\n"
"uint8   MODEM_STATE_NO_NETWORK = 1\n"
"uint8   MODEM_STATE_NETWORK_CONNECTED = 2\n"
"uint8   MODEM_STATE_CONFIGURING_DATA_CONTEXT = 3\n"
"uint8   MODEM_STATE_ACTIVATING_DATA_CONTEXT = 4\n"
"uint8   MODEM_STATE_CONFIGURING_SOCKET = 5\n"
"uint8   MODEM_STATE_WAITING_ON_SERVER_HANDSHAKE = 6\n"
"uint8   MODEM_STATE_CONNECTED_AND_IDLE = 7\n"
"uint8   MODEM_STATE_CONNECTED_AND_STREAMING = 8\n"
"\n"
"# Possible values for dongle_connection_type\n"
"uint8   CONNECTION_TYPE_NO_CONNECTION = 0\n"
"uint8   CONNECTION_TYPE_CONNECTION_2G = 2\n"
"uint8   CONNECTION_TYPE_CONNECTION_3G = 3\n"
"uint8   CONNECTION_TYPE_CONNECTION_4G = 4\n"
"uint8   CONNECTION_TYPE_CONNECTION_5G = 5\n"
"\n"
"float64 gps_tow\n"
"uint16  gps_week\n"
"uint16  epoch_status\n"
"\n"
"uint8   dongle_version\n"
"uint8   dongle_modem_state      # Use in conjunction with MODEM_STATE_* values\n"
"uint8   dongle_connection_type  # Use in conjunction with CONNECTION_TYPE_* values\n"
"int8    dongle_rssi             # RSSI values are negative\n"
"uint8   dongle_signal_quality\n"
"uint8   dongle_tower_change_indicator\n"
"bool    dongle_nmea_timeout\n"
"bool    dongle_server_timeout\n"
"bool    dongle_rtcm_timeout\n"
"bool    dongle_out_of_range\n"
"bool    dongle_corrections_unavailable\n"
"\n"
"float32 gps_correction_latency\n"
"float32 glonass_correction_latency\n"
"float32 galileo_correction_latency\n"
"float32 beidou_correction_latency\n"
"\n"
"\n"
"uint32  raw_status_flags        # Raw status flags value\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_tow);
      stream.next(m.gps_week);
      stream.next(m.epoch_status);
      stream.next(m.dongle_version);
      stream.next(m.dongle_modem_state);
      stream.next(m.dongle_connection_type);
      stream.next(m.dongle_rssi);
      stream.next(m.dongle_signal_quality);
      stream.next(m.dongle_tower_change_indicator);
      stream.next(m.dongle_nmea_timeout);
      stream.next(m.dongle_server_timeout);
      stream.next(m.dongle_rtcm_timeout);
      stream.next(m.dongle_out_of_range);
      stream.next(m.dongle_corrections_unavailable);
      stream.next(m.gps_correction_latency);
      stream.next(m.glonass_correction_latency);
      stream.next(m.galileo_correction_latency);
      stream.next(m.beidou_correction_latency);
      stream.next(m.raw_status_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RTKStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::RTKStatus_<ContainerAllocator>& v)
  {
    s << indent << "gps_tow: ";
    Printer<double>::stream(s, indent + "  ", v.gps_tow);
    s << indent << "gps_week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_week);
    s << indent << "epoch_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.epoch_status);
    s << indent << "dongle_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_version);
    s << indent << "dongle_modem_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_modem_state);
    s << indent << "dongle_connection_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_connection_type);
    s << indent << "dongle_rssi: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dongle_rssi);
    s << indent << "dongle_signal_quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_signal_quality);
    s << indent << "dongle_tower_change_indicator: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_tower_change_indicator);
    s << indent << "dongle_nmea_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_nmea_timeout);
    s << indent << "dongle_server_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_server_timeout);
    s << indent << "dongle_rtcm_timeout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_rtcm_timeout);
    s << indent << "dongle_out_of_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_out_of_range);
    s << indent << "dongle_corrections_unavailable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dongle_corrections_unavailable);
    s << indent << "gps_correction_latency: ";
    Printer<float>::stream(s, indent + "  ", v.gps_correction_latency);
    s << indent << "glonass_correction_latency: ";
    Printer<float>::stream(s, indent + "  ", v.glonass_correction_latency);
    s << indent << "galileo_correction_latency: ";
    Printer<float>::stream(s, indent + "  ", v.galileo_correction_latency);
    s << indent << "beidou_correction_latency: ";
    Printer<float>::stream(s, indent + "  ", v.beidou_correction_latency);
    s << indent << "raw_status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.raw_status_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_RTKSTATUS_H
