// Generated by gencpp from file microstrain_inertial_msgs/FilterHeading.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERHEADING_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERHEADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct FilterHeading_
{
  typedef FilterHeading_<ContainerAllocator> Type;

  FilterHeading_()
    : heading_deg(0.0)
    , heading_rad(0.0)
    , status_flags(0)  {
    }
  FilterHeading_(const ContainerAllocator& _alloc)
    : heading_deg(0.0)
    , heading_rad(0.0)
    , status_flags(0)  {
  (void)_alloc;
    }



   typedef float _heading_deg_type;
  _heading_deg_type heading_deg;

   typedef float _heading_rad_type;
  _heading_rad_type heading_rad;

   typedef uint16_t _status_flags_type;
  _status_flags_type status_flags;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> const> ConstPtr;

}; // struct FilterHeading_

typedef ::microstrain_inertial_msgs::FilterHeading_<std::allocator<void> > FilterHeading;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterHeading > FilterHeadingPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterHeading const> FilterHeadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator2> & rhs)
{
  return lhs.heading_deg == rhs.heading_deg &&
    lhs.heading_rad == rhs.heading_rad &&
    lhs.status_flags == rhs.status_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b90b446055a9cca548055d2a70764344";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb90b446055a9cca5ULL;
  static const uint64_t static_value2 = 0x48055d2a70764344ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/FilterHeading";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 heading_deg\n"
"\n"
"float32 heading_rad\n"
"\n"
"uint16 status_flags\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading_deg);
      stream.next(m.heading_rad);
      stream.next(m.status_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterHeading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::FilterHeading_<ContainerAllocator>& v)
  {
    s << indent << "heading_deg: ";
    Printer<float>::stream(s, indent + "  ", v.heading_deg);
    s << indent << "heading_rad: ";
    Printer<float>::stream(s, indent + "  ", v.heading_rad);
    s << indent << "status_flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERHEADING_H
