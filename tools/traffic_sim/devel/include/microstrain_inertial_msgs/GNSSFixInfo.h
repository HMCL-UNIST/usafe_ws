// Generated by gencpp from file microstrain_inertial_msgs/GNSSFixInfo.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GNSSFIXINFO_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GNSSFIXINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct GNSSFixInfo_
{
  typedef GNSSFixInfo_<ContainerAllocator> Type;

  GNSSFixInfo_()
    : fix_type(0)
    , num_sv(0)
    , sbas_used(false)
    , dngss_used(false)  {
    }
  GNSSFixInfo_(const ContainerAllocator& _alloc)
    : fix_type(0)
    , num_sv(0)
    , sbas_used(false)
    , dngss_used(false)  {
  (void)_alloc;
    }



   typedef uint8_t _fix_type_type;
  _fix_type_type fix_type;

   typedef uint8_t _num_sv_type;
  _num_sv_type num_sv;

   typedef uint8_t _sbas_used_type;
  _sbas_used_type sbas_used;

   typedef uint8_t _dngss_used_type;
  _dngss_used_type dngss_used;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FIX_3D)
  #undef FIX_3D
#endif
#if defined(_WIN32) && defined(FIX_2D)
  #undef FIX_2D
#endif
#if defined(_WIN32) && defined(FIX_TIME_ONLY)
  #undef FIX_TIME_ONLY
#endif
#if defined(_WIN32) && defined(FIX_NONE)
  #undef FIX_NONE
#endif
#if defined(_WIN32) && defined(FIX_INVALID)
  #undef FIX_INVALID
#endif
#if defined(_WIN32) && defined(FIX_RTK_FLOAT)
  #undef FIX_RTK_FLOAT
#endif
#if defined(_WIN32) && defined(FIX_RTK_FIXED)
  #undef FIX_RTK_FIXED
#endif

  enum {
    FIX_3D = 0u,
    FIX_2D = 1u,
    FIX_TIME_ONLY = 2u,
    FIX_NONE = 3u,
    FIX_INVALID = 4u,
    FIX_RTK_FLOAT = 5u,
    FIX_RTK_FIXED = 6u,
  };


  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GNSSFixInfo_

typedef ::microstrain_inertial_msgs::GNSSFixInfo_<std::allocator<void> > GNSSFixInfo;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSFixInfo > GNSSFixInfoPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSFixInfo const> GNSSFixInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator2> & rhs)
{
  return lhs.fix_type == rhs.fix_type &&
    lhs.num_sv == rhs.num_sv &&
    lhs.sbas_used == rhs.sbas_used &&
    lhs.dngss_used == rhs.dngss_used;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb3314532886b25255798400e78fc222";
  }

  static const char* value(const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb3314532886b252ULL;
  static const uint64_t static_value2 = 0x55798400e78fc222ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/GNSSFixInfo";
  }

  static const char* value(const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 fix_type\n"
"uint8 num_sv\n"
"bool sbas_used\n"
"bool dngss_used\n"
"\n"
"uint8 FIX_3D = 0\n"
"uint8 FIX_2D = 1\n"
"uint8 FIX_TIME_ONLY = 2\n"
"uint8 FIX_NONE = 3\n"
"uint8 FIX_INVALID = 4\n"
"uint8 FIX_RTK_FLOAT = 5\n"
"uint8 FIX_RTK_FIXED = 6\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fix_type);
      stream.next(m.num_sv);
      stream.next(m.sbas_used);
      stream.next(m.dngss_used);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GNSSFixInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::GNSSFixInfo_<ContainerAllocator>& v)
  {
    s << indent << "fix_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_type);
    s << indent << "num_sv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sv);
    s << indent << "sbas_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sbas_used);
    s << indent << "dngss_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dngss_used);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GNSSFIXINFO_H
