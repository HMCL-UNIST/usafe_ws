// Generated by gencpp from file microstrain_inertial_msgs/GetGravityAdaptiveValsResponse.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GETGRAVITYADAPTIVEVALSRESPONSE_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GETGRAVITYADAPTIVEVALSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct GetGravityAdaptiveValsResponse_
{
  typedef GetGravityAdaptiveValsResponse_<ContainerAllocator> Type;

  GetGravityAdaptiveValsResponse_()
    : enable(0.0)
    , low_pass_cutoff(0.0)
    , min_1sigma(0.0)
    , low_limit(0.0)
    , high_limit(0.0)
    , low_limit_1sigma(0.0)
    , high_limit_1sigma(0.0)
    , success(false)  {
    }
  GetGravityAdaptiveValsResponse_(const ContainerAllocator& _alloc)
    : enable(0.0)
    , low_pass_cutoff(0.0)
    , min_1sigma(0.0)
    , low_limit(0.0)
    , high_limit(0.0)
    , low_limit_1sigma(0.0)
    , high_limit_1sigma(0.0)
    , success(false)  {
  (void)_alloc;
    }



   typedef float _enable_type;
  _enable_type enable;

   typedef float _low_pass_cutoff_type;
  _low_pass_cutoff_type low_pass_cutoff;

   typedef float _min_1sigma_type;
  _min_1sigma_type min_1sigma;

   typedef float _low_limit_type;
  _low_limit_type low_limit;

   typedef float _high_limit_type;
  _high_limit_type high_limit;

   typedef float _low_limit_1sigma_type;
  _low_limit_1sigma_type low_limit_1sigma;

   typedef float _high_limit_1sigma_type;
  _high_limit_1sigma_type high_limit_1sigma;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGravityAdaptiveValsResponse_

typedef ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<std::allocator<void> > GetGravityAdaptiveValsResponse;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse > GetGravityAdaptiveValsResponsePtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse const> GetGravityAdaptiveValsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.low_pass_cutoff == rhs.low_pass_cutoff &&
    lhs.min_1sigma == rhs.min_1sigma &&
    lhs.low_limit == rhs.low_limit &&
    lhs.high_limit == rhs.high_limit &&
    lhs.low_limit_1sigma == rhs.low_limit_1sigma &&
    lhs.high_limit_1sigma == rhs.high_limit_1sigma &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88594dfd6d7363edbe6f8e16638532cc";
  }

  static const char* value(const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88594dfd6d7363edULL;
  static const uint64_t static_value2 = 0xbe6f8e16638532ccULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/GetGravityAdaptiveValsResponse";
  }

  static const char* value(const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 enable\n"
"float32 low_pass_cutoff\n"
"float32 min_1sigma\n"
"float32 low_limit\n"
"float32 high_limit\n"
"float32 low_limit_1sigma\n"
"float32 high_limit_1sigma\n"
"bool success\n"
"\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.low_pass_cutoff);
      stream.next(m.min_1sigma);
      stream.next(m.low_limit);
      stream.next(m.high_limit);
      stream.next(m.low_limit_1sigma);
      stream.next(m.high_limit_1sigma);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGravityAdaptiveValsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::GetGravityAdaptiveValsResponse_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<float>::stream(s, indent + "  ", v.enable);
    s << indent << "low_pass_cutoff: ";
    Printer<float>::stream(s, indent + "  ", v.low_pass_cutoff);
    s << indent << "min_1sigma: ";
    Printer<float>::stream(s, indent + "  ", v.min_1sigma);
    s << indent << "low_limit: ";
    Printer<float>::stream(s, indent + "  ", v.low_limit);
    s << indent << "high_limit: ";
    Printer<float>::stream(s, indent + "  ", v.high_limit);
    s << indent << "low_limit_1sigma: ";
    Printer<float>::stream(s, indent + "  ", v.low_limit_1sigma);
    s << indent << "high_limit_1sigma: ";
    Printer<float>::stream(s, indent + "  ", v.high_limit_1sigma);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GETGRAVITYADAPTIVEVALSRESPONSE_H
