// Generated by gencpp from file microstrain_inertial_msgs/GNSSAidingStatus.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GNSSAIDINGSTATUS_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GNSSAIDINGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct GNSSAidingStatus_
{
  typedef GNSSAidingStatus_<ContainerAllocator> Type;

  GNSSAidingStatus_()
    : gps_tow(0.0)
    , has_position_fix(false)
    , tight_coupling(false)
    , differential_corrections(false)
    , integer_fix(false)
    , using_gps(false)
    , using_glonass(false)
    , using_galileo(false)
    , using_beidou(false)  {
    }
  GNSSAidingStatus_(const ContainerAllocator& _alloc)
    : gps_tow(0.0)
    , has_position_fix(false)
    , tight_coupling(false)
    , differential_corrections(false)
    , integer_fix(false)
    , using_gps(false)
    , using_glonass(false)
    , using_galileo(false)
    , using_beidou(false)  {
  (void)_alloc;
    }



   typedef double _gps_tow_type;
  _gps_tow_type gps_tow;

   typedef uint8_t _has_position_fix_type;
  _has_position_fix_type has_position_fix;

   typedef uint8_t _tight_coupling_type;
  _tight_coupling_type tight_coupling;

   typedef uint8_t _differential_corrections_type;
  _differential_corrections_type differential_corrections;

   typedef uint8_t _integer_fix_type;
  _integer_fix_type integer_fix;

   typedef uint8_t _using_gps_type;
  _using_gps_type using_gps;

   typedef uint8_t _using_glonass_type;
  _using_glonass_type using_glonass;

   typedef uint8_t _using_galileo_type;
  _using_galileo_type using_galileo;

   typedef uint8_t _using_beidou_type;
  _using_beidou_type using_beidou;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GNSSAidingStatus_

typedef ::microstrain_inertial_msgs::GNSSAidingStatus_<std::allocator<void> > GNSSAidingStatus;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSAidingStatus > GNSSAidingStatusPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::GNSSAidingStatus const> GNSSAidingStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator2> & rhs)
{
  return lhs.gps_tow == rhs.gps_tow &&
    lhs.has_position_fix == rhs.has_position_fix &&
    lhs.tight_coupling == rhs.tight_coupling &&
    lhs.differential_corrections == rhs.differential_corrections &&
    lhs.integer_fix == rhs.integer_fix &&
    lhs.using_gps == rhs.using_gps &&
    lhs.using_glonass == rhs.using_glonass &&
    lhs.using_galileo == rhs.using_galileo &&
    lhs.using_beidou == rhs.using_beidou;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93a07537312a9e616123b06cec1efdf6";
  }

  static const char* value(const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93a07537312a9e61ULL;
  static const uint64_t static_value2 = 0x6123b06cec1efdf6ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/GNSSAidingStatus";
  }

  static const char* value(const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gps_tow\n"
"bool    has_position_fix\n"
"bool    tight_coupling\n"
"bool    differential_corrections\n"
"bool    integer_fix\n"
"bool    using_gps \n"
"bool    using_glonass\n"
"bool    using_galileo\n"
"bool    using_beidou\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_tow);
      stream.next(m.has_position_fix);
      stream.next(m.tight_coupling);
      stream.next(m.differential_corrections);
      stream.next(m.integer_fix);
      stream.next(m.using_gps);
      stream.next(m.using_glonass);
      stream.next(m.using_galileo);
      stream.next(m.using_beidou);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GNSSAidingStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::GNSSAidingStatus_<ContainerAllocator>& v)
  {
    s << indent << "gps_tow: ";
    Printer<double>::stream(s, indent + "  ", v.gps_tow);
    s << indent << "has_position_fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_position_fix);
    s << indent << "tight_coupling: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tight_coupling);
    s << indent << "differential_corrections: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.differential_corrections);
    s << indent << "integer_fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.integer_fix);
    s << indent << "using_gps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.using_gps);
    s << indent << "using_glonass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.using_glonass);
    s << indent << "using_galileo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.using_galileo);
    s << indent << "using_beidou: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.using_beidou);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GNSSAIDINGSTATUS_H
