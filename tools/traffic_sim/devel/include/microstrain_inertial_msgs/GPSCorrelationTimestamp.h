// Generated by gencpp from file microstrain_inertial_msgs/GPSCorrelationTimestamp.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GPSCORRELATIONTIMESTAMP_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GPSCORRELATIONTIMESTAMP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct GPSCorrelationTimestamp_
{
  typedef GPSCorrelationTimestamp_<ContainerAllocator> Type;

  GPSCorrelationTimestamp_()
    : gps_tow(0.0)
    , gps_week_number(0)
    , timestamp_flags(0)  {
    }
  GPSCorrelationTimestamp_(const ContainerAllocator& _alloc)
    : gps_tow(0.0)
    , gps_week_number(0)
    , timestamp_flags(0)  {
  (void)_alloc;
    }



   typedef double _gps_tow_type;
  _gps_tow_type gps_tow;

   typedef uint16_t _gps_week_number_type;
  _gps_week_number_type gps_week_number;

   typedef uint16_t _timestamp_flags_type;
  _timestamp_flags_type timestamp_flags;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TIMESTAMP_FLAG_PPS_GOOD)
  #undef TIMESTAMP_FLAG_PPS_GOOD
#endif
#if defined(_WIN32) && defined(TIMESTAMP_FLAG_GPS_REFRESH)
  #undef TIMESTAMP_FLAG_GPS_REFRESH
#endif
#if defined(_WIN32) && defined(TIMESTAMP_FLAG_GPS_INITALIZED)
  #undef TIMESTAMP_FLAG_GPS_INITALIZED
#endif

  enum {
    TIMESTAMP_FLAG_PPS_GOOD = 1u,
    TIMESTAMP_FLAG_GPS_REFRESH = 2u,
    TIMESTAMP_FLAG_GPS_INITALIZED = 4u,
  };


  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> const> ConstPtr;

}; // struct GPSCorrelationTimestamp_

typedef ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<std::allocator<void> > GPSCorrelationTimestamp;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::GPSCorrelationTimestamp > GPSCorrelationTimestampPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::GPSCorrelationTimestamp const> GPSCorrelationTimestampConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator2> & rhs)
{
  return lhs.gps_tow == rhs.gps_tow &&
    lhs.gps_week_number == rhs.gps_week_number &&
    lhs.timestamp_flags == rhs.timestamp_flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4273ef053cace34fe47537c314897d4";
  }

  static const char* value(const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4273ef053cace34ULL;
  static const uint64_t static_value2 = 0xfe47537c314897d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/GPSCorrelationTimestamp";
  }

  static const char* value(const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gps_tow\n"
"uint16 gps_week_number\n"
"uint16 timestamp_flags\n"
"uint16 TIMESTAMP_FLAG_PPS_GOOD      = 1  #0b001\n"
"uint16 TIMESTAMP_FLAG_GPS_REFRESH   = 2  #0b010\n"
"uint16 TIMESTAMP_FLAG_GPS_INITALIZED= 4  #0b100\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_tow);
      stream.next(m.gps_week_number);
      stream.next(m.timestamp_flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPSCorrelationTimestamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::GPSCorrelationTimestamp_<ContainerAllocator>& v)
  {
    s << indent << "gps_tow: ";
    Printer<double>::stream(s, indent + "  ", v.gps_tow);
    s << indent << "gps_week_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_week_number);
    s << indent << "timestamp_flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timestamp_flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GPSCORRELATIONTIMESTAMP_H
