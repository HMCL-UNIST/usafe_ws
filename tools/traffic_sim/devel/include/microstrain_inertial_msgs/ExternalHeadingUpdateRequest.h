// Generated by gencpp from file microstrain_inertial_msgs/ExternalHeadingUpdateRequest.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_EXTERNALHEADINGUPDATEREQUEST_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_EXTERNALHEADINGUPDATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct ExternalHeadingUpdateRequest_
{
  typedef ExternalHeadingUpdateRequest_<ContainerAllocator> Type;

  ExternalHeadingUpdateRequest_()
    : gps_tow(0.0)
    , gps_week_number(0)
    , heading_rad(0.0)
    , heading_1sigma_rad(0.0)
    , heading_type(0)
    , use_time(false)  {
    }
  ExternalHeadingUpdateRequest_(const ContainerAllocator& _alloc)
    : gps_tow(0.0)
    , gps_week_number(0)
    , heading_rad(0.0)
    , heading_1sigma_rad(0.0)
    , heading_type(0)
    , use_time(false)  {
  (void)_alloc;
    }



   typedef double _gps_tow_type;
  _gps_tow_type gps_tow;

   typedef uint16_t _gps_week_number_type;
  _gps_week_number_type gps_week_number;

   typedef float _heading_rad_type;
  _heading_rad_type heading_rad;

   typedef float _heading_1sigma_rad_type;
  _heading_1sigma_rad_type heading_1sigma_rad;

   typedef uint16_t _heading_type_type;
  _heading_type_type heading_type;

   typedef uint8_t _use_time_type;
  _use_time_type use_time;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HEADING_TYPE_TRUE)
  #undef HEADING_TYPE_TRUE
#endif
#if defined(_WIN32) && defined(HEADING_TYPE_MAGNETIC)
  #undef HEADING_TYPE_MAGNETIC
#endif

  enum {
    HEADING_TYPE_TRUE = 1u,
    HEADING_TYPE_MAGNETIC = 2u,
  };


  typedef boost::shared_ptr< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExternalHeadingUpdateRequest_

typedef ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<std::allocator<void> > ExternalHeadingUpdateRequest;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest > ExternalHeadingUpdateRequestPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest const> ExternalHeadingUpdateRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gps_tow == rhs.gps_tow &&
    lhs.gps_week_number == rhs.gps_week_number &&
    lhs.heading_rad == rhs.heading_rad &&
    lhs.heading_1sigma_rad == rhs.heading_1sigma_rad &&
    lhs.heading_type == rhs.heading_type &&
    lhs.use_time == rhs.use_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ce6764f0be974407aa8df95cfdafba2";
  }

  static const char* value(const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ce6764f0be97440ULL;
  static const uint64_t static_value2 = 0x7aa8df95cfdafba2ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/ExternalHeadingUpdateRequest";
  }

  static const char* value(const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gps_tow\n"
"uint16  gps_week_number\n"
"float32 heading_rad\n"
"float32 heading_1sigma_rad\n"
"uint16  heading_type\n"
"bool    use_time\n"
"uint16 HEADING_TYPE_TRUE      = 1  \n"
"uint16 HEADING_TYPE_MAGNETIC  = 2  \n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_tow);
      stream.next(m.gps_week_number);
      stream.next(m.heading_rad);
      stream.next(m.heading_1sigma_rad);
      stream.next(m.heading_type);
      stream.next(m.use_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExternalHeadingUpdateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::ExternalHeadingUpdateRequest_<ContainerAllocator>& v)
  {
    s << indent << "gps_tow: ";
    Printer<double>::stream(s, indent + "  ", v.gps_tow);
    s << indent << "gps_week_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_week_number);
    s << indent << "heading_rad: ";
    Printer<float>::stream(s, indent + "  ", v.heading_rad);
    s << indent << "heading_1sigma_rad: ";
    Printer<float>::stream(s, indent + "  ", v.heading_1sigma_rad);
    s << indent << "heading_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.heading_type);
    s << indent << "use_time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_EXTERNALHEADINGUPDATEREQUEST_H
