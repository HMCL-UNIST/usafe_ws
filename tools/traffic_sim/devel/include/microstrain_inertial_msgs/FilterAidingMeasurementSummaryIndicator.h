// Generated by gencpp from file microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERAIDINGMEASUREMENTSUMMARYINDICATOR_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERAIDINGMEASUREMENTSUMMARYINDICATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct FilterAidingMeasurementSummaryIndicator_
{
  typedef FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> Type;

  FilterAidingMeasurementSummaryIndicator_()
    : enabled(false)
    , used(false)
    , residual_high_warning(false)
    , sample_time_warning(false)
    , configuration_error(false)
    , max_num_meas_exceeded(false)  {
    }
  FilterAidingMeasurementSummaryIndicator_(const ContainerAllocator& _alloc)
    : enabled(false)
    , used(false)
    , residual_high_warning(false)
    , sample_time_warning(false)
    , configuration_error(false)
    , max_num_meas_exceeded(false)  {
  (void)_alloc;
    }



   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _used_type;
  _used_type used;

   typedef uint8_t _residual_high_warning_type;
  _residual_high_warning_type residual_high_warning;

   typedef uint8_t _sample_time_warning_type;
  _sample_time_warning_type sample_time_warning;

   typedef uint8_t _configuration_error_type;
  _configuration_error_type configuration_error;

   typedef uint8_t _max_num_meas_exceeded_type;
  _max_num_meas_exceeded_type max_num_meas_exceeded;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> const> ConstPtr;

}; // struct FilterAidingMeasurementSummaryIndicator_

typedef ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<std::allocator<void> > FilterAidingMeasurementSummaryIndicator;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator > FilterAidingMeasurementSummaryIndicatorPtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator const> FilterAidingMeasurementSummaryIndicatorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator2> & rhs)
{
  return lhs.enabled == rhs.enabled &&
    lhs.used == rhs.used &&
    lhs.residual_high_warning == rhs.residual_high_warning &&
    lhs.sample_time_warning == rhs.sample_time_warning &&
    lhs.configuration_error == rhs.configuration_error &&
    lhs.max_num_meas_exceeded == rhs.max_num_meas_exceeded;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e3131125b51ac75dceed1517c488713";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e3131125b51ac75ULL;
  static const uint64_t static_value2 = 0xdceed1517c488713ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/FilterAidingMeasurementSummaryIndicator";
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enabled\n"
"bool used\n"
"bool residual_high_warning\n"
"bool sample_time_warning\n"
"bool configuration_error\n"
"bool max_num_meas_exceeded\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabled);
      stream.next(m.used);
      stream.next(m.residual_high_warning);
      stream.next(m.sample_time_warning);
      stream.next(m.configuration_error);
      stream.next(m.max_num_meas_exceeded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterAidingMeasurementSummaryIndicator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::FilterAidingMeasurementSummaryIndicator_<ContainerAllocator>& v)
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.used);
    s << indent << "residual_high_warning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.residual_high_warning);
    s << indent << "sample_time_warning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sample_time_warning);
    s << indent << "configuration_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.configuration_error);
    s << indent << "max_num_meas_exceeded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.max_num_meas_exceeded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_FILTERAIDINGMEASUREMENTSUMMARYINDICATOR_H
