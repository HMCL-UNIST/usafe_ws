// Generated by gencpp from file microstrain_inertial_msgs/GetComplementaryFilterResponse.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GETCOMPLEMENTARYFILTERRESPONSE_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GETCOMPLEMENTARYFILTERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct GetComplementaryFilterResponse_
{
  typedef GetComplementaryFilterResponse_<ContainerAllocator> Type;

  GetComplementaryFilterResponse_()
    : north_comp_enable(0)
    , up_comp_enable(0)
    , north_comp_time_const(0.0)
    , up_comp_time_const(0.0)
    , success(false)  {
    }
  GetComplementaryFilterResponse_(const ContainerAllocator& _alloc)
    : north_comp_enable(0)
    , up_comp_enable(0)
    , north_comp_time_const(0.0)
    , up_comp_time_const(0.0)
    , success(false)  {
  (void)_alloc;
    }



   typedef int8_t _north_comp_enable_type;
  _north_comp_enable_type north_comp_enable;

   typedef int8_t _up_comp_enable_type;
  _up_comp_enable_type up_comp_enable;

   typedef float _north_comp_time_const_type;
  _north_comp_time_const_type north_comp_time_const;

   typedef float _up_comp_time_const_type;
  _up_comp_time_const_type up_comp_time_const;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetComplementaryFilterResponse_

typedef ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<std::allocator<void> > GetComplementaryFilterResponse;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetComplementaryFilterResponse > GetComplementaryFilterResponsePtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::GetComplementaryFilterResponse const> GetComplementaryFilterResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator2> & rhs)
{
  return lhs.north_comp_enable == rhs.north_comp_enable &&
    lhs.up_comp_enable == rhs.up_comp_enable &&
    lhs.north_comp_time_const == rhs.north_comp_time_const &&
    lhs.up_comp_time_const == rhs.up_comp_time_const &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "182da770aa33d31e1eeca2d1e7ed5c19";
  }

  static const char* value(const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x182da770aa33d31eULL;
  static const uint64_t static_value2 = 0x1eeca2d1e7ed5c19ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/GetComplementaryFilterResponse";
  }

  static const char* value(const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 north_comp_enable\n"
"int8 up_comp_enable\n"
"float32 north_comp_time_const\n"
"float32 up_comp_time_const\n"
"bool success\n"
"\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.north_comp_enable);
      stream.next(m.up_comp_enable);
      stream.next(m.north_comp_time_const);
      stream.next(m.up_comp_time_const);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetComplementaryFilterResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::GetComplementaryFilterResponse_<ContainerAllocator>& v)
  {
    s << indent << "north_comp_enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.north_comp_enable);
    s << indent << "up_comp_enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.up_comp_enable);
    s << indent << "north_comp_time_const: ";
    Printer<float>::stream(s, indent + "  ", v.north_comp_time_const);
    s << indent << "up_comp_time_const: ";
    Printer<float>::stream(s, indent + "  ", v.up_comp_time_const);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_GETCOMPLEMENTARYFILTERRESPONSE_H
