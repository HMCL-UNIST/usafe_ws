// Generated by gencpp from file microstrain_inertial_msgs/DeviceReportResponse.msg
// DO NOT EDIT!


#ifndef MICROSTRAIN_INERTIAL_MSGS_MESSAGE_DEVICEREPORTRESPONSE_H
#define MICROSTRAIN_INERTIAL_MSGS_MESSAGE_DEVICEREPORTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace microstrain_inertial_msgs
{
template <class ContainerAllocator>
struct DeviceReportResponse_
{
  typedef DeviceReportResponse_<ContainerAllocator> Type;

  DeviceReportResponse_()
    : model_name()
    , model_number()
    , serial_number()
    , options()
    , firmware_version()
    , success(false)  {
    }
  DeviceReportResponse_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , model_number(_alloc)
    , serial_number(_alloc)
    , options(_alloc)
    , firmware_version(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_number_type;
  _model_number_type model_number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serial_number_type;
  _serial_number_type serial_number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _options_type;
  _options_type options;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _firmware_version_type;
  _firmware_version_type firmware_version;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceReportResponse_

typedef ::microstrain_inertial_msgs::DeviceReportResponse_<std::allocator<void> > DeviceReportResponse;

typedef boost::shared_ptr< ::microstrain_inertial_msgs::DeviceReportResponse > DeviceReportResponsePtr;
typedef boost::shared_ptr< ::microstrain_inertial_msgs::DeviceReportResponse const> DeviceReportResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator2> & rhs)
{
  return lhs.model_name == rhs.model_name &&
    lhs.model_number == rhs.model_number &&
    lhs.serial_number == rhs.serial_number &&
    lhs.options == rhs.options &&
    lhs.firmware_version == rhs.firmware_version &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator1> & lhs, const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace microstrain_inertial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1306d0bab1f48bed0d0146c601d0ebe2";
  }

  static const char* value(const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1306d0bab1f48bedULL;
  static const uint64_t static_value2 = 0x0d0146c601d0ebe2ULL;
};

template<class ContainerAllocator>
struct DataType< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "microstrain_inertial_msgs/DeviceReportResponse";
  }

  static const char* value(const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model_name\n"
"string model_number\n"
"string serial_number\n"
"string options\n"
"string firmware_version\n"
"bool success\n"
;
  }

  static const char* value(const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.model_number);
      stream.next(m.serial_number);
      stream.next(m.options);
      stream.next(m.firmware_version);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceReportResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::microstrain_inertial_msgs::DeviceReportResponse_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "model_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_number);
    s << indent << "serial_number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serial_number);
    s << indent << "options: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.options);
    s << indent << "firmware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.firmware_version);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROSTRAIN_INERTIAL_MSGS_MESSAGE_DEVICEREPORTRESPONSE_H
