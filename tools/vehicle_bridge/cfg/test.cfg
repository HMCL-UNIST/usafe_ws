#!/usr/bin/env python
PACKAGE = "vehicle_bridge"
import roslib; roslib.load_manifest(PACKAGE)
from math import pi
from dynamic_reconfigure.parameter_generator_catkin import *


gen = ParameterGenerator()
# int_t, float_t, str_t, bool_t 
#'name', 'type', 'level', 'description', 'default', 'min', 'max'
gen.add("Master_Switch", bool_t, 0, "turn on dynamic configure", False)
gen.add("AD_STR_MODE_CMD",    bool_t,    0, "A Boolean parameter",  False)

gen.add("AD_STR_POS_CMD", int_t, 0, "A int parameter", 0, -5400, 5400)
gen.add("AD_SCC_ACCEL_CMD", int_t, 0, "A int parameter", 0, -500, 500)
gen.add("AD_SCC_TAKEOVER_CMD", bool_t, 0, "A bool parameter", False)

gen.add("AD_LEFT_TURNLAMP_STAT",    bool_t,    0, "A Boolean parameter",  False)
gen.add("AD_RIGHT_TURNLAMP_STAT",    bool_t,    0, "A Boolean parameter",  False)
gen.add("AD_HAZARD_STAT",    bool_t,    0, "A Boolean parameter",  False)



# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
scc_size_enum = gen.enum([ gen.const("SCC_Off",      int_t, 0, "A Off constant"),
                        gen.const("SCC_Ready",     int_t, 1, "A Ready constant"),
                        gen.const("SCC_On",      int_t, 2, "A On constant")],
                      "An enum to set size")

gear_size_enum = gen.enum([ gen.const("Parking",      int_t, 0, "A Parking constant"),
                        gen.const("Driving",     int_t, 1, "A Driving constant"),
                        gen.const("Neutral",      int_t, 2, "A Neutral constant"),
                        gen.const("Reverse", int_t, 3, "An Reverse constant")],
                      "An enum to set size")
 
gen.add("AD_GEAR_POS_CMD", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 3, edit_method=gear_size_enum)
gen.add("AD_SCC_MODE_CMD", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 2, edit_method=scc_size_enum)

exit(gen.generate(PACKAGE, "vehicle_bridge", "test"))