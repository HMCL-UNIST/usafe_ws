
classdef neuralNetModel < ros.Message
    %neuralNetModel MATLAB implementation of autorally_msgs/neuralNetModel
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'autorally_msgs/neuralNetModel' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3c8c8380b1c9bb122f00005291fff0d0' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Network' 'NumLayers' 'Structure' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'network' 'numLayers' 'structure' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 'ros.msggen.autorally_msgs.neuralNetLayer' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Network
        NumLayers
        Structure
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'neuralNetModel', 'Header')
            obj.Header = val;
        end
        function set.Network(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.autorally_msgs.neuralNetLayer.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.autorally_msgs.neuralNetLayer'};
            validateattributes(val, validClasses, validAttributes, 'neuralNetModel', 'Network')
            obj.Network = val;
        end
        function set.NumLayers(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'neuralNetModel', 'NumLayers');
            obj.NumLayers = int32(val);
        end
        function set.Structure(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'neuralNetModel', 'Structure');
            obj.Structure = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.autorally_msgs.neuralNetModel.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.autorally_msgs.neuralNetModel;
            obj.reload(strObj);
        end
    end
end
