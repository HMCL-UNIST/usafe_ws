
classdef Gprmc < ros.Message
    %Gprmc MATLAB implementation of nmea_msgs/Gprmc
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'nmea_msgs/Gprmc' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '02533bac67f17457b2e3538525ba1aae' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'MessageId' 'UtcSeconds' 'PositionStatus' 'Lat' 'Lon' 'LatDir' 'LonDir' 'Speed' 'Track' 'Date' 'MagVar' 'MagVarDirection' 'ModeIndicator' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'message_id' 'utc_seconds' 'position_status' 'lat' 'lon' 'lat_dir' 'lon_dir' 'speed' 'track' 'date' 'mag_var' 'mag_var_direction' 'mode_indicator' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        MessageId
        UtcSeconds
        PositionStatus
        Lat
        Lon
        LatDir
        LonDir
        Speed
        Track
        Date
        MagVar
        MagVarDirection
        ModeIndicator
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'Header')
            obj.Header = val;
        end
        function set.MessageId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'MessageId');
            obj.MessageId = char(val);
        end
        function set.UtcSeconds(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'UtcSeconds');
            obj.UtcSeconds = double(val);
        end
        function set.PositionStatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'PositionStatus');
            obj.PositionStatus = char(val);
        end
        function set.Lat(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'Lat');
            obj.Lat = double(val);
        end
        function set.Lon(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'Lon');
            obj.Lon = double(val);
        end
        function set.LatDir(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'LatDir');
            obj.LatDir = char(val);
        end
        function set.LonDir(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'LonDir');
            obj.LonDir = char(val);
        end
        function set.Speed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'Speed');
            obj.Speed = single(val);
        end
        function set.Track(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'Track');
            obj.Track = single(val);
        end
        function set.Date(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'Date');
            obj.Date = char(val);
        end
        function set.MagVar(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'MagVar');
            obj.MagVar = single(val);
        end
        function set.MagVarDirection(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'MagVarDirection');
            obj.MagVarDirection = char(val);
        end
        function set.ModeIndicator(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gprmc', 'ModeIndicator');
            obj.ModeIndicator = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.nmea_msgs.Gprmc.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.nmea_msgs.Gprmc;
            obj.reload(strObj);
        end
    end
end
