
classdef VehicleWheelSpeed < ros.Message
    %VehicleWheelSpeed MATLAB implementation of hmcl_msgs/VehicleWheelSpeed
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'hmcl_msgs/VehicleWheelSpeed' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8804ce48a9e0c5cc9c60aefa163da8cd' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'WheelSpeed' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'wheel_speed' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        WheelSpeed
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'VehicleWheelSpeed', 'Header')
            obj.Header = val;
        end
        function set.WheelSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleWheelSpeed', 'WheelSpeed');
            obj.WheelSpeed = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.hmcl_msgs.VehicleWheelSpeed.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.hmcl_msgs.VehicleWheelSpeed;
            obj.reload(strObj);
        end
    end
end
