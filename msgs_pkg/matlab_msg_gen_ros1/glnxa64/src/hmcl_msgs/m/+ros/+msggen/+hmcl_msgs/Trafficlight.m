
classdef Trafficlight < ros.Message
    %Trafficlight MATLAB implementation of hmcl_msgs/Trafficlight
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'hmcl_msgs/Trafficlight' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'fcbbb59b45f60bd6eaff4eb294691b13' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'StopLine' 'Id' 'ValidStopLine' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'stop_line' 'id' 'valid_stop_line' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 'ros.msggen.geometry_msgs.Point32' ...
			 'ros.msggen.geometry_msgs.Point32' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Pose
        StopLine
        Id
        ValidStopLine
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Trafficlight', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point32'};
            validateattributes(val, validClasses, validAttributes, 'Trafficlight', 'Pose')
            obj.Pose = val;
        end
        function set.StopLine(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point32'};
            validateattributes(val, validClasses, validAttributes, 'Trafficlight', 'StopLine')
            obj.StopLine = val;
        end
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Trafficlight', 'Id');
            obj.Id = int32(val);
        end
        function set.ValidStopLine(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Trafficlight', 'ValidStopLine');
            obj.ValidStopLine = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.hmcl_msgs.Trafficlight.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.hmcl_msgs.Trafficlight;
            obj.reload(strObj);
        end
    end
end
