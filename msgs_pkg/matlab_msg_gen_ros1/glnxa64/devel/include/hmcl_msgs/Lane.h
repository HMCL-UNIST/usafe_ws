// Generated by gencpp from file hmcl_msgs/Lane.msg
// DO NOT EDIT!


#ifndef HMCL_MSGS_MESSAGE_LANE_H
#define HMCL_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hmcl_msgs/Waypoint.h>
#include <hmcl_msgs/Trafficlight.h>
#include <hmcl_msgs/Waypoint.h>

namespace hmcl_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : header()
    , lane_id(0)
    , lane_change_flag(false)
    , speed_limit(0.0)
    , waypoints()
    , trafficlights()
    , speedbumps()  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane_id(0)
    , lane_change_flag(false)
    , speed_limit(0.0)
    , waypoints(_alloc)
    , trafficlights(_alloc)
    , speedbumps(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef uint8_t _lane_change_flag_type;
  _lane_change_flag_type lane_change_flag;

   typedef float _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef std::vector< ::hmcl_msgs::Waypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hmcl_msgs::Waypoint_<ContainerAllocator> >::other >  _waypoints_type;
  _waypoints_type waypoints;

   typedef std::vector< ::hmcl_msgs::Trafficlight_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >::other >  _trafficlights_type;
  _trafficlights_type trafficlights;

   typedef std::vector< ::hmcl_msgs::Waypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hmcl_msgs::Waypoint_<ContainerAllocator> >::other >  _speedbumps_type;
  _speedbumps_type speedbumps;





  typedef boost::shared_ptr< ::hmcl_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmcl_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::hmcl_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::hmcl_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::hmcl_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmcl_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmcl_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hmcl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'hmcl_msgs': ['/home/hmcl/usafe/src/msgs_pkg/matlab_msg_gen_ros1/glnxa64/src/hmcl_msgs/msg'], 'geometry_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmcl_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d39725cdc21d64784ecdb0c128d652a2";
  }

  static const char* value(const ::hmcl_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd39725cdc21d6478ULL;
  static const uint64_t static_value2 = 0x4ecdb0c128d652a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::hmcl_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmcl_msgs/Lane";
  }

  static const char* value(const ::hmcl_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmcl_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 lane_id\n"
"bool lane_change_flag\n"
"float32 speed_limit \n"
"Waypoint[] waypoints\n"
"Trafficlight[] trafficlights\n"
"Waypoint[] speedbumps\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: hmcl_msgs/Waypoint\n"
"# global id\n"
"int32 gid \n"
"# local id\n"
"int32 lid\n"
"geometry_msgs/PoseStamped pose\n"
"geometry_msgs/TwistStamped twist\n"
"uint32 lane_id\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistStamped\n"
"# A twist with reference coordinate frame and timestamp\n"
"Header header\n"
"Twist twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: hmcl_msgs/Trafficlight\n"
"Header header\n"
"int32 id\n"
"geometry_msgs/Point32 pose\n"
"bool valid_stop_line\n"
"geometry_msgs/Point32 stop_line\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::hmcl_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmcl_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane_id);
      stream.next(m.lane_change_flag);
      stream.next(m.speed_limit);
      stream.next(m.waypoints);
      stream.next(m.trafficlights);
      stream.next(m.speedbumps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmcl_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmcl_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "lane_change_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_change_flag);
    s << indent << "speed_limit: ";
    Printer<float>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hmcl_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "trafficlights[]" << std::endl;
    for (size_t i = 0; i < v.trafficlights.size(); ++i)
    {
      s << indent << "  trafficlights[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hmcl_msgs::Trafficlight_<ContainerAllocator> >::stream(s, indent + "    ", v.trafficlights[i]);
    }
    s << indent << "speedbumps[]" << std::endl;
    for (size_t i = 0; i < v.speedbumps.size(); ++i)
    {
      s << indent << "  speedbumps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hmcl_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.speedbumps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMCL_MSGS_MESSAGE_LANE_H
