<launch>

  <!-- 
    # lidar detector #
    In:  /points_no_ground [sensor_msgs::PointCloud2]
    Out: /cluster_centroids [autoware_msgs::Centroids]
    Out: /detection/lidar_detector/cloud_clusters [autoware_msgs::CloudClusterArray]
    Out: /detection/lidar_detector/objects [autoware_msgs::DetectedObjectArray]
    Out: /detection/lidar_detector/objects_filtered [autoware_msgs::DetectedObjectArray]
    Out: /points_cluster [sensor_msgs::PointCloud2]
    Out: /points_ground [sensor_msgs::PointCloud2]
    Out: /points_lanes [sensor_msgs::PointCloud2]
  -->
  <include file='$(find lidar_euclidean_cluster_detect)/launch/lidar_euclidean_cluster_detect.launch'>
    <arg name='points_node' value='/points_without_map'/>
    <arg name='use_gpu' value='true'/>

    <arg name='remove_ground' value='false'/>
    <arg name='downsample_cloud' value='false'/>

    <arg name='clip_min_height' value='-2.5'/>
    <arg name='clip_max_height' value='2.5'/>

    <!-- Remove the detected objects outside of the drivable area -->
    <arg name='use_vector_map' value='false'/>
  </include>
  

  <!--
    # lidar shape estimation #
    In:  /detection/lidar_detector/objects_filtered [autoware_msgs::DetectedObjectArray]
    Out: /detection/l_shaped/objects [autoware_msgs::DetectedObjectArray]
  -->
  <include file='$(find lidar_naive_l_shape_detect)/launch/lidar_naive_l_shape_detect.launch'>
    <arg name='input_topic' value='/detection/lidar_detector/objects'/>
    <arg name='random_ponts' value='160'/>
    <arg name='sensor_height' value='2.4'/>
  </include>

  <!--
    # lidar tracker #
    In:  /detection/l_shaped/objects [autoware_msgs::DetectedObjectArray]
    Out: /detection/lidar_tracker/objects [autoware_msgs::DetectedObjectArray]
  -->
  <!-- <include file='$(find lidar_kf_contour_track)/launch/lidar_kf_contour_track.launch' /> -->

  <include file='$(find imm_ukf_pda_track)/launch/imm_ukf_pda_track.launch'>
    <arg name='namespace' value='/detection/lidar_tracker'/>
    <arg name='tracker_input_topic' value='/detection/l_shaped/objects'/>
    <arg name='tracker_output_topic' value='/detection/lidar_tracker/objects'/>
  </include>

  <!--
    # vision detection #
    In:  /image_raw [sensor_msgs::Image]
    Out: /detection/image_detector/objects [autoware_msgs::DetectedObjectArray]
  -->
  <include file='$(find vision_darknet_detect)/launch/vision_yolo3_detect.launch'>
    <arg name='camera_id' value='front' />
    <arg name='gpu_device_id' value="0"/>
    <arg name='image_src' value="/carla/ego_vehicle/camera/rgb/front/image_color" />

    <arg name='score_threshold' value='0.50'/>
    <arg name='nms_threshold' value='0.30'/>
    <arg name='pretrained_model_file' value='$(find vision_darknet_detect)/darknet/data/yolov3.weights'/>
    <arg name='names_file' value='$(find vision_darknet_detect)/darknet/cfg/coco.names'/>
  </include>

  <!-- <include file='$(find vision_darknet_detect)/launch/vision_yolo3_detect.launch'>
    <arg name='camera_id' value='left' />
    <arg name='gpu_device_id' value="0"/>
    <arg name='image_src' value="/carla/ego_vehicle/camera/rgb/left/image_color" />

    <arg name='score_threshold' value='0.50'/>
    <arg name='nms_threshold' value='0.30'/>
    <arg name='pretrained_model_file' value='$(find vision_darknet_detect)/darknet/data/yolov3.weights'/>
    <arg name='names_file' value='$(find vision_darknet_detect)/darknet/cfg/coco.names'/>
  </include> -->

  <!-- <include file='$(find vision_darknet_detect)/launch/vision_yolo3_detect.launch'>
    <arg name='camera_id' value='right' />
    <arg name='gpu_device_id' value="0"/>
    <arg name='image_src' value="/carla/ego_vehicle/camera/rgb/right/image_color" />
    
    <arg name='score_threshold' value='0.50'/>
    <arg name='nms_threshold' value='0.30'/>
    <arg name='pretrained_model_file' value='$(find vision_darknet_detect)/darknet/data/yolov3.weights'/>
    <arg name='names_file' value='$(find vision_darknet_detect)/darknet/cfg/coco.names'/>
  </include> -->

  <include file='$(find vision_darknet_detect)/launch/vision_yolo3_detect.launch'>
    <arg name='camera_id' value='rear' />
    <arg name='gpu_device_id' value="0"/>
    <arg name='image_src' value="/carla/ego_vehicle/camera/rgb/rear/image_color" />
   
    <arg name='score_threshold' value='0.50'/>
    <arg name='nms_threshold' value='0.30'/>
    <arg name='pretrained_model_file' value='$(find vision_darknet_detect)/darknet/data/yolov3.weights'/>
    <arg name='names_file' value='$(find vision_darknet_detect)/darknet/cfg/coco.names'/>
  </include>

  <!--
    # vision tracker #
    In:  /detection/image_detector/objects [autoware_msgs::DetectedObjectArray]
    Out: /detection/image_tracker/objects [autoware_msgs::DetectedObjectArray]
  -->
  <include file='$(find vision_beyond_track)/launch/vision_beyond_track.launch'>
    <arg name='camera_info_src' value='/carla/ego_vehicle/camera/rgb/front/camera_info'/>
    <arg name='objects_topic_src' value='/detection/image_detector/front/objects'/>
    <arg name='output_topic' value='/detection/image_tracker/front/objects' />
  </include>

  <node pkg='detected_objects_visualizer' type='visualize_rects' name='image_tracker_rects' output='screen'>
    <param name='image_src' value='/carla/ego_vehicle/camera/rgb/front/image_color'/>
    <param name='image_out' value='/image_tracker_rects'/>
    <param name='object_src' value='/detection/image_detector/front/objects'/>
  </node>

  <!--
    # range vision fusion #
    In:  /detection/image_tracker/objects [autoware_msgs::DetectedObjectArray]
    In:  /detection/lidar_tracker/objects [autoware_msgs::DetectedObjectArray]
    Out: /detection/fusion_tools/objects [autoware_msgs::DetectedObjectArray]
  -->
  <include file='$(find range_vision_fusion)/launch/range_vision_fusion.launch'>
    <arg name='camera_node_name' value='/carla/ego_vehicle/camera/rgb'/>  
    <arg name='camera_list' value='[front,rear]' /> 
    <arg name='detected_objects_range' value='/detection/lidar_tracker/objects'/>
    <arg name='detected_objects_vision' value='/detection/image_detector'/>
    <!-- change topic's frame_id to /map, apply transform -->
    <arg name="use_map_coordinate" value="false"/> 
    <arg name="map_frame_id" value="map"/>
    <arg name="overlap_threshold" value="0.6"/>
    <arg name="use_vector_map" value="false"/>
    <arg name='namespace' value='/detection/fusion_tools'/>
  </include>

  <include file='$(find lidar_shape_estimation)/launch/shape_estimation_fusion.launch' />

  <!--
    # motion predictor #
    In:  /detection/fusion_tools/objects [autoware_msgs::DetectedObjectArray]
    Out: /prediction/motion_predictor/objects [autoware_msgs::DetectedObjectArray]
    Out: /prediction/motion_predictor/path_markers [visualization_msgs::MarkerArray]
  -->
  <include file='$(find naive_motion_predict)/launch/naive_motion_predict.launch'>
    <arg name='input_topic' value='/detection/fusion_tools/objects'/>
  </include>

  <include file='$(find vision_lane_detect)/launch/vision_lane_detect.launch'>
    <arg name='image_raw_topic' value='/carla/ego_vehicle/camera/rgb/front/image_color'/>
  </include>

  <include file='$(find trafficlight_recognizer)/launch/feat_proj_lanelet2.launch'>
    <arg name="camera_id" value="/carla/ego_vehicle/camera/rgb/front"/>
    <arg name="camera_info_src" value="/camera_info"/>
    <arg name="use_path_info" value="false"/> <!-- USE VectorMap Server to publish only TrafficSignals on current lane-->
    <arg name="roi_search_min_distance" value="1.0"/>
    <arg name="roi_search_max_distance" value="200.0"/>
  </include>
  
  <include file='$(find trafficlight_recognizer)/launch/traffic_light_recognition_ssd.launch'>
    <arg name='image_src' value='traffic_light_image'/>
    <arg name="use_gpu" value="true" />
    <arg name="gpu_device_id" value="0" />
  </include>

  <include file='$(find road_occupancy_processor)/launch/road_occupancy_processor.launch'>
    <arg name="points_ground_src" value="points_ground" /> <!-- PointCloud Ground filtered source topic-->
    <arg name="points_no_ground_src" value="points_no_ground" /> <!-- PointCloud NoGround filtered source topic-->
    <arg name="wayarea_topic_src" value="grid_map_wayarea" /> <!-- GridMap Road data source topic-->
    <arg name="wayarea_layer_name" value="wayarea" /> <!-- NAme of the layer in the GridMap containing the road data-->
    <arg name="output_layer_name" value="road_status" /> <!-- NAme of the output layer in the GridMap-->
    <arg name="road_unknown_value" value="128" />     <!-- Value to fill in the occupancy grid when a cell is UNKNOWN -->
    <arg name="road_free_value" value="75" />         <!-- Value to fill in the occupancy grid when a cell is FREE-->
    <arg name="road_occupied_value" value="0" />      <!-- Value to fill in the occupancy grid when a cell is OCCUPIED-->
    <arg name="no_road_value" value="255" />    
  </include>

</launch>