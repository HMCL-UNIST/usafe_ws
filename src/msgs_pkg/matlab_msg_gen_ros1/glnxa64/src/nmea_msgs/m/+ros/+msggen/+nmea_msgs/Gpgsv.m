
classdef Gpgsv < ros.Message
    %Gpgsv MATLAB implementation of nmea_msgs/Gpgsv
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'nmea_msgs/Gpgsv' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6f34bebc32fe085313c942a96fd39c77' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Satellites' 'MessageId' 'NMsgs' 'MsgNumber' 'NSatellites' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'satellites' 'message_id' 'n_msgs' 'msg_number' 'n_satellites' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 'ros.msggen.nmea_msgs.GpgsvSatellite' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Satellites
        MessageId
        NMsgs
        MsgNumber
        NSatellites
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Gpgsv', 'Header')
            obj.Header = val;
        end
        function set.Satellites(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.nmea_msgs.GpgsvSatellite.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.nmea_msgs.GpgsvSatellite'};
            validateattributes(val, validClasses, validAttributes, 'Gpgsv', 'Satellites')
            obj.Satellites = val;
        end
        function set.MessageId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Gpgsv', 'MessageId');
            obj.MessageId = char(val);
        end
        function set.NMsgs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gpgsv', 'NMsgs');
            obj.NMsgs = uint8(val);
        end
        function set.MsgNumber(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gpgsv', 'MsgNumber');
            obj.MsgNumber = uint8(val);
        end
        function set.NSatellites(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Gpgsv', 'NSatellites');
            obj.NSatellites = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.nmea_msgs.Gpgsv.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.nmea_msgs.Gpgsv;
            obj.reload(strObj);
        end
    end
end
