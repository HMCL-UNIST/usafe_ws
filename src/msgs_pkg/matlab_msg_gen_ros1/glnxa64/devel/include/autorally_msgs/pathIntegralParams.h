// Generated by gencpp from file autorally_msgs/pathIntegralParams.msg
// DO NOT EDIT!


#ifndef AUTORALLY_MSGS_MESSAGE_PATHINTEGRALPARAMS_H
#define AUTORALLY_MSGS_MESSAGE_PATHINTEGRALPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autorally_msgs
{
template <class ContainerAllocator>
struct pathIntegralParams_
{
  typedef pathIntegralParams_<ContainerAllocator> Type;

  pathIntegralParams_()
    : hz(0)
    , num_timesteps(0)
    , num_iters(0)
    , gamma(0.0)
    , init_steering(0.0)
    , init_throttle(0.0)
    , steering_var(0.0)
    , throttle_var(0.0)
    , max_throttle(0.0)
    , speed_coefficient(0.0)
    , track_coefficient(0.0)
    , max_slip_angle(0.0)
    , track_slop(0.0)
    , crash_coeff(0.0)
    , map_path()
    , desired_speed(0.0)  {
    }
  pathIntegralParams_(const ContainerAllocator& _alloc)
    : hz(0)
    , num_timesteps(0)
    , num_iters(0)
    , gamma(0.0)
    , init_steering(0.0)
    , init_throttle(0.0)
    , steering_var(0.0)
    , throttle_var(0.0)
    , max_throttle(0.0)
    , speed_coefficient(0.0)
    , track_coefficient(0.0)
    , max_slip_angle(0.0)
    , track_slop(0.0)
    , crash_coeff(0.0)
    , map_path(_alloc)
    , desired_speed(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _hz_type;
  _hz_type hz;

   typedef int64_t _num_timesteps_type;
  _num_timesteps_type num_timesteps;

   typedef int64_t _num_iters_type;
  _num_iters_type num_iters;

   typedef double _gamma_type;
  _gamma_type gamma;

   typedef double _init_steering_type;
  _init_steering_type init_steering;

   typedef double _init_throttle_type;
  _init_throttle_type init_throttle;

   typedef double _steering_var_type;
  _steering_var_type steering_var;

   typedef double _throttle_var_type;
  _throttle_var_type throttle_var;

   typedef double _max_throttle_type;
  _max_throttle_type max_throttle;

   typedef double _speed_coefficient_type;
  _speed_coefficient_type speed_coefficient;

   typedef double _track_coefficient_type;
  _track_coefficient_type track_coefficient;

   typedef double _max_slip_angle_type;
  _max_slip_angle_type max_slip_angle;

   typedef double _track_slop_type;
  _track_slop_type track_slop;

   typedef double _crash_coeff_type;
  _crash_coeff_type crash_coeff;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_path_type;
  _map_path_type map_path;

   typedef double _desired_speed_type;
  _desired_speed_type desired_speed;





  typedef boost::shared_ptr< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> const> ConstPtr;

}; // struct pathIntegralParams_

typedef ::autorally_msgs::pathIntegralParams_<std::allocator<void> > pathIntegralParams;

typedef boost::shared_ptr< ::autorally_msgs::pathIntegralParams > pathIntegralParamsPtr;
typedef boost::shared_ptr< ::autorally_msgs::pathIntegralParams const> pathIntegralParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autorally_msgs::pathIntegralParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autorally_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'autorally_msgs': ['/home/hmcl/usafe/src/msgs_pkg/matlab_msg_gen_ros1/glnxa64/src/autorally_msgs/msg'], 'std_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/usr/local/MATLAB/R2020b/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "262665b21f53db4e41908d6cccfe0a29";
  }

  static const char* value(const ::autorally_msgs::pathIntegralParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x262665b21f53db4eULL;
  static const uint64_t static_value2 = 0x41908d6cccfe0a29ULL;
};

template<class ContainerAllocator>
struct DataType< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autorally_msgs/pathIntegralParams";
  }

  static const char* value(const ::autorally_msgs::pathIntegralParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 hz\n"
"int64 num_timesteps\n"
"int64 num_iters\n"
"float64 gamma\n"
"float64 init_steering\n"
"float64 init_throttle\n"
"float64 steering_var\n"
"float64 throttle_var\n"
"float64 max_throttle\n"
"float64 speed_coefficient\n"
"float64 track_coefficient\n"
"float64 max_slip_angle\n"
"float64 track_slop\n"
"float64 crash_coeff\n"
"string map_path\n"
"float64 desired_speed\n"
;
  }

  static const char* value(const ::autorally_msgs::pathIntegralParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hz);
      stream.next(m.num_timesteps);
      stream.next(m.num_iters);
      stream.next(m.gamma);
      stream.next(m.init_steering);
      stream.next(m.init_throttle);
      stream.next(m.steering_var);
      stream.next(m.throttle_var);
      stream.next(m.max_throttle);
      stream.next(m.speed_coefficient);
      stream.next(m.track_coefficient);
      stream.next(m.max_slip_angle);
      stream.next(m.track_slop);
      stream.next(m.crash_coeff);
      stream.next(m.map_path);
      stream.next(m.desired_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pathIntegralParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autorally_msgs::pathIntegralParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autorally_msgs::pathIntegralParams_<ContainerAllocator>& v)
  {
    s << indent << "hz: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hz);
    s << indent << "num_timesteps: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_timesteps);
    s << indent << "num_iters: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_iters);
    s << indent << "gamma: ";
    Printer<double>::stream(s, indent + "  ", v.gamma);
    s << indent << "init_steering: ";
    Printer<double>::stream(s, indent + "  ", v.init_steering);
    s << indent << "init_throttle: ";
    Printer<double>::stream(s, indent + "  ", v.init_throttle);
    s << indent << "steering_var: ";
    Printer<double>::stream(s, indent + "  ", v.steering_var);
    s << indent << "throttle_var: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_var);
    s << indent << "max_throttle: ";
    Printer<double>::stream(s, indent + "  ", v.max_throttle);
    s << indent << "speed_coefficient: ";
    Printer<double>::stream(s, indent + "  ", v.speed_coefficient);
    s << indent << "track_coefficient: ";
    Printer<double>::stream(s, indent + "  ", v.track_coefficient);
    s << indent << "max_slip_angle: ";
    Printer<double>::stream(s, indent + "  ", v.max_slip_angle);
    s << indent << "track_slop: ";
    Printer<double>::stream(s, indent + "  ", v.track_slop);
    s << indent << "crash_coeff: ";
    Printer<double>::stream(s, indent + "  ", v.crash_coeff);
    s << indent << "map_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_path);
    s << indent << "desired_speed: ";
    Printer<double>::stream(s, indent + "  ", v.desired_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTORALLY_MSGS_MESSAGE_PATHINTEGRALPARAMS_H
