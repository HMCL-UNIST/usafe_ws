# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autorally_msgs/pathIntegralParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pathIntegralParams(genpy.Message):
  _md5sum = "262665b21f53db4e41908d6cccfe0a29"
  _type = "autorally_msgs/pathIntegralParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 hz
int64 num_timesteps
int64 num_iters
float64 gamma
float64 init_steering
float64 init_throttle
float64 steering_var
float64 throttle_var
float64 max_throttle
float64 speed_coefficient
float64 track_coefficient
float64 max_slip_angle
float64 track_slop
float64 crash_coeff
string map_path
float64 desired_speed"""
  __slots__ = ['hz','num_timesteps','num_iters','gamma','init_steering','init_throttle','steering_var','throttle_var','max_throttle','speed_coefficient','track_coefficient','max_slip_angle','track_slop','crash_coeff','map_path','desired_speed']
  _slot_types = ['int64','int64','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','string','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hz,num_timesteps,num_iters,gamma,init_steering,init_throttle,steering_var,throttle_var,max_throttle,speed_coefficient,track_coefficient,max_slip_angle,track_slop,crash_coeff,map_path,desired_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pathIntegralParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hz is None:
        self.hz = 0
      if self.num_timesteps is None:
        self.num_timesteps = 0
      if self.num_iters is None:
        self.num_iters = 0
      if self.gamma is None:
        self.gamma = 0.
      if self.init_steering is None:
        self.init_steering = 0.
      if self.init_throttle is None:
        self.init_throttle = 0.
      if self.steering_var is None:
        self.steering_var = 0.
      if self.throttle_var is None:
        self.throttle_var = 0.
      if self.max_throttle is None:
        self.max_throttle = 0.
      if self.speed_coefficient is None:
        self.speed_coefficient = 0.
      if self.track_coefficient is None:
        self.track_coefficient = 0.
      if self.max_slip_angle is None:
        self.max_slip_angle = 0.
      if self.track_slop is None:
        self.track_slop = 0.
      if self.crash_coeff is None:
        self.crash_coeff = 0.
      if self.map_path is None:
        self.map_path = ''
      if self.desired_speed is None:
        self.desired_speed = 0.
    else:
      self.hz = 0
      self.num_timesteps = 0
      self.num_iters = 0
      self.gamma = 0.
      self.init_steering = 0.
      self.init_throttle = 0.
      self.steering_var = 0.
      self.throttle_var = 0.
      self.max_throttle = 0.
      self.speed_coefficient = 0.
      self.track_coefficient = 0.
      self.max_slip_angle = 0.
      self.track_slop = 0.
      self.crash_coeff = 0.
      self.map_path = ''
      self.desired_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3q11d().pack(_x.hz, _x.num_timesteps, _x.num_iters, _x.gamma, _x.init_steering, _x.init_throttle, _x.steering_var, _x.throttle_var, _x.max_throttle, _x.speed_coefficient, _x.track_coefficient, _x.max_slip_angle, _x.track_slop, _x.crash_coeff))
      _x = self.map_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.desired_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.hz, _x.num_timesteps, _x.num_iters, _x.gamma, _x.init_steering, _x.init_throttle, _x.steering_var, _x.throttle_var, _x.max_throttle, _x.speed_coefficient, _x.track_coefficient, _x.max_slip_angle, _x.track_slop, _x.crash_coeff,) = _get_struct_3q11d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_path = str[start:end].decode('utf-8')
      else:
        self.map_path = str[start:end]
      start = end
      end += 8
      (self.desired_speed,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3q11d().pack(_x.hz, _x.num_timesteps, _x.num_iters, _x.gamma, _x.init_steering, _x.init_throttle, _x.steering_var, _x.throttle_var, _x.max_throttle, _x.speed_coefficient, _x.track_coefficient, _x.max_slip_angle, _x.track_slop, _x.crash_coeff))
      _x = self.map_path
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.desired_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.hz, _x.num_timesteps, _x.num_iters, _x.gamma, _x.init_steering, _x.init_throttle, _x.steering_var, _x.throttle_var, _x.max_throttle, _x.speed_coefficient, _x.track_coefficient, _x.max_slip_angle, _x.track_slop, _x.crash_coeff,) = _get_struct_3q11d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_path = str[start:end].decode('utf-8')
      else:
        self.map_path = str[start:end]
      start = end
      end += 8
      (self.desired_speed,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3q11d = None
def _get_struct_3q11d():
    global _struct_3q11d
    if _struct_3q11d is None:
        _struct_3q11d = struct.Struct("<3q11d")
    return _struct_3q11d
