// Generated by gencpp from file hmcl_msgs/BehaviorFactor.msg
// DO NOT EDIT!


#ifndef HMCL_MSGS_MESSAGE_BEHAVIORFACTOR_H
#define HMCL_MSGS_MESSAGE_BEHAVIORFACTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <hmcl_msgs/TransitionCondition.h>

namespace hmcl_msgs
{
template <class ContainerAllocator>
struct BehaviorFactor_
{
  typedef BehaviorFactor_<ContainerAllocator> Type;

  BehaviorFactor_()
    : header()
    , transition_condition()
    , front_id(0)
    , stop_line_stop(false)
    , front_dist(0.0)  {
    }
  BehaviorFactor_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , transition_condition(_alloc)
    , front_id(0)
    , stop_line_stop(false)
    , front_dist(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::hmcl_msgs::TransitionCondition_<ContainerAllocator>  _transition_condition_type;
  _transition_condition_type transition_condition;

   typedef int16_t _front_id_type;
  _front_id_type front_id;

   typedef uint8_t _stop_line_stop_type;
  _stop_line_stop_type stop_line_stop;

   typedef float _front_dist_type;
  _front_dist_type front_dist;





  typedef boost::shared_ptr< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorFactor_

typedef ::hmcl_msgs::BehaviorFactor_<std::allocator<void> > BehaviorFactor;

typedef boost::shared_ptr< ::hmcl_msgs::BehaviorFactor > BehaviorFactorPtr;
typedef boost::shared_ptr< ::hmcl_msgs::BehaviorFactor const> BehaviorFactorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator1> & lhs, const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.transition_condition == rhs.transition_condition &&
    lhs.front_id == rhs.front_id &&
    lhs.stop_line_stop == rhs.stop_line_stop &&
    lhs.front_dist == rhs.front_dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator1> & lhs, const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmcl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "007955b848a31590079e09deb110b6e6";
  }

  static const char* value(const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x007955b848a31590ULL;
  static const uint64_t static_value2 = 0x079e09deb110b6e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmcl_msgs/BehaviorFactor";
  }

  static const char* value(const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"hmcl_msgs/TransitionCondition transition_condition\n"
"int16 front_id\n"
"bool stop_line_stop\n"
"float32 front_dist\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: hmcl_msgs/TransitionCondition\n"
"bool missionStart\n"
"bool approachToStartPos\n"
"bool startArrivalCheck\n"
"bool startArrivalSuccess\n"
"bool frontCar\n"
"bool stationaryFrontCar\n"
"bool approachToCrosswalk\n"
"bool crosswalkPass\n"
"bool pedestrianOnCrosswalk\n"
"bool leftTurn\n"
"bool rightTurn\n"
"bool turn\n"
"bool trafficLightStop\n"
"bool stopCheck\n"
"bool luggageDrop\n"
"bool brokenFrontCar\n"
"bool laneChangeDone\n"
"bool essentialLaneChange\n"
"bool speedBumpSign\n"
"bool speedBumpPass\n"
"bool approachToGoalPos\n"
"bool goalArrivalCheck\n"
;
  }

  static const char* value(const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.transition_condition);
      stream.next(m.front_id);
      stream.next(m.stop_line_stop);
      stream.next(m.front_dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorFactor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmcl_msgs::BehaviorFactor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmcl_msgs::BehaviorFactor_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "transition_condition: ";
    s << std::endl;
    Printer< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >::stream(s, indent + "  ", v.transition_condition);
    s << indent << "front_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.front_id);
    s << indent << "stop_line_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_line_stop);
    s << indent << "front_dist: ";
    Printer<float>::stream(s, indent + "  ", v.front_dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMCL_MSGS_MESSAGE_BEHAVIORFACTOR_H
