// Generated by gencpp from file hmcl_msgs/TransitionCondition.msg
// DO NOT EDIT!


#ifndef HMCL_MSGS_MESSAGE_TRANSITIONCONDITION_H
#define HMCL_MSGS_MESSAGE_TRANSITIONCONDITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hmcl_msgs
{
template <class ContainerAllocator>
struct TransitionCondition_
{
  typedef TransitionCondition_<ContainerAllocator> Type;

  TransitionCondition_()
    : missionStart(false)
    , approachToStartPos(false)
    , startArrivalCheck(false)
    , startArrivalSuccess(false)
    , frontCar(false)
    , stationaryFrontCar(false)
    , approachToCrosswalk(false)
    , crosswalkPass(false)
    , pedestrianOnCrosswalk(false)
    , leftTurn(false)
    , rightTurn(false)
    , turn(false)
    , trafficLightStop(false)
    , stopCheck(false)
    , luggageDrop(false)
    , brokenFrontCar(false)
    , laneChangeDone(false)
    , essentialLaneChange(false)
    , speedBumpSign(false)
    , speedBumpPass(false)
    , approachToGoalPos(false)
    , goalArrivalCheck(false)  {
    }
  TransitionCondition_(const ContainerAllocator& _alloc)
    : missionStart(false)
    , approachToStartPos(false)
    , startArrivalCheck(false)
    , startArrivalSuccess(false)
    , frontCar(false)
    , stationaryFrontCar(false)
    , approachToCrosswalk(false)
    , crosswalkPass(false)
    , pedestrianOnCrosswalk(false)
    , leftTurn(false)
    , rightTurn(false)
    , turn(false)
    , trafficLightStop(false)
    , stopCheck(false)
    , luggageDrop(false)
    , brokenFrontCar(false)
    , laneChangeDone(false)
    , essentialLaneChange(false)
    , speedBumpSign(false)
    , speedBumpPass(false)
    , approachToGoalPos(false)
    , goalArrivalCheck(false)  {
  (void)_alloc;
    }



   typedef uint8_t _missionStart_type;
  _missionStart_type missionStart;

   typedef uint8_t _approachToStartPos_type;
  _approachToStartPos_type approachToStartPos;

   typedef uint8_t _startArrivalCheck_type;
  _startArrivalCheck_type startArrivalCheck;

   typedef uint8_t _startArrivalSuccess_type;
  _startArrivalSuccess_type startArrivalSuccess;

   typedef uint8_t _frontCar_type;
  _frontCar_type frontCar;

   typedef uint8_t _stationaryFrontCar_type;
  _stationaryFrontCar_type stationaryFrontCar;

   typedef uint8_t _approachToCrosswalk_type;
  _approachToCrosswalk_type approachToCrosswalk;

   typedef uint8_t _crosswalkPass_type;
  _crosswalkPass_type crosswalkPass;

   typedef uint8_t _pedestrianOnCrosswalk_type;
  _pedestrianOnCrosswalk_type pedestrianOnCrosswalk;

   typedef uint8_t _leftTurn_type;
  _leftTurn_type leftTurn;

   typedef uint8_t _rightTurn_type;
  _rightTurn_type rightTurn;

   typedef uint8_t _turn_type;
  _turn_type turn;

   typedef uint8_t _trafficLightStop_type;
  _trafficLightStop_type trafficLightStop;

   typedef uint8_t _stopCheck_type;
  _stopCheck_type stopCheck;

   typedef uint8_t _luggageDrop_type;
  _luggageDrop_type luggageDrop;

   typedef uint8_t _brokenFrontCar_type;
  _brokenFrontCar_type brokenFrontCar;

   typedef uint8_t _laneChangeDone_type;
  _laneChangeDone_type laneChangeDone;

   typedef uint8_t _essentialLaneChange_type;
  _essentialLaneChange_type essentialLaneChange;

   typedef uint8_t _speedBumpSign_type;
  _speedBumpSign_type speedBumpSign;

   typedef uint8_t _speedBumpPass_type;
  _speedBumpPass_type speedBumpPass;

   typedef uint8_t _approachToGoalPos_type;
  _approachToGoalPos_type approachToGoalPos;

   typedef uint8_t _goalArrivalCheck_type;
  _goalArrivalCheck_type goalArrivalCheck;





  typedef boost::shared_ptr< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> const> ConstPtr;

}; // struct TransitionCondition_

typedef ::hmcl_msgs::TransitionCondition_<std::allocator<void> > TransitionCondition;

typedef boost::shared_ptr< ::hmcl_msgs::TransitionCondition > TransitionConditionPtr;
typedef boost::shared_ptr< ::hmcl_msgs::TransitionCondition const> TransitionConditionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmcl_msgs::TransitionCondition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmcl_msgs::TransitionCondition_<ContainerAllocator1> & lhs, const ::hmcl_msgs::TransitionCondition_<ContainerAllocator2> & rhs)
{
  return lhs.missionStart == rhs.missionStart &&
    lhs.approachToStartPos == rhs.approachToStartPos &&
    lhs.startArrivalCheck == rhs.startArrivalCheck &&
    lhs.startArrivalSuccess == rhs.startArrivalSuccess &&
    lhs.frontCar == rhs.frontCar &&
    lhs.stationaryFrontCar == rhs.stationaryFrontCar &&
    lhs.approachToCrosswalk == rhs.approachToCrosswalk &&
    lhs.crosswalkPass == rhs.crosswalkPass &&
    lhs.pedestrianOnCrosswalk == rhs.pedestrianOnCrosswalk &&
    lhs.leftTurn == rhs.leftTurn &&
    lhs.rightTurn == rhs.rightTurn &&
    lhs.turn == rhs.turn &&
    lhs.trafficLightStop == rhs.trafficLightStop &&
    lhs.stopCheck == rhs.stopCheck &&
    lhs.luggageDrop == rhs.luggageDrop &&
    lhs.brokenFrontCar == rhs.brokenFrontCar &&
    lhs.laneChangeDone == rhs.laneChangeDone &&
    lhs.essentialLaneChange == rhs.essentialLaneChange &&
    lhs.speedBumpSign == rhs.speedBumpSign &&
    lhs.speedBumpPass == rhs.speedBumpPass &&
    lhs.approachToGoalPos == rhs.approachToGoalPos &&
    lhs.goalArrivalCheck == rhs.goalArrivalCheck;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmcl_msgs::TransitionCondition_<ContainerAllocator1> & lhs, const ::hmcl_msgs::TransitionCondition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmcl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cca5c3113432d6f9d44e33df94544699";
  }

  static const char* value(const ::hmcl_msgs::TransitionCondition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcca5c3113432d6f9ULL;
  static const uint64_t static_value2 = 0xd44e33df94544699ULL;
};

template<class ContainerAllocator>
struct DataType< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmcl_msgs/TransitionCondition";
  }

  static const char* value(const ::hmcl_msgs::TransitionCondition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool missionStart\n"
"bool approachToStartPos\n"
"bool startArrivalCheck\n"
"bool startArrivalSuccess\n"
"bool frontCar\n"
"bool stationaryFrontCar\n"
"bool approachToCrosswalk\n"
"bool crosswalkPass\n"
"bool pedestrianOnCrosswalk\n"
"bool leftTurn\n"
"bool rightTurn\n"
"bool turn\n"
"bool trafficLightStop\n"
"bool stopCheck\n"
"bool luggageDrop\n"
"bool brokenFrontCar\n"
"bool laneChangeDone\n"
"bool essentialLaneChange\n"
"bool speedBumpSign\n"
"bool speedBumpPass\n"
"bool approachToGoalPos\n"
"bool goalArrivalCheck\n"
;
  }

  static const char* value(const ::hmcl_msgs::TransitionCondition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.missionStart);
      stream.next(m.approachToStartPos);
      stream.next(m.startArrivalCheck);
      stream.next(m.startArrivalSuccess);
      stream.next(m.frontCar);
      stream.next(m.stationaryFrontCar);
      stream.next(m.approachToCrosswalk);
      stream.next(m.crosswalkPass);
      stream.next(m.pedestrianOnCrosswalk);
      stream.next(m.leftTurn);
      stream.next(m.rightTurn);
      stream.next(m.turn);
      stream.next(m.trafficLightStop);
      stream.next(m.stopCheck);
      stream.next(m.luggageDrop);
      stream.next(m.brokenFrontCar);
      stream.next(m.laneChangeDone);
      stream.next(m.essentialLaneChange);
      stream.next(m.speedBumpSign);
      stream.next(m.speedBumpPass);
      stream.next(m.approachToGoalPos);
      stream.next(m.goalArrivalCheck);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransitionCondition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmcl_msgs::TransitionCondition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmcl_msgs::TransitionCondition_<ContainerAllocator>& v)
  {
    s << indent << "missionStart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.missionStart);
    s << indent << "approachToStartPos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.approachToStartPos);
    s << indent << "startArrivalCheck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startArrivalCheck);
    s << indent << "startArrivalSuccess: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startArrivalSuccess);
    s << indent << "frontCar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frontCar);
    s << indent << "stationaryFrontCar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stationaryFrontCar);
    s << indent << "approachToCrosswalk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.approachToCrosswalk);
    s << indent << "crosswalkPass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.crosswalkPass);
    s << indent << "pedestrianOnCrosswalk: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedestrianOnCrosswalk);
    s << indent << "leftTurn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leftTurn);
    s << indent << "rightTurn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rightTurn);
    s << indent << "turn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn);
    s << indent << "trafficLightStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trafficLightStop);
    s << indent << "stopCheck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stopCheck);
    s << indent << "luggageDrop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.luggageDrop);
    s << indent << "brokenFrontCar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brokenFrontCar);
    s << indent << "laneChangeDone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laneChangeDone);
    s << indent << "essentialLaneChange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.essentialLaneChange);
    s << indent << "speedBumpSign: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speedBumpSign);
    s << indent << "speedBumpPass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speedBumpPass);
    s << indent << "approachToGoalPos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.approachToGoalPos);
    s << indent << "goalArrivalCheck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goalArrivalCheck);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMCL_MSGS_MESSAGE_TRANSITIONCONDITION_H
