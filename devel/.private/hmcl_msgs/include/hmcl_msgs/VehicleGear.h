// Generated by gencpp from file hmcl_msgs/VehicleGear.msg
// DO NOT EDIT!


#ifndef HMCL_MSGS_MESSAGE_VEHICLEGEAR_H
#define HMCL_MSGS_MESSAGE_VEHICLEGEAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hmcl_msgs
{
template <class ContainerAllocator>
struct VehicleGear_
{
  typedef VehicleGear_<ContainerAllocator> Type;

  VehicleGear_()
    : gear(0)  {
    }
  VehicleGear_(const ContainerAllocator& _alloc)
    : gear(0)  {
  (void)_alloc;
    }



   typedef uint8_t _gear_type;
  _gear_type gear;





  typedef boost::shared_ptr< ::hmcl_msgs::VehicleGear_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hmcl_msgs::VehicleGear_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleGear_

typedef ::hmcl_msgs::VehicleGear_<std::allocator<void> > VehicleGear;

typedef boost::shared_ptr< ::hmcl_msgs::VehicleGear > VehicleGearPtr;
typedef boost::shared_ptr< ::hmcl_msgs::VehicleGear const> VehicleGearConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hmcl_msgs::VehicleGear_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hmcl_msgs::VehicleGear_<ContainerAllocator1> & lhs, const ::hmcl_msgs::VehicleGear_<ContainerAllocator2> & rhs)
{
  return lhs.gear == rhs.gear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hmcl_msgs::VehicleGear_<ContainerAllocator1> & lhs, const ::hmcl_msgs::VehicleGear_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hmcl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hmcl_msgs::VehicleGear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hmcl_msgs::VehicleGear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hmcl_msgs::VehicleGear_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bb854d7dfa42e038a119fb419a368ec";
  }

  static const char* value(const ::hmcl_msgs::VehicleGear_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bb854d7dfa42e03ULL;
  static const uint64_t static_value2 = 0x8a119fb419a368ecULL;
};

template<class ContainerAllocator>
struct DataType< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hmcl_msgs/VehicleGear";
  }

  static const char* value(const ::hmcl_msgs::VehicleGear_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Gear -> P       = 1\n"
"# Gear -> D       = 2\n"
"# Gear -> N       = 3\n"
"# Gear -> R       = 4\n"
"uint8 gear\n"
;
  }

  static const char* value(const ::hmcl_msgs::VehicleGear_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleGear_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hmcl_msgs::VehicleGear_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hmcl_msgs::VehicleGear_<ContainerAllocator>& v)
  {
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HMCL_MSGS_MESSAGE_VEHICLEGEAR_H
