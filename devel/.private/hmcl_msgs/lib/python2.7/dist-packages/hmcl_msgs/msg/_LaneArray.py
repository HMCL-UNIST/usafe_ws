# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmcl_msgs/LaneArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hmcl_msgs.msg
import std_msgs.msg

class LaneArray(genpy.Message):
  _md5sum = "a78ef4ffb313077e31f9708f068f5ac9"
  _type = "hmcl_msgs/LaneArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 id
Lane[] lanes
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hmcl_msgs/Lane
Header header
int32 lane_id
int32 signal_id
bool lane_change_flag
float32 speed_limit 
Waypoint[] waypoints
Trafficlight[] trafficlights
Waypoint[] speedbumps 

================================================================================
MSG: hmcl_msgs/Waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
uint32 lane_id
bool Junction
bool Crosswalk
bool Stop_line
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: hmcl_msgs/Trafficlight
Header header
int32 id
geometry_msgs/Point32 pose
bool valid_stop_line
geometry_msgs/Point32 stop_line
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','id','lanes']
  _slot_types = ['std_msgs/Header','int32','hmcl_msgs/Lane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LaneArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.lanes is None:
        self.lanes = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.lanes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2iBf().pack(_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v3 = val2.pose
          _v4 = _v3.header
          _x = _v4.seq
          buff.write(_get_struct_I().pack(_x))
          _v5 = _v4.stamp
          _x = _v5
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v4.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v6 = _v3.pose
          _v7 = _v6.position
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = _v6.orientation
          _x = _v8
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v9 = val2.twist
          _v10 = _v9.header
          _x = _v10.seq
          buff.write(_get_struct_I().pack(_x))
          _v11 = _v10.stamp
          _x = _v11
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v10.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v12 = _v9.twist
          _v13 = _v12.linear
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = _v12.angular
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
        length = len(val1.trafficlights)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trafficlights:
          _v15 = val2.header
          _x = _v15.seq
          buff.write(_get_struct_I().pack(_x))
          _v16 = _v15.stamp
          _x = _v16
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v15.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.id
          buff.write(_get_struct_i().pack(_x))
          _v17 = val2.pose
          _x = _v17
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = val2.valid_stop_line
          buff.write(_get_struct_B().pack(_x))
          _v18 = val2.stop_line
          _x = _v18
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.speedbumps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.speedbumps:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v19 = val2.pose
          _v20 = _v19.header
          _x = _v20.seq
          buff.write(_get_struct_I().pack(_x))
          _v21 = _v20.stamp
          _x = _v21
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v20.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v22 = _v19.pose
          _v23 = _v22.position
          _x = _v23
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v24 = _v22.orientation
          _x = _v24
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v25 = val2.twist
          _v26 = _v25.header
          _x = _v26.seq
          buff.write(_get_struct_I().pack(_x))
          _v27 = _v26.stamp
          _x = _v27
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v26.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v28 = _v25.twist
          _v29 = _v28.linear
          _x = _v29
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v30 = _v28.angular
          _x = _v30
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Lane()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.frame_id = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_2iBf().unpack(str[start:end])
        val1.lane_change_flag = bool(val1.lane_change_flag)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v33 = val2.pose
          _v34 = _v33.header
          start = end
          end += 4
          (_v34.seq,) = _get_struct_I().unpack(str[start:end])
          _v35 = _v34.stamp
          _x = _v35
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v34.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v34.frame_id = str[start:end]
          _v36 = _v33.pose
          _v37 = _v36.position
          _x = _v37
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v38 = _v36.orientation
          _x = _v38
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v39 = val2.twist
          _v40 = _v39.header
          start = end
          end += 4
          (_v40.seq,) = _get_struct_I().unpack(str[start:end])
          _v41 = _v40.stamp
          _x = _v41
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v40.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v40.frame_id = str[start:end]
          _v42 = _v39.twist
          _v43 = _v42.linear
          _x = _v43
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v44 = _v42.angular
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 7
          (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
          val2.Junction = bool(val2.Junction)
          val2.Crosswalk = bool(val2.Crosswalk)
          val2.Stop_line = bool(val2.Stop_line)
          val1.waypoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trafficlights = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Trafficlight()
          _v45 = val2.header
          start = end
          end += 4
          (_v45.seq,) = _get_struct_I().unpack(str[start:end])
          _v46 = _v45.stamp
          _x = _v46
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v45.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v45.frame_id = str[start:end]
          start = end
          end += 4
          (val2.id,) = _get_struct_i().unpack(str[start:end])
          _v47 = val2.pose
          _x = _v47
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 1
          (val2.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
          val2.valid_stop_line = bool(val2.valid_stop_line)
          _v48 = val2.stop_line
          _x = _v48
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.trafficlights.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.speedbumps = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v49 = val2.pose
          _v50 = _v49.header
          start = end
          end += 4
          (_v50.seq,) = _get_struct_I().unpack(str[start:end])
          _v51 = _v50.stamp
          _x = _v51
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v50.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v50.frame_id = str[start:end]
          _v52 = _v49.pose
          _v53 = _v52.position
          _x = _v53
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v54 = _v52.orientation
          _x = _v54
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v55 = val2.twist
          _v56 = _v55.header
          start = end
          end += 4
          (_v56.seq,) = _get_struct_I().unpack(str[start:end])
          _v57 = _v56.stamp
          _x = _v57
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v56.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v56.frame_id = str[start:end]
          _v58 = _v55.twist
          _v59 = _v58.linear
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60 = _v58.angular
          _x = _v60
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 7
          (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
          val2.Junction = bool(val2.Junction)
          val2.Crosswalk = bool(val2.Crosswalk)
          val2.Stop_line = bool(val2.Stop_line)
          val1.speedbumps.append(val2)
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.id
      buff.write(_get_struct_i().pack(_x))
      length = len(self.lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.lanes:
        _v61 = val1.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2iBf().pack(_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit))
        length = len(val1.waypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.waypoints:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v63 = val2.pose
          _v64 = _v63.header
          _x = _v64.seq
          buff.write(_get_struct_I().pack(_x))
          _v65 = _v64.stamp
          _x = _v65
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v64.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v66 = _v63.pose
          _v67 = _v66.position
          _x = _v67
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v68 = _v66.orientation
          _x = _v68
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v69 = val2.twist
          _v70 = _v69.header
          _x = _v70.seq
          buff.write(_get_struct_I().pack(_x))
          _v71 = _v70.stamp
          _x = _v71
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v70.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v72 = _v69.twist
          _v73 = _v72.linear
          _x = _v73
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v74 = _v72.angular
          _x = _v74
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
        length = len(val1.trafficlights)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trafficlights:
          _v75 = val2.header
          _x = _v75.seq
          buff.write(_get_struct_I().pack(_x))
          _v76 = _v75.stamp
          _x = _v76
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v75.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2.id
          buff.write(_get_struct_i().pack(_x))
          _v77 = val2.pose
          _x = _v77
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = val2.valid_stop_line
          buff.write(_get_struct_B().pack(_x))
          _v78 = val2.stop_line
          _x = _v78
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.speedbumps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.speedbumps:
          _x = val2
          buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
          _v79 = val2.pose
          _v80 = _v79.header
          _x = _v80.seq
          buff.write(_get_struct_I().pack(_x))
          _v81 = _v80.stamp
          _x = _v81
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v80.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v82 = _v79.pose
          _v83 = _v82.position
          _x = _v83
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v84 = _v82.orientation
          _x = _v84
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v85 = val2.twist
          _v86 = _v85.header
          _x = _v86.seq
          buff.write(_get_struct_I().pack(_x))
          _v87 = _v86.stamp
          _x = _v87
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v86.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v88 = _v85.twist
          _v89 = _v88.linear
          _x = _v89
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v90 = _v88.angular
          _x = _v90
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lanes is None:
        self.lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lanes = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Lane()
        _v91 = val1.header
        start = end
        end += 4
        (_v91.seq,) = _get_struct_I().unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.frame_id = str[start:end]
        _x = val1
        start = end
        end += 13
        (_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_2iBf().unpack(str[start:end])
        val1.lane_change_flag = bool(val1.lane_change_flag)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.waypoints = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v93 = val2.pose
          _v94 = _v93.header
          start = end
          end += 4
          (_v94.seq,) = _get_struct_I().unpack(str[start:end])
          _v95 = _v94.stamp
          _x = _v95
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v94.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v94.frame_id = str[start:end]
          _v96 = _v93.pose
          _v97 = _v96.position
          _x = _v97
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v98 = _v96.orientation
          _x = _v98
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v99 = val2.twist
          _v100 = _v99.header
          start = end
          end += 4
          (_v100.seq,) = _get_struct_I().unpack(str[start:end])
          _v101 = _v100.stamp
          _x = _v101
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v100.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v100.frame_id = str[start:end]
          _v102 = _v99.twist
          _v103 = _v102.linear
          _x = _v103
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v104 = _v102.angular
          _x = _v104
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 7
          (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
          val2.Junction = bool(val2.Junction)
          val2.Crosswalk = bool(val2.Crosswalk)
          val2.Stop_line = bool(val2.Stop_line)
          val1.waypoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trafficlights = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Trafficlight()
          _v105 = val2.header
          start = end
          end += 4
          (_v105.seq,) = _get_struct_I().unpack(str[start:end])
          _v106 = _v105.stamp
          _x = _v106
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v105.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v105.frame_id = str[start:end]
          start = end
          end += 4
          (val2.id,) = _get_struct_i().unpack(str[start:end])
          _v107 = val2.pose
          _x = _v107
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 1
          (val2.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
          val2.valid_stop_line = bool(val2.valid_stop_line)
          _v108 = val2.stop_line
          _x = _v108
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          val1.trafficlights.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.speedbumps = []
        for i in range(0, length):
          val2 = hmcl_msgs.msg.Waypoint()
          _x = val2
          start = end
          end += 8
          (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
          _v109 = val2.pose
          _v110 = _v109.header
          start = end
          end += 4
          (_v110.seq,) = _get_struct_I().unpack(str[start:end])
          _v111 = _v110.stamp
          _x = _v111
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v110.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v110.frame_id = str[start:end]
          _v112 = _v109.pose
          _v113 = _v112.position
          _x = _v113
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v114 = _v112.orientation
          _x = _v114
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v115 = val2.twist
          _v116 = _v115.header
          start = end
          end += 4
          (_v116.seq,) = _get_struct_I().unpack(str[start:end])
          _v117 = _v116.stamp
          _x = _v117
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v116.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v116.frame_id = str[start:end]
          _v118 = _v115.twist
          _v119 = _v118.linear
          _x = _v119
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v120 = _v118.angular
          _x = _v120
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _x = val2
          start = end
          end += 7
          (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
          val2.Junction = bool(val2.Junction)
          val2.Crosswalk = bool(val2.Crosswalk)
          val2.Stop_line = bool(val2.Stop_line)
          val1.speedbumps.append(val2)
        self.lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2iBf = None
def _get_struct_2iBf():
    global _struct_2iBf
    if _struct_2iBf is None:
        _struct_2iBf = struct.Struct("<2iBf")
    return _struct_2iBf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I3B = None
def _get_struct_I3B():
    global _struct_I3B
    if _struct_I3B is None:
        _struct_I3B = struct.Struct("<I3B")
    return _struct_I3B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
