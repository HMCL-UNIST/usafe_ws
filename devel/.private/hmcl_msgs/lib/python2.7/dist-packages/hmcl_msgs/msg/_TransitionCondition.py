# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmcl_msgs/TransitionCondition.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TransitionCondition(genpy.Message):
  _md5sum = "cca5c3113432d6f9d44e33df94544699"
  _type = "hmcl_msgs/TransitionCondition"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool missionStart
bool approachToStartPos
bool startArrivalCheck
bool startArrivalSuccess
bool frontCar
bool stationaryFrontCar
bool approachToCrosswalk
bool crosswalkPass
bool pedestrianOnCrosswalk
bool leftTurn
bool rightTurn
bool turn
bool trafficLightStop
bool stopCheck
bool luggageDrop
bool brokenFrontCar
bool laneChangeDone
bool essentialLaneChange
bool speedBumpSign
bool speedBumpPass
bool approachToGoalPos
bool goalArrivalCheck"""
  __slots__ = ['missionStart','approachToStartPos','startArrivalCheck','startArrivalSuccess','frontCar','stationaryFrontCar','approachToCrosswalk','crosswalkPass','pedestrianOnCrosswalk','leftTurn','rightTurn','turn','trafficLightStop','stopCheck','luggageDrop','brokenFrontCar','laneChangeDone','essentialLaneChange','speedBumpSign','speedBumpPass','approachToGoalPos','goalArrivalCheck']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       missionStart,approachToStartPos,startArrivalCheck,startArrivalSuccess,frontCar,stationaryFrontCar,approachToCrosswalk,crosswalkPass,pedestrianOnCrosswalk,leftTurn,rightTurn,turn,trafficLightStop,stopCheck,luggageDrop,brokenFrontCar,laneChangeDone,essentialLaneChange,speedBumpSign,speedBumpPass,approachToGoalPos,goalArrivalCheck

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransitionCondition, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.missionStart is None:
        self.missionStart = False
      if self.approachToStartPos is None:
        self.approachToStartPos = False
      if self.startArrivalCheck is None:
        self.startArrivalCheck = False
      if self.startArrivalSuccess is None:
        self.startArrivalSuccess = False
      if self.frontCar is None:
        self.frontCar = False
      if self.stationaryFrontCar is None:
        self.stationaryFrontCar = False
      if self.approachToCrosswalk is None:
        self.approachToCrosswalk = False
      if self.crosswalkPass is None:
        self.crosswalkPass = False
      if self.pedestrianOnCrosswalk is None:
        self.pedestrianOnCrosswalk = False
      if self.leftTurn is None:
        self.leftTurn = False
      if self.rightTurn is None:
        self.rightTurn = False
      if self.turn is None:
        self.turn = False
      if self.trafficLightStop is None:
        self.trafficLightStop = False
      if self.stopCheck is None:
        self.stopCheck = False
      if self.luggageDrop is None:
        self.luggageDrop = False
      if self.brokenFrontCar is None:
        self.brokenFrontCar = False
      if self.laneChangeDone is None:
        self.laneChangeDone = False
      if self.essentialLaneChange is None:
        self.essentialLaneChange = False
      if self.speedBumpSign is None:
        self.speedBumpSign = False
      if self.speedBumpPass is None:
        self.speedBumpPass = False
      if self.approachToGoalPos is None:
        self.approachToGoalPos = False
      if self.goalArrivalCheck is None:
        self.goalArrivalCheck = False
    else:
      self.missionStart = False
      self.approachToStartPos = False
      self.startArrivalCheck = False
      self.startArrivalSuccess = False
      self.frontCar = False
      self.stationaryFrontCar = False
      self.approachToCrosswalk = False
      self.crosswalkPass = False
      self.pedestrianOnCrosswalk = False
      self.leftTurn = False
      self.rightTurn = False
      self.turn = False
      self.trafficLightStop = False
      self.stopCheck = False
      self.luggageDrop = False
      self.brokenFrontCar = False
      self.laneChangeDone = False
      self.essentialLaneChange = False
      self.speedBumpSign = False
      self.speedBumpPass = False
      self.approachToGoalPos = False
      self.goalArrivalCheck = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_22B().pack(_x.missionStart, _x.approachToStartPos, _x.startArrivalCheck, _x.startArrivalSuccess, _x.frontCar, _x.stationaryFrontCar, _x.approachToCrosswalk, _x.crosswalkPass, _x.pedestrianOnCrosswalk, _x.leftTurn, _x.rightTurn, _x.turn, _x.trafficLightStop, _x.stopCheck, _x.luggageDrop, _x.brokenFrontCar, _x.laneChangeDone, _x.essentialLaneChange, _x.speedBumpSign, _x.speedBumpPass, _x.approachToGoalPos, _x.goalArrivalCheck))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.missionStart, _x.approachToStartPos, _x.startArrivalCheck, _x.startArrivalSuccess, _x.frontCar, _x.stationaryFrontCar, _x.approachToCrosswalk, _x.crosswalkPass, _x.pedestrianOnCrosswalk, _x.leftTurn, _x.rightTurn, _x.turn, _x.trafficLightStop, _x.stopCheck, _x.luggageDrop, _x.brokenFrontCar, _x.laneChangeDone, _x.essentialLaneChange, _x.speedBumpSign, _x.speedBumpPass, _x.approachToGoalPos, _x.goalArrivalCheck,) = _get_struct_22B().unpack(str[start:end])
      self.missionStart = bool(self.missionStart)
      self.approachToStartPos = bool(self.approachToStartPos)
      self.startArrivalCheck = bool(self.startArrivalCheck)
      self.startArrivalSuccess = bool(self.startArrivalSuccess)
      self.frontCar = bool(self.frontCar)
      self.stationaryFrontCar = bool(self.stationaryFrontCar)
      self.approachToCrosswalk = bool(self.approachToCrosswalk)
      self.crosswalkPass = bool(self.crosswalkPass)
      self.pedestrianOnCrosswalk = bool(self.pedestrianOnCrosswalk)
      self.leftTurn = bool(self.leftTurn)
      self.rightTurn = bool(self.rightTurn)
      self.turn = bool(self.turn)
      self.trafficLightStop = bool(self.trafficLightStop)
      self.stopCheck = bool(self.stopCheck)
      self.luggageDrop = bool(self.luggageDrop)
      self.brokenFrontCar = bool(self.brokenFrontCar)
      self.laneChangeDone = bool(self.laneChangeDone)
      self.essentialLaneChange = bool(self.essentialLaneChange)
      self.speedBumpSign = bool(self.speedBumpSign)
      self.speedBumpPass = bool(self.speedBumpPass)
      self.approachToGoalPos = bool(self.approachToGoalPos)
      self.goalArrivalCheck = bool(self.goalArrivalCheck)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_22B().pack(_x.missionStart, _x.approachToStartPos, _x.startArrivalCheck, _x.startArrivalSuccess, _x.frontCar, _x.stationaryFrontCar, _x.approachToCrosswalk, _x.crosswalkPass, _x.pedestrianOnCrosswalk, _x.leftTurn, _x.rightTurn, _x.turn, _x.trafficLightStop, _x.stopCheck, _x.luggageDrop, _x.brokenFrontCar, _x.laneChangeDone, _x.essentialLaneChange, _x.speedBumpSign, _x.speedBumpPass, _x.approachToGoalPos, _x.goalArrivalCheck))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.missionStart, _x.approachToStartPos, _x.startArrivalCheck, _x.startArrivalSuccess, _x.frontCar, _x.stationaryFrontCar, _x.approachToCrosswalk, _x.crosswalkPass, _x.pedestrianOnCrosswalk, _x.leftTurn, _x.rightTurn, _x.turn, _x.trafficLightStop, _x.stopCheck, _x.luggageDrop, _x.brokenFrontCar, _x.laneChangeDone, _x.essentialLaneChange, _x.speedBumpSign, _x.speedBumpPass, _x.approachToGoalPos, _x.goalArrivalCheck,) = _get_struct_22B().unpack(str[start:end])
      self.missionStart = bool(self.missionStart)
      self.approachToStartPos = bool(self.approachToStartPos)
      self.startArrivalCheck = bool(self.startArrivalCheck)
      self.startArrivalSuccess = bool(self.startArrivalSuccess)
      self.frontCar = bool(self.frontCar)
      self.stationaryFrontCar = bool(self.stationaryFrontCar)
      self.approachToCrosswalk = bool(self.approachToCrosswalk)
      self.crosswalkPass = bool(self.crosswalkPass)
      self.pedestrianOnCrosswalk = bool(self.pedestrianOnCrosswalk)
      self.leftTurn = bool(self.leftTurn)
      self.rightTurn = bool(self.rightTurn)
      self.turn = bool(self.turn)
      self.trafficLightStop = bool(self.trafficLightStop)
      self.stopCheck = bool(self.stopCheck)
      self.luggageDrop = bool(self.luggageDrop)
      self.brokenFrontCar = bool(self.brokenFrontCar)
      self.laneChangeDone = bool(self.laneChangeDone)
      self.essentialLaneChange = bool(self.essentialLaneChange)
      self.speedBumpSign = bool(self.speedBumpSign)
      self.speedBumpPass = bool(self.speedBumpPass)
      self.approachToGoalPos = bool(self.approachToGoalPos)
      self.goalArrivalCheck = bool(self.goalArrivalCheck)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_22B = None
def _get_struct_22B():
    global _struct_22B
    if _struct_22B is None:
        _struct_22B = struct.Struct("<22B")
    return _struct_22B
