# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hmcl_msgs/Lane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hmcl_msgs.msg
import std_msgs.msg

class Lane(genpy.Message):
  _md5sum = "bb0d960821c3d7ff7a1e610d834cb388"
  _type = "hmcl_msgs/Lane"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int32 lane_id
int32 signal_id
bool lane_change_flag
float32 speed_limit 
Waypoint[] waypoints
Trafficlight[] trafficlights
Waypoint[] speedbumps 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: hmcl_msgs/Waypoint
# global id
int32 gid 
# local id
int32 lid
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
uint32 lane_id
bool Junction
bool Crosswalk
bool Stop_line
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: hmcl_msgs/Trafficlight
Header header
int32 id
geometry_msgs/Point32 pose
bool valid_stop_line
geometry_msgs/Point32 stop_line
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','lane_id','signal_id','lane_change_flag','speed_limit','waypoints','trafficlights','speedbumps']
  _slot_types = ['std_msgs/Header','int32','int32','bool','float32','hmcl_msgs/Waypoint[]','hmcl_msgs/Trafficlight[]','hmcl_msgs/Waypoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,lane_id,signal_id,lane_change_flag,speed_limit,waypoints,trafficlights,speedbumps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.lane_id is None:
        self.lane_id = 0
      if self.signal_id is None:
        self.signal_id = 0
      if self.lane_change_flag is None:
        self.lane_change_flag = False
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.waypoints is None:
        self.waypoints = []
      if self.trafficlights is None:
        self.trafficlights = []
      if self.speedbumps is None:
        self.speedbumps = []
    else:
      self.header = std_msgs.msg.Header()
      self.lane_id = 0
      self.signal_id = 0
      self.lane_change_flag = False
      self.speed_limit = 0.
      self.waypoints = []
      self.trafficlights = []
      self.speedbumps = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iBf().pack(_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v1 = val1.pose
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.twist
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.twist
        _v11 = _v10.linear
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.angular
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
      length = len(self.trafficlights)
      buff.write(_struct_I.pack(length))
      for val1 in self.trafficlights:
        _v13 = val1.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v15 = val1.pose
        _x = _v15
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.valid_stop_line
        buff.write(_get_struct_B().pack(_x))
        _v16 = val1.stop_line
        _x = _v16
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.speedbumps)
      buff.write(_struct_I.pack(length))
      for val1 in self.speedbumps:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v17 = val1.pose
        _v18 = _v17.header
        _x = _v18.seq
        buff.write(_get_struct_I().pack(_x))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v20 = _v17.pose
        _v21 = _v20.position
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v22 = _v20.orientation
        _x = _v22
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v23 = val1.twist
        _v24 = _v23.header
        _x = _v24.seq
        buff.write(_get_struct_I().pack(_x))
        _v25 = _v24.stamp
        _x = _v25
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v24.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v26 = _v23.twist
        _v27 = _v26.linear
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v28 = _v26.angular
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = None
      if self.trafficlights is None:
        self.trafficlights = None
      if self.speedbumps is None:
        self.speedbumps = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_2iBf().unpack(str[start:end])
      self.lane_change_flag = bool(self.lane_change_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v29 = val1.pose
        _v30 = _v29.header
        start = end
        end += 4
        (_v30.seq,) = _get_struct_I().unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.frame_id = str[start:end]
        _v32 = _v29.pose
        _v33 = _v32.position
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v34 = _v32.orientation
        _x = _v34
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v35 = val1.twist
        _v36 = _v35.header
        start = end
        end += 4
        (_v36.seq,) = _get_struct_I().unpack(str[start:end])
        _v37 = _v36.stamp
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v36.frame_id = str[start:end]
        _v38 = _v35.twist
        _v39 = _v38.linear
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v40 = _v38.angular
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 7
        (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
        val1.Junction = bool(val1.Junction)
        val1.Crosswalk = bool(val1.Crosswalk)
        val1.Stop_line = bool(val1.Stop_line)
        self.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trafficlights = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Trafficlight()
        _v41 = val1.header
        start = end
        end += 4
        (_v41.seq,) = _get_struct_I().unpack(str[start:end])
        _v42 = _v41.stamp
        _x = _v42
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v41.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v41.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v43 = val1.pose
        _x = _v43
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
        val1.valid_stop_line = bool(val1.valid_stop_line)
        _v44 = val1.stop_line
        _x = _v44
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.trafficlights.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speedbumps = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v45 = val1.pose
        _v46 = _v45.header
        start = end
        end += 4
        (_v46.seq,) = _get_struct_I().unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.frame_id = str[start:end]
        _v48 = _v45.pose
        _v49 = _v48.position
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v50 = _v48.orientation
        _x = _v50
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v51 = val1.twist
        _v52 = _v51.header
        start = end
        end += 4
        (_v52.seq,) = _get_struct_I().unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.frame_id = str[start:end]
        _v54 = _v51.twist
        _v55 = _v54.linear
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = _v54.angular
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 7
        (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
        val1.Junction = bool(val1.Junction)
        val1.Crosswalk = bool(val1.Crosswalk)
        val1.Stop_line = bool(val1.Stop_line)
        self.speedbumps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2iBf().pack(_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit))
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v57 = val1.pose
        _v58 = _v57.header
        _x = _v58.seq
        buff.write(_get_struct_I().pack(_x))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v60 = _v57.pose
        _v61 = _v60.position
        _x = _v61
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v62 = _v60.orientation
        _x = _v62
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v63 = val1.twist
        _v64 = _v63.header
        _x = _v64.seq
        buff.write(_get_struct_I().pack(_x))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v66 = _v63.twist
        _v67 = _v66.linear
        _x = _v67
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v68 = _v66.angular
        _x = _v68
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
      length = len(self.trafficlights)
      buff.write(_struct_I.pack(length))
      for val1 in self.trafficlights:
        _v69 = val1.header
        _x = _v69.seq
        buff.write(_get_struct_I().pack(_x))
        _v70 = _v69.stamp
        _x = _v70
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v69.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _v71 = val1.pose
        _x = _v71
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1.valid_stop_line
        buff.write(_get_struct_B().pack(_x))
        _v72 = val1.stop_line
        _x = _v72
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.speedbumps)
      buff.write(_struct_I.pack(length))
      for val1 in self.speedbumps:
        _x = val1
        buff.write(_get_struct_2i().pack(_x.gid, _x.lid))
        _v73 = val1.pose
        _v74 = _v73.header
        _x = _v74.seq
        buff.write(_get_struct_I().pack(_x))
        _v75 = _v74.stamp
        _x = _v75
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v74.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v76 = _v73.pose
        _v77 = _v76.position
        _x = _v77
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v78 = _v76.orientation
        _x = _v78
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v79 = val1.twist
        _v80 = _v79.header
        _x = _v80.seq
        buff.write(_get_struct_I().pack(_x))
        _v81 = _v80.stamp
        _x = _v81
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v80.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v82 = _v79.twist
        _v83 = _v82.linear
        _x = _v83
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v84 = _v82.angular
        _x = _v84
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_I3B().pack(_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypoints is None:
        self.waypoints = None
      if self.trafficlights is None:
        self.trafficlights = None
      if self.speedbumps is None:
        self.speedbumps = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.lane_id, _x.signal_id, _x.lane_change_flag, _x.speed_limit,) = _get_struct_2iBf().unpack(str[start:end])
      self.lane_change_flag = bool(self.lane_change_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v85 = val1.pose
        _v86 = _v85.header
        start = end
        end += 4
        (_v86.seq,) = _get_struct_I().unpack(str[start:end])
        _v87 = _v86.stamp
        _x = _v87
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v86.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v86.frame_id = str[start:end]
        _v88 = _v85.pose
        _v89 = _v88.position
        _x = _v89
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v90 = _v88.orientation
        _x = _v90
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v91 = val1.twist
        _v92 = _v91.header
        start = end
        end += 4
        (_v92.seq,) = _get_struct_I().unpack(str[start:end])
        _v93 = _v92.stamp
        _x = _v93
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v92.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v92.frame_id = str[start:end]
        _v94 = _v91.twist
        _v95 = _v94.linear
        _x = _v95
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v96 = _v94.angular
        _x = _v96
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 7
        (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
        val1.Junction = bool(val1.Junction)
        val1.Crosswalk = bool(val1.Crosswalk)
        val1.Stop_line = bool(val1.Stop_line)
        self.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trafficlights = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Trafficlight()
        _v97 = val1.header
        start = end
        end += 4
        (_v97.seq,) = _get_struct_I().unpack(str[start:end])
        _v98 = _v97.stamp
        _x = _v98
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v97.frame_id = str[start:end]
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        _v99 = val1.pose
        _x = _v99
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 1
        (val1.valid_stop_line,) = _get_struct_B().unpack(str[start:end])
        val1.valid_stop_line = bool(val1.valid_stop_line)
        _v100 = val1.stop_line
        _x = _v100
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.trafficlights.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.speedbumps = []
      for i in range(0, length):
        val1 = hmcl_msgs.msg.Waypoint()
        _x = val1
        start = end
        end += 8
        (_x.gid, _x.lid,) = _get_struct_2i().unpack(str[start:end])
        _v101 = val1.pose
        _v102 = _v101.header
        start = end
        end += 4
        (_v102.seq,) = _get_struct_I().unpack(str[start:end])
        _v103 = _v102.stamp
        _x = _v103
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v102.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v102.frame_id = str[start:end]
        _v104 = _v101.pose
        _v105 = _v104.position
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v106 = _v104.orientation
        _x = _v106
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v107 = val1.twist
        _v108 = _v107.header
        start = end
        end += 4
        (_v108.seq,) = _get_struct_I().unpack(str[start:end])
        _v109 = _v108.stamp
        _x = _v109
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v108.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v108.frame_id = str[start:end]
        _v110 = _v107.twist
        _v111 = _v110.linear
        _x = _v111
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v112 = _v110.angular
        _x = _v112
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 7
        (_x.lane_id, _x.Junction, _x.Crosswalk, _x.Stop_line,) = _get_struct_I3B().unpack(str[start:end])
        val1.Junction = bool(val1.Junction)
        val1.Crosswalk = bool(val1.Crosswalk)
        val1.Stop_line = bool(val1.Stop_line)
        self.speedbumps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2iBf = None
def _get_struct_2iBf():
    global _struct_2iBf
    if _struct_2iBf is None:
        _struct_2iBf = struct.Struct("<2iBf")
    return _struct_2iBf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I3B = None
def _get_struct_I3B():
    global _struct_I3B
    if _struct_I3B is None:
        _struct_I3B = struct.Struct("<I3B")
    return _struct_I3B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
